//****************************************************************
//  (Partially) Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       v0.1.5081.42854 - SHA1:66c203d - Debug
//  Date:          12/28/2016 8:19:48 PM
//
//  Assemblies:
//    System.Drawing.dll
//
//****************************************************************


declare module System.Drawing.Internal {
    export interface ISystemColorTracker {
        OnSystemColorChanged(): void;
    }

}
declare module System.Drawing {

    export class Brush {
        NativeBrush: number;
        Clone(): any;
        Dispose(): void;
    }

    export class Pen implements System.Drawing.Internal.ISystemColorTracker {
        NativePen: number;
        Width: number;
        StartCap: System.Drawing.Drawing2D.LineCap;
        EndCap: System.Drawing.Drawing2D.LineCap;
        DashCap: System.Drawing.Drawing2D.DashCap;
        LineJoin: System.Drawing.Drawing2D.LineJoin;
        CustomStartCap: System.Drawing.Drawing2D.CustomLineCap;
        CustomEndCap: System.Drawing.Drawing2D.CustomLineCap;
        MiterLimit: number;
        Alignment: System.Drawing.Drawing2D.PenAlignment;
        Transform: System.Drawing.Drawing2D.Matrix;
        PenType: System.Drawing.Drawing2D.PenType;
        Color: System.Drawing.Color;
        Brush: System.Drawing.Brush;
        DashStyle: System.Drawing.Drawing2D.DashStyle;
        DashOffset: number;
        DashPattern: number[];
        CompoundArray: number[];
        constructor(color: System.Drawing.Color);
        constructor(color: System.Drawing.Color, width: number);
        constructor(brush: System.Drawing.Brush);
        constructor(brush: System.Drawing.Brush, width: number);
        OnSystemColorChanged(): void;
        Clone(): any;
        Dispose(): void;
        SetLineCap(startCap: System.Drawing.Drawing2D.LineCap, endCap: System.Drawing.Drawing2D.LineCap, dashCap: System.Drawing.Drawing2D.DashCap): void;
        ResetTransform(): void;
        MultiplyTransform(matrix: System.Drawing.Drawing2D.Matrix): void;
        MultiplyTransform(matrix: System.Drawing.Drawing2D.Matrix, order: System.Drawing.Drawing2D.MatrixOrder): void;
        TranslateTransform(dx: number, dy: number): void;
        TranslateTransform(dx: number, dy: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        ScaleTransform(sx: number, sy: number): void;
        ScaleTransform(sx: number, sy: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        RotateTransform(angle: number): void;
        RotateTransform(angle: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
    }

    export class Point {
        Empty: System.Drawing.Point;
        IsEmpty: boolean;
        X: number;
        Y: number;
        constructor(x: number, y: number);
        constructor(sz: System.Drawing.Size);
        constructor(dw: number);
        static Add(pt: System.Drawing.Point, sz: System.Drawing.Size): System.Drawing.Point;
        static Subtract(pt: System.Drawing.Point, sz: System.Drawing.Size): System.Drawing.Point;
        static Ceiling(value: System.Drawing.PointF): System.Drawing.Point;
        static Truncate(value: System.Drawing.PointF): System.Drawing.Point;
        static Round(value: System.Drawing.PointF): System.Drawing.Point;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        Offset(dx: number, dy: number): void;
        Offset(p: System.Drawing.Point): void;
        ToString(): string;
    }

    export class PointF {
        Empty: System.Drawing.PointF;
        IsEmpty: boolean;
        X: number;
        Y: number;
        constructor(x: number, y: number);
        static Add(pt: System.Drawing.PointF, sz: System.Drawing.Size): System.Drawing.PointF;
        static Subtract(pt: System.Drawing.PointF, sz: System.Drawing.Size): System.Drawing.PointF;
        static Add(pt: System.Drawing.PointF, sz: System.Drawing.SizeF): System.Drawing.PointF;
        static Subtract(pt: System.Drawing.PointF, sz: System.Drawing.SizeF): System.Drawing.PointF;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
    }

    export class Size {
        Empty: System.Drawing.Size;
        IsEmpty: boolean;
        Width: number;
        Height: number;
        constructor(pt: System.Drawing.Point);
        constructor(width: number, height: number);
        static Add(sz1: System.Drawing.Size, sz2: System.Drawing.Size): System.Drawing.Size;
        static Ceiling(value: System.Drawing.SizeF): System.Drawing.Size;
        static Subtract(sz1: System.Drawing.Size, sz2: System.Drawing.Size): System.Drawing.Size;
        static Truncate(value: System.Drawing.SizeF): System.Drawing.Size;
        static Round(value: System.Drawing.SizeF): System.Drawing.Size;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
    }

    export class SizeF {
        Empty: System.Drawing.SizeF;
        IsEmpty: boolean;
        Width: number;
        Height: number;
        constructor(size: System.Drawing.SizeF);
        constructor(pt: System.Drawing.PointF);
        constructor(width: number, height: number);
        static Add(sz1: System.Drawing.SizeF, sz2: System.Drawing.SizeF): System.Drawing.SizeF;
        static Subtract(sz1: System.Drawing.SizeF, sz2: System.Drawing.SizeF): System.Drawing.SizeF;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToPointF(): System.Drawing.PointF;
        ToSize(): System.Drawing.Size;
        ToString(): string;
    }

    enum KnownColor {
        ActiveBorder = 1,
        ActiveCaption = 2,
        ActiveCaptionText = 3,
        AppWorkspace = 4,
        Control = 5,
        ControlDark = 6,
        ControlDarkDark = 7,
        ControlLight = 8,
        ControlLightLight = 9,
        ControlText = 10,
        Desktop = 11,
        GrayText = 12,
        Highlight = 13,
        HighlightText = 14,
        HotTrack = 15,
        InactiveBorder = 16,
        InactiveCaption = 17,
        InactiveCaptionText = 18,
        Info = 19,
        InfoText = 20,
        Menu = 21,
        MenuText = 22,
        ScrollBar = 23,
        Window = 24,
        WindowFrame = 25,
        WindowText = 26,
        Transparent = 27,
        AliceBlue = 28,
        AntiqueWhite = 29,
        Aqua = 30,
        Aquamarine = 31,
        Azure = 32,
        Beige = 33,
        Bisque = 34,
        Black = 35,
        BlanchedAlmond = 36,
        Blue = 37,
        BlueViolet = 38,
        Brown = 39,
        BurlyWood = 40,
        CadetBlue = 41,
        Chartreuse = 42,
        Chocolate = 43,
        Coral = 44,
        CornflowerBlue = 45,
        Cornsilk = 46,
        Crimson = 47,
        Cyan = 48,
        DarkBlue = 49,
        DarkCyan = 50,
        DarkGoldenrod = 51,
        DarkGray = 52,
        DarkGreen = 53,
        DarkKhaki = 54,
        DarkMagenta = 55,
        DarkOliveGreen = 56,
        DarkOrange = 57,
        DarkOrchid = 58,
        DarkRed = 59,
        DarkSalmon = 60,
        DarkSeaGreen = 61,
        DarkSlateBlue = 62,
        DarkSlateGray = 63,
        DarkTurquoise = 64,
        DarkViolet = 65,
        DeepPink = 66,
        DeepSkyBlue = 67,
        DimGray = 68,
        DodgerBlue = 69,
        Firebrick = 70,
        FloralWhite = 71,
        ForestGreen = 72,
        Fuchsia = 73,
        Gainsboro = 74,
        GhostWhite = 75,
        Gold = 76,
        Goldenrod = 77,
        Gray = 78,
        Green = 79,
        GreenYellow = 80,
        Honeydew = 81,
        HotPink = 82,
        IndianRed = 83,
        Indigo = 84,
        Ivory = 85,
        Khaki = 86,
        Lavender = 87,
        LavenderBlush = 88,
        LawnGreen = 89,
        LemonChiffon = 90,
        LightBlue = 91,
        LightCoral = 92,
        LightCyan = 93,
        LightGoldenrodYellow = 94,
        LightGray = 95,
        LightGreen = 96,
        LightPink = 97,
        LightSalmon = 98,
        LightSeaGreen = 99,
        LightSkyBlue = 100,
        LightSlateGray = 101,
        LightSteelBlue = 102,
        LightYellow = 103,
        Lime = 104,
        LimeGreen = 105,
        Linen = 106,
        Magenta = 107,
        Maroon = 108,
        MediumAquamarine = 109,
        MediumBlue = 110,
        MediumOrchid = 111,
        MediumPurple = 112,
        MediumSeaGreen = 113,
        MediumSlateBlue = 114,
        MediumSpringGreen = 115,
        MediumTurquoise = 116,
        MediumVioletRed = 117,
        MidnightBlue = 118,
        MintCream = 119,
        MistyRose = 120,
        Moccasin = 121,
        NavajoWhite = 122,
        Navy = 123,
        OldLace = 124,
        Olive = 125,
        OliveDrab = 126,
        Orange = 127,
        OrangeRed = 128,
        Orchid = 129,
        PaleGoldenrod = 130,
        PaleGreen = 131,
        PaleTurquoise = 132,
        PaleVioletRed = 133,
        PapayaWhip = 134,
        PeachPuff = 135,
        Peru = 136,
        Pink = 137,
        Plum = 138,
        PowderBlue = 139,
        Purple = 140,
        Red = 141,
        RosyBrown = 142,
        RoyalBlue = 143,
        SaddleBrown = 144,
        Salmon = 145,
        SandyBrown = 146,
        SeaGreen = 147,
        SeaShell = 148,
        Sienna = 149,
        Silver = 150,
        SkyBlue = 151,
        SlateBlue = 152,
        SlateGray = 153,
        Snow = 154,
        SpringGreen = 155,
        SteelBlue = 156,
        Tan = 157,
        Teal = 158,
        Thistle = 159,
        Tomato = 160,
        Turquoise = 161,
        Violet = 162,
        Wheat = 163,
        White = 164,
        WhiteSmoke = 165,
        Yellow = 166,
        YellowGreen = 167,
        ButtonFace = 168,
        ButtonHighlight = 169,
        ButtonShadow = 170,
        GradientActiveCaption = 171,
        GradientInactiveCaption = 172,
        MenuBar = 173,
        MenuHighlight = 174
    }

    export class Graphics_DrawImageAbort {
        constructor(object: any, method: number);
        Invoke(callbackdata: number): boolean;
        BeginInvoke(callbackdata: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): boolean;
    }

    export class Color {
        Empty: System.Drawing.Color;
        Transparent: System.Drawing.Color;
        AliceBlue: System.Drawing.Color;
        AntiqueWhite: System.Drawing.Color;
        Aqua: System.Drawing.Color;
        Aquamarine: System.Drawing.Color;
        Azure: System.Drawing.Color;
        Beige: System.Drawing.Color;
        Bisque: System.Drawing.Color;
        Black: System.Drawing.Color;
        BlanchedAlmond: System.Drawing.Color;
        Blue: System.Drawing.Color;
        BlueViolet: System.Drawing.Color;
        Brown: System.Drawing.Color;
        BurlyWood: System.Drawing.Color;
        CadetBlue: System.Drawing.Color;
        Chartreuse: System.Drawing.Color;
        Chocolate: System.Drawing.Color;
        Coral: System.Drawing.Color;
        CornflowerBlue: System.Drawing.Color;
        Cornsilk: System.Drawing.Color;
        Crimson: System.Drawing.Color;
        Cyan: System.Drawing.Color;
        DarkBlue: System.Drawing.Color;
        DarkCyan: System.Drawing.Color;
        DarkGoldenrod: System.Drawing.Color;
        DarkGray: System.Drawing.Color;
        DarkGreen: System.Drawing.Color;
        DarkKhaki: System.Drawing.Color;
        DarkMagenta: System.Drawing.Color;
        DarkOliveGreen: System.Drawing.Color;
        DarkOrange: System.Drawing.Color;
        DarkOrchid: System.Drawing.Color;
        DarkRed: System.Drawing.Color;
        DarkSalmon: System.Drawing.Color;
        DarkSeaGreen: System.Drawing.Color;
        DarkSlateBlue: System.Drawing.Color;
        DarkSlateGray: System.Drawing.Color;
        DarkTurquoise: System.Drawing.Color;
        DarkViolet: System.Drawing.Color;
        DeepPink: System.Drawing.Color;
        DeepSkyBlue: System.Drawing.Color;
        DimGray: System.Drawing.Color;
        DodgerBlue: System.Drawing.Color;
        Firebrick: System.Drawing.Color;
        FloralWhite: System.Drawing.Color;
        ForestGreen: System.Drawing.Color;
        Fuchsia: System.Drawing.Color;
        Gainsboro: System.Drawing.Color;
        GhostWhite: System.Drawing.Color;
        Gold: System.Drawing.Color;
        Goldenrod: System.Drawing.Color;
        Gray: System.Drawing.Color;
        Green: System.Drawing.Color;
        GreenYellow: System.Drawing.Color;
        Honeydew: System.Drawing.Color;
        HotPink: System.Drawing.Color;
        IndianRed: System.Drawing.Color;
        Indigo: System.Drawing.Color;
        Ivory: System.Drawing.Color;
        Khaki: System.Drawing.Color;
        Lavender: System.Drawing.Color;
        LavenderBlush: System.Drawing.Color;
        LawnGreen: System.Drawing.Color;
        LemonChiffon: System.Drawing.Color;
        LightBlue: System.Drawing.Color;
        LightCoral: System.Drawing.Color;
        LightCyan: System.Drawing.Color;
        LightGoldenrodYellow: System.Drawing.Color;
        LightGreen: System.Drawing.Color;
        LightGray: System.Drawing.Color;
        LightPink: System.Drawing.Color;
        LightSalmon: System.Drawing.Color;
        LightSeaGreen: System.Drawing.Color;
        LightSkyBlue: System.Drawing.Color;
        LightSlateGray: System.Drawing.Color;
        LightSteelBlue: System.Drawing.Color;
        LightYellow: System.Drawing.Color;
        Lime: System.Drawing.Color;
        LimeGreen: System.Drawing.Color;
        Linen: System.Drawing.Color;
        Magenta: System.Drawing.Color;
        Maroon: System.Drawing.Color;
        MediumAquamarine: System.Drawing.Color;
        MediumBlue: System.Drawing.Color;
        MediumOrchid: System.Drawing.Color;
        MediumPurple: System.Drawing.Color;
        MediumSeaGreen: System.Drawing.Color;
        MediumSlateBlue: System.Drawing.Color;
        MediumSpringGreen: System.Drawing.Color;
        MediumTurquoise: System.Drawing.Color;
        MediumVioletRed: System.Drawing.Color;
        MidnightBlue: System.Drawing.Color;
        MintCream: System.Drawing.Color;
        MistyRose: System.Drawing.Color;
        Moccasin: System.Drawing.Color;
        NavajoWhite: System.Drawing.Color;
        Navy: System.Drawing.Color;
        OldLace: System.Drawing.Color;
        Olive: System.Drawing.Color;
        OliveDrab: System.Drawing.Color;
        Orange: System.Drawing.Color;
        OrangeRed: System.Drawing.Color;
        Orchid: System.Drawing.Color;
        PaleGoldenrod: System.Drawing.Color;
        PaleGreen: System.Drawing.Color;
        PaleTurquoise: System.Drawing.Color;
        PaleVioletRed: System.Drawing.Color;
        PapayaWhip: System.Drawing.Color;
        PeachPuff: System.Drawing.Color;
        Peru: System.Drawing.Color;
        Pink: System.Drawing.Color;
        Plum: System.Drawing.Color;
        PowderBlue: System.Drawing.Color;
        Purple: System.Drawing.Color;
        Red: System.Drawing.Color;
        RosyBrown: System.Drawing.Color;
        RoyalBlue: System.Drawing.Color;
        SaddleBrown: System.Drawing.Color;
        Salmon: System.Drawing.Color;
        SandyBrown: System.Drawing.Color;
        SeaGreen: System.Drawing.Color;
        SeaShell: System.Drawing.Color;
        Sienna: System.Drawing.Color;
        Silver: System.Drawing.Color;
        SkyBlue: System.Drawing.Color;
        SlateBlue: System.Drawing.Color;
        SlateGray: System.Drawing.Color;
        Snow: System.Drawing.Color;
        SpringGreen: System.Drawing.Color;
        SteelBlue: System.Drawing.Color;
        Tan: System.Drawing.Color;
        Teal: System.Drawing.Color;
        Thistle: System.Drawing.Color;
        Tomato: System.Drawing.Color;
        Turquoise: System.Drawing.Color;
        Violet: System.Drawing.Color;
        Wheat: System.Drawing.Color;
        White: System.Drawing.Color;
        WhiteSmoke: System.Drawing.Color;
        Yellow: System.Drawing.Color;
        YellowGreen: System.Drawing.Color;
        R: number;
        G: number;
        B: number;
        A: number;
        IsKnownColor: boolean;
        IsEmpty: boolean;
        IsNamedColor: boolean;
        IsSystemColor: boolean;
        NameAndARGBValue: string;
        Name: string;
        Value: number;
        static FromArgb(argb: number): System.Drawing.Color;
        static FromArgb(alpha: number, red: number, green: number, blue: number): System.Drawing.Color;
        static FromArgb(alpha: number, baseColor: System.Drawing.Color): System.Drawing.Color;
        static FromArgb(red: number, green: number, blue: number): System.Drawing.Color;
        static FromKnownColor(color: System.Drawing.KnownColor): System.Drawing.Color;
        static FromName(name: string): System.Drawing.Color;
        GetBrightness(): number;
        GetHue(): number;
        GetSaturation(): number;
        ToArgb(): number;
        ToKnownColor(): System.Drawing.KnownColor;
        ToString(): string;
        Equals(obj: any): boolean;
        GetHashCode(): number;
    }

    export class Rectangle {
        Empty: System.Drawing.Rectangle;
        Location: System.Drawing.Point;
        Size: System.Drawing.Size;
        X: number;
        Y: number;
        Width: number;
        Height: number;
        Left: number;
        Top: number;
        Right: number;
        Bottom: number;
        IsEmpty: boolean;
        constructor(x: number, y: number, width: number, height: number);
        constructor(location: System.Drawing.Point, size: System.Drawing.Size);
        static FromLTRB(left: number, top: number, right: number, bottom: number): System.Drawing.Rectangle;
        Equals(obj: any): boolean;
        static Ceiling(value: System.Drawing.RectangleF): System.Drawing.Rectangle;
        static Truncate(value: System.Drawing.RectangleF): System.Drawing.Rectangle;
        static Round(value: System.Drawing.RectangleF): System.Drawing.Rectangle;
        Contains(x: number, y: number): boolean;
        Contains(pt: System.Drawing.Point): boolean;
        Contains(rect: System.Drawing.Rectangle): boolean;
        GetHashCode(): number;
        Inflate(width: number, height: number): void;
        Inflate(size: System.Drawing.Size): void;
        static Inflate(rect: System.Drawing.Rectangle, x: number, y: number): System.Drawing.Rectangle;
        Intersect(rect: System.Drawing.Rectangle): void;
        static Intersect(a: System.Drawing.Rectangle, b: System.Drawing.Rectangle): System.Drawing.Rectangle;
        IntersectsWith(rect: System.Drawing.Rectangle): boolean;
        static Union(a: System.Drawing.Rectangle, b: System.Drawing.Rectangle): System.Drawing.Rectangle;
        Offset(pos: System.Drawing.Point): void;
        Offset(x: number, y: number): void;
        ToString(): string;
    }

    export class Graphics_EnumerateMetafileProc {
        constructor(object: any, method: number);
        Invoke(recordType: System.Drawing.Imaging.EmfPlusRecordType, flags: number, dataSize: number, data: number, callbackData: System.Drawing.Imaging.PlayRecordCallback): boolean;
        BeginInvoke(recordType: System.Drawing.Imaging.EmfPlusRecordType, flags: number, dataSize: number, data: number, callbackData: System.Drawing.Imaging.PlayRecordCallback, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): boolean;
    }

    export class RectangleF {
        Empty: System.Drawing.RectangleF;
        Location: System.Drawing.PointF;
        Size: System.Drawing.SizeF;
        X: number;
        Y: number;
        Width: number;
        Height: number;
        Left: number;
        Top: number;
        Right: number;
        Bottom: number;
        IsEmpty: boolean;
        constructor(x: number, y: number, width: number, height: number);
        constructor(location: System.Drawing.PointF, size: System.Drawing.SizeF);
        static FromLTRB(left: number, top: number, right: number, bottom: number): System.Drawing.RectangleF;
        Equals(obj: any): boolean;
        Contains(x: number, y: number): boolean;
        Contains(pt: System.Drawing.PointF): boolean;
        Contains(rect: System.Drawing.RectangleF): boolean;
        GetHashCode(): number;
        Inflate(x: number, y: number): void;
        Inflate(size: System.Drawing.SizeF): void;
        static Inflate(rect: System.Drawing.RectangleF, x: number, y: number): System.Drawing.RectangleF;
        Intersect(rect: System.Drawing.RectangleF): void;
        static Intersect(a: System.Drawing.RectangleF, b: System.Drawing.RectangleF): System.Drawing.RectangleF;
        IntersectsWith(rect: System.Drawing.RectangleF): boolean;
        static Union(a: System.Drawing.RectangleF, b: System.Drawing.RectangleF): System.Drawing.RectangleF;
        Offset(pos: System.Drawing.PointF): void;
        Offset(x: number, y: number): void;
        ToString(): string;
    }

    export interface IDeviceContext {
        GetHdc(): number;
        ReleaseHdc(): void;
    }

    enum FontStyle {
        Regular = 0,
        Bold = 1,
        Italic = 2,
        Underline = 4,
        Strikeout = 8
    }

    enum GraphicsUnit {
        World = 0,
        Display = 1,
        Pixel = 2,
        Point = 3,
        Inch = 4,
        Document = 5,
        Millimeter = 6
    }

    export class FontFamily {
        NativeFamily: number;
        CurrentLanguage: number;
        Name: string;
        Families: System.Drawing.FontFamily[];
        GenericSansSerif: System.Drawing.FontFamily;
        GenericSerif: System.Drawing.FontFamily;
        GenericMonospace: System.Drawing.FontFamily;
        constructor(name: string);
        constructor(name: string, fontCollection: System.Drawing.Text.FontCollection);
        constructor(genericFamily: System.Drawing.Text.GenericFontFamilies);
        Equals(obj: any): boolean;
        ToString(): string;
        GetHashCode(): number;
        Dispose(): void;
        GetName(language: number): string;
        static GetFamilies(graphics: System.Drawing.Graphics): System.Drawing.FontFamily[];
        IsStyleAvailable(style: System.Drawing.FontStyle): boolean;
        GetEmHeight(style: System.Drawing.FontStyle): number;
        GetCellAscent(style: System.Drawing.FontStyle): number;
        GetCellDescent(style: System.Drawing.FontStyle): number;
        GetLineSpacing(style: System.Drawing.FontStyle): number;
    }

    export class Region {
        constructor();
        constructor(rect: System.Drawing.RectangleF);
        constructor(rect: System.Drawing.Rectangle);
        constructor(path: System.Drawing.Drawing2D.GraphicsPath);
        constructor(rgnData: System.Drawing.Drawing2D.RegionData);
        static FromHrgn(hrgn: number): System.Drawing.Region;
        Clone(): System.Drawing.Region;
        Dispose(): void;
        MakeInfinite(): void;
        MakeEmpty(): void;
        Intersect(rect: System.Drawing.RectangleF): void;
        Intersect(rect: System.Drawing.Rectangle): void;
        Intersect(path: System.Drawing.Drawing2D.GraphicsPath): void;
        Intersect(region: System.Drawing.Region): void;
        ReleaseHrgn(regionHandle: number): void;
        Union(rect: System.Drawing.RectangleF): void;
        Union(rect: System.Drawing.Rectangle): void;
        Union(path: System.Drawing.Drawing2D.GraphicsPath): void;
        Union(region: System.Drawing.Region): void;
        Xor(rect: System.Drawing.RectangleF): void;
        Xor(rect: System.Drawing.Rectangle): void;
        Xor(path: System.Drawing.Drawing2D.GraphicsPath): void;
        Xor(region: System.Drawing.Region): void;
        Exclude(rect: System.Drawing.RectangleF): void;
        Exclude(rect: System.Drawing.Rectangle): void;
        Exclude(path: System.Drawing.Drawing2D.GraphicsPath): void;
        Exclude(region: System.Drawing.Region): void;
        Complement(rect: System.Drawing.RectangleF): void;
        Complement(rect: System.Drawing.Rectangle): void;
        Complement(path: System.Drawing.Drawing2D.GraphicsPath): void;
        Complement(region: System.Drawing.Region): void;
        Translate(dx: number, dy: number): void;
        Translate(dx: number, dy: number): void;
        Transform(matrix: System.Drawing.Drawing2D.Matrix): void;
        GetBounds(g: System.Drawing.Graphics): System.Drawing.RectangleF;
        GetHrgn(g: System.Drawing.Graphics): number;
        IsEmpty(g: System.Drawing.Graphics): boolean;
        IsInfinite(g: System.Drawing.Graphics): boolean;
        Equals(region: System.Drawing.Region, g: System.Drawing.Graphics): boolean;
        GetRegionData(): System.Drawing.Drawing2D.RegionData;
        IsVisible(x: number, y: number): boolean;
        IsVisible(point: System.Drawing.PointF): boolean;
        IsVisible(x: number, y: number, g: System.Drawing.Graphics): boolean;
        IsVisible(point: System.Drawing.PointF, g: System.Drawing.Graphics): boolean;
        IsVisible(x: number, y: number, width: number, height: number): boolean;
        IsVisible(rect: System.Drawing.RectangleF): boolean;
        IsVisible(x: number, y: number, width: number, height: number, g: System.Drawing.Graphics): boolean;
        IsVisible(rect: System.Drawing.RectangleF, g: System.Drawing.Graphics): boolean;
        IsVisible(x: number, y: number, g: System.Drawing.Graphics): boolean;
        IsVisible(point: System.Drawing.Point): boolean;
        IsVisible(point: System.Drawing.Point, g: System.Drawing.Graphics): boolean;
        IsVisible(x: number, y: number, width: number, height: number): boolean;
        IsVisible(rect: System.Drawing.Rectangle): boolean;
        IsVisible(x: number, y: number, width: number, height: number, g: System.Drawing.Graphics): boolean;
        IsVisible(rect: System.Drawing.Rectangle, g: System.Drawing.Graphics): boolean;
        GetRegionScans(matrix: System.Drawing.Drawing2D.Matrix): System.Drawing.RectangleF[];
    }

    export class Image_GetThumbnailImageAbort {
        constructor(object: any, method: number);
        Invoke(): boolean;
        BeginInvoke(callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): boolean;
    }

    enum RotateFlipType {
        RotateNoneFlipNone = 0,
        Rotate180FlipXY = 0,
        Rotate90FlipNone = 1,
        Rotate270FlipXY = 1,
        Rotate180FlipNone = 2,
        RotateNoneFlipXY = 2,
        Rotate270FlipNone = 3,
        Rotate90FlipXY = 3,
        RotateNoneFlipX = 4,
        Rotate180FlipY = 4,
        Rotate90FlipX = 5,
        Rotate270FlipY = 5,
        Rotate180FlipX = 6,
        RotateNoneFlipY = 6,
        Rotate270FlipX = 7,
        Rotate90FlipY = 7
    }

    export class Image {
        Tag: any;
        PhysicalDimension: System.Drawing.SizeF;
        Size: System.Drawing.Size;
        Width: number;
        Height: number;
        HorizontalResolution: number;
        VerticalResolution: number;
        Flags: number;
        RawFormat: System.Drawing.Imaging.ImageFormat;
        PixelFormat: System.Drawing.Imaging.PixelFormat;
        Palette: System.Drawing.Imaging.ColorPalette;
        FrameDimensionsList: string[];
        PropertyIdList: number[];
        PropertyItems: System.Drawing.Imaging.PropertyItem[];
        static FromFile(filename: string): System.Drawing.Image;
        static FromFile(filename: string, useEmbeddedColorManagement: boolean): System.Drawing.Image;
        //static FromStream(stream: System.IO.Stream): System.Drawing.Image;
        static FromStream(stream: any): System.Drawing.Image;
        //static FromStream(stream: System.IO.Stream, useEmbeddedColorManagement: boolean): System.Drawing.Image;
        static FromStream(stream: any, useEmbeddedColorManagement: boolean): System.Drawing.Image;
        //static FromStream(stream: System.IO.Stream, useEmbeddedColorManagement: boolean, validateImageData: boolean): System.Drawing.Image;
        static FromStream(stream: any, useEmbeddedColorManagement: boolean, validateImageData: boolean): System.Drawing.Image;
        Clone(): any;
        Dispose(): void;
        GetEncoderParameterList(encoder: string): System.Drawing.Imaging.EncoderParameters;
        Save(filename: string): void;
        Save(filename: string, format: System.Drawing.Imaging.ImageFormat): void;
        Save(filename: string, encoder: System.Drawing.Imaging.ImageCodecInfo, encoderParams: System.Drawing.Imaging.EncoderParameters): void;
        //Save(stream: System.IO.Stream, format: System.Drawing.Imaging.ImageFormat): void;
        Save(stream: any, format: System.Drawing.Imaging.ImageFormat): void;
        //Save(stream: System.IO.Stream, encoder: System.Drawing.Imaging.ImageCodecInfo, encoderParams: System.Drawing.Imaging.EncoderParameters): void;
        Save(stream: any, encoder: System.Drawing.Imaging.ImageCodecInfo, encoderParams: System.Drawing.Imaging.EncoderParameters): void;
        SaveAdd(encoderParams: System.Drawing.Imaging.EncoderParameters): void;
        SaveAdd(image: System.Drawing.Image, encoderParams: System.Drawing.Imaging.EncoderParameters): void;
        //GetBounds(pageUnit: System.Drawing.GraphicsUnit &): System.Drawing.RectangleF;
        GetBounds(pageUnit: System.Drawing.GraphicsUnit): System.Drawing.RectangleF;
        GetThumbnailImage(thumbWidth: number, thumbHeight: number, callback: System.Drawing.Image_GetThumbnailImageAbort, callbackData: number): System.Drawing.Image;
        GetFrameCount(dimension: System.Drawing.Imaging.FrameDimension): number;
        SelectActiveFrame(dimension: System.Drawing.Imaging.FrameDimension, frameIndex: number): number;
        RotateFlip(rotateFlipType: System.Drawing.RotateFlipType): void;
        GetPropertyItem(propid: number): System.Drawing.Imaging.PropertyItem;
        RemovePropertyItem(propid: number): void;
        SetPropertyItem(propitem: System.Drawing.Imaging.PropertyItem): void;
        static FromHbitmap(hbitmap: number): System.Drawing.Bitmap;
        static FromHbitmap(hbitmap: number, hpalette: number): System.Drawing.Bitmap;
        static GetPixelFormatSize(pixfmt: System.Drawing.Imaging.PixelFormat): number;
        static IsAlphaPixelFormat(pixfmt: System.Drawing.Imaging.PixelFormat): boolean;
        static IsExtendedPixelFormat(pixfmt: System.Drawing.Imaging.PixelFormat): boolean;
        static IsCanonicalPixelFormat(pixfmt: System.Drawing.Imaging.PixelFormat): boolean;
    }

    enum CopyPixelOperation {
        NoMirrorBitmap = -2147483648,
        Blackness = 66,
        NotSourceErase = 1114278,
        NotSourceCopy = 3342344,
        SourceErase = 4457256,
        DestinationInvert = 5570569,
        PatInvert = 5898313,
        SourceInvert = 6684742,
        SourceAnd = 8913094,
        MergePaint = 12255782,
        MergeCopy = 12583114,
        SourceCopy = 13369376,
        SourcePaint = 15597702,
        PatCopy = 15728673,
        PatPaint = 16452105,
        Whiteness = 16711778,
        CaptureBlt = 1073741824
    }

    export class Font {
        NativeFont: number;
        FontFamily: System.Drawing.FontFamily;
        Bold: boolean;
        GdiCharSet: number;
        GdiVerticalFont: boolean;
        Italic: boolean;
        Name: string;
        OriginalFontName: string;
        Strikeout: boolean;
        Underline: boolean;
        Style: System.Drawing.FontStyle;
        Size: number;
        SizeInPoints: number;
        Unit: System.Drawing.GraphicsUnit;
        Height: number;
        IsSystemFont: boolean;
        SystemFontName: string;
        constructor(prototype: System.Drawing.Font, newStyle: System.Drawing.FontStyle);
        constructor(family: System.Drawing.FontFamily, emSize: number, style: System.Drawing.FontStyle, unit: System.Drawing.GraphicsUnit);
        constructor(family: System.Drawing.FontFamily, emSize: number, style: System.Drawing.FontStyle, unit: System.Drawing.GraphicsUnit, gdiCharSet: number);
        constructor(family: System.Drawing.FontFamily, emSize: number, style: System.Drawing.FontStyle, unit: System.Drawing.GraphicsUnit, gdiCharSet: number, gdiVerticalFont: boolean);
        constructor(familyName: string, emSize: number, style: System.Drawing.FontStyle, unit: System.Drawing.GraphicsUnit, gdiCharSet: number);
        constructor(familyName: string, emSize: number, style: System.Drawing.FontStyle, unit: System.Drawing.GraphicsUnit, gdiCharSet: number, gdiVerticalFont: boolean);
        constructor(family: System.Drawing.FontFamily, emSize: number, style: System.Drawing.FontStyle);
        constructor(family: System.Drawing.FontFamily, emSize: number, unit: System.Drawing.GraphicsUnit);
        constructor(family: System.Drawing.FontFamily, emSize: number);
        constructor(familyName: string, emSize: number, style: System.Drawing.FontStyle, unit: System.Drawing.GraphicsUnit);
        constructor(familyName: string, emSize: number, style: System.Drawing.FontStyle);
        constructor(familyName: string, emSize: number, unit: System.Drawing.GraphicsUnit);
        constructor(familyName: string, emSize: number);
        static FromHfont(hfont: number): System.Drawing.Font;
        static FromLogFont(lf: any): System.Drawing.Font;
        static FromLogFont(lf: any, hdc: number): System.Drawing.Font;
        static FromHdc(hdc: number): System.Drawing.Font;
        Clone(): any;
        Dispose(): void;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToLogFont(logFont: any): void;
        ToLogFont(logFont: any, graphics: System.Drawing.Graphics): void;
        ToHfont(): number;
        GetHeight(graphics: System.Drawing.Graphics): number;
        GetHeight(): number;
        GetHeight(dpi: number): number;
    }

    enum StringFormatFlags {
        DirectionRightToLeft = 1,
        DirectionVertical = 2,
        FitBlackBox = 4,
        DisplayFormatControl = 32,
        NoFontFallback = 1024,
        MeasureTrailingSpaces = 2048,
        NoWrap = 4096,
        LineLimit = 8192,
        NoClip = 16384
    }

    enum StringTrimming {
        None = 0,
        Character = 1,
        Word = 2,
        EllipsisCharacter = 3,
        EllipsisWord = 4,
        EllipsisPath = 5
    }

    enum StringAlignment {
        Near = 0,
        Center = 1,
        Far = 2
    }

    enum StringDigitSubstitute {
        User = 0,
        None = 1,
        National = 2,
        Traditional = 3
    }

    export class CharacterRange {
        First: number;
        Length: number;
        constructor(First: number, Length: number);
        Equals(obj: any): boolean;
        GetHashCode(): number;
    }

    export class StringFormat {
        FormatFlags: System.Drawing.StringFormatFlags;
        Alignment: System.Drawing.StringAlignment;
        LineAlignment: System.Drawing.StringAlignment;
        HotkeyPrefix: System.Drawing.Text.HotkeyPrefix;
        Trimming: System.Drawing.StringTrimming;
        GenericDefault: System.Drawing.StringFormat;
        GenericTypographic: System.Drawing.StringFormat;
        DigitSubstitutionMethod: System.Drawing.StringDigitSubstitute;
        DigitSubstitutionLanguage: number;
        constructor();
        constructor(options: System.Drawing.StringFormatFlags);
        constructor(options: System.Drawing.StringFormatFlags, language: number);
        constructor(format: System.Drawing.StringFormat);
        Dispose(): void;
        Clone(): any;
        SetMeasurableCharacterRanges(ranges: System.Drawing.CharacterRange[]): void;
        SetTabStops(firstTabOffset: number, tabStops: number[]): void;
        //GetTabStops(firstTabOffset: number &): number[];
        GetTabStops(firstTabOffset: number): number[];
        SetDigitSubstitution(language: number, substitute: System.Drawing.StringDigitSubstitute): void;
        ToString(): string;
    }

    export class Icon {
        Handle: number;
        Height: number;
        Size: System.Drawing.Size;
        Width: number;
        constructor(fileName: string);
        constructor(fileName: string, size: System.Drawing.Size);
        constructor(fileName: string, width: number, height: number);
        constructor(original: System.Drawing.Icon, size: System.Drawing.Size);
        constructor(original: System.Drawing.Icon, width: number, height: number);
        //constructor(type: System.Type, resource: string);
        constructor(type: any, resource: string);
        //constructor(stream: System.IO.Stream);
        constructor(stream: any);
        //constructor(stream: System.IO.Stream, size: System.Drawing.Size);
        constructor(stream: any, size: System.Drawing.Size);
        //constructor(stream: System.IO.Stream, width: number, height: number);
        constructor(stream: any, width: number, height: number);
        static ExtractAssociatedIcon(filePath: string): System.Drawing.Icon;
        Clone(): any;
        Dispose(): void;
        static FromHandle(handle: number): System.Drawing.Icon;
        //Save(outputStream: System.IO.Stream): void;
        Save(outputStream: any): void;
        ToBitmap(): System.Drawing.Bitmap;
        ToString(): string;
    }

    export class ImageAttributes {
        constructor();
        Dispose(): void;
        Clone(): any;
        SetColorMatrix(newColorMatrix: System.Drawing.Imaging.ColorMatrix): void;
        SetColorMatrix(newColorMatrix: System.Drawing.Imaging.ColorMatrix, flags: System.Drawing.Imaging.ColorMatrixFlag): void;
        SetColorMatrix(newColorMatrix: System.Drawing.Imaging.ColorMatrix, mode: System.Drawing.Imaging.ColorMatrixFlag, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearColorMatrix(): void;
        ClearColorMatrix(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetColorMatrices(newColorMatrix: System.Drawing.Imaging.ColorMatrix, grayMatrix: System.Drawing.Imaging.ColorMatrix): void;
        SetColorMatrices(newColorMatrix: System.Drawing.Imaging.ColorMatrix, grayMatrix: System.Drawing.Imaging.ColorMatrix, flags: System.Drawing.Imaging.ColorMatrixFlag): void;
        SetColorMatrices(newColorMatrix: System.Drawing.Imaging.ColorMatrix, grayMatrix: System.Drawing.Imaging.ColorMatrix, mode: System.Drawing.Imaging.ColorMatrixFlag, type: System.Drawing.Imaging.ColorAdjustType): void;
        SetThreshold(threshold: number): void;
        SetThreshold(threshold: number, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearThreshold(): void;
        ClearThreshold(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetGamma(gamma: number): void;
        SetGamma(gamma: number, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearGamma(): void;
        ClearGamma(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetNoOp(): void;
        SetNoOp(type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearNoOp(): void;
        ClearNoOp(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetColorKey(colorLow: System.Drawing.Color, colorHigh: System.Drawing.Color): void;
        SetColorKey(colorLow: System.Drawing.Color, colorHigh: System.Drawing.Color, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearColorKey(): void;
        ClearColorKey(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetOutputChannel(flags: System.Drawing.Imaging.ColorChannelFlag): void;
        SetOutputChannel(flags: System.Drawing.Imaging.ColorChannelFlag, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearOutputChannel(): void;
        ClearOutputChannel(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetOutputChannelColorProfile(colorProfileFilename: string): void;
        SetOutputChannelColorProfile(colorProfileFilename: string, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearOutputChannelColorProfile(): void;
        ClearOutputChannelColorProfile(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetRemapTable(map: System.Drawing.Imaging.ColorMap[]): void;
        SetRemapTable(map: System.Drawing.Imaging.ColorMap[], type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearRemapTable(): void;
        ClearRemapTable(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetBrushRemapTable(map: System.Drawing.Imaging.ColorMap[]): void;
        ClearBrushRemapTable(): void;
        SetWrapMode(mode: System.Drawing.Drawing2D.WrapMode): void;
        SetWrapMode(mode: System.Drawing.Drawing2D.WrapMode, color: System.Drawing.Color): void;
        SetWrapMode(mode: System.Drawing.Drawing2D.WrapMode, color: System.Drawing.Color, clamp: boolean): void;
        GetAdjustedPalette(palette: System.Drawing.Imaging.ColorPalette, type: System.Drawing.Imaging.ColorAdjustType): void;
    }

    export class Graphics implements System.Drawing.IDeviceContext {
        NativeGraphics: number;
        CompositingMode: System.Drawing.Drawing2D.CompositingMode;
        RenderingOrigin: System.Drawing.Point;
        CompositingQuality: System.Drawing.Drawing2D.CompositingQuality;
        TextRenderingHint: System.Drawing.Text.TextRenderingHint;
        TextContrast: number;
        SmoothingMode: System.Drawing.Drawing2D.SmoothingMode;
        PixelOffsetMode: System.Drawing.Drawing2D.PixelOffsetMode;
        PrintingHelper: any;
        InterpolationMode: System.Drawing.Drawing2D.InterpolationMode;
        Transform: System.Drawing.Drawing2D.Matrix;
        PageUnit: System.Drawing.GraphicsUnit;
        PageScale: number;
        DpiX: number;
        DpiY: number;
        Clip: System.Drawing.Region;
        ClipBounds: System.Drawing.RectangleF;
        IsClipEmpty: boolean;
        VisibleClipBounds: System.Drawing.RectangleF;
        IsVisibleClipEmpty: boolean;
        static FromHdc(hdc: number): System.Drawing.Graphics;
        static FromHdcInternal(hdc: number): System.Drawing.Graphics;
        static FromHdc(hdc: number, hdevice: number): System.Drawing.Graphics;
        static FromHwnd(hwnd: number): System.Drawing.Graphics;
        static FromHwndInternal(hwnd: number): System.Drawing.Graphics;
        static FromImage(image: System.Drawing.Image): System.Drawing.Graphics;
        GetHdc(): number;
        ReleaseHdc(hdc: number): void;
        ReleaseHdc(): void;
        ReleaseHdcInternal(hdc: number): void;
        Dispose(): void;
        Flush(): void;
        Flush(intention: System.Drawing.Drawing2D.FlushIntention): void;
        CopyFromScreen(upperLeftSource: System.Drawing.Point, upperLeftDestination: System.Drawing.Point, blockRegionSize: System.Drawing.Size): void;
        CopyFromScreen(sourceX: number, sourceY: number, destinationX: number, destinationY: number, blockRegionSize: System.Drawing.Size): void;
        CopyFromScreen(upperLeftSource: System.Drawing.Point, upperLeftDestination: System.Drawing.Point, blockRegionSize: System.Drawing.Size, copyPixelOperation: System.Drawing.CopyPixelOperation): void;
        CopyFromScreen(sourceX: number, sourceY: number, destinationX: number, destinationY: number, blockRegionSize: System.Drawing.Size, copyPixelOperation: System.Drawing.CopyPixelOperation): void;
        ResetTransform(): void;
        MultiplyTransform(matrix: System.Drawing.Drawing2D.Matrix): void;
        MultiplyTransform(matrix: System.Drawing.Drawing2D.Matrix, order: System.Drawing.Drawing2D.MatrixOrder): void;
        TranslateTransform(dx: number, dy: number): void;
        TranslateTransform(dx: number, dy: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        ScaleTransform(sx: number, sy: number): void;
        ScaleTransform(sx: number, sy: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        RotateTransform(angle: number): void;
        RotateTransform(angle: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        TransformPoints(destSpace: System.Drawing.Drawing2D.CoordinateSpace, srcSpace: System.Drawing.Drawing2D.CoordinateSpace, pts: System.Drawing.PointF[]): void;
        TransformPoints(destSpace: System.Drawing.Drawing2D.CoordinateSpace, srcSpace: System.Drawing.Drawing2D.CoordinateSpace, pts: System.Drawing.Point[]): void;
        GetNearestColor(color: System.Drawing.Color): System.Drawing.Color;
        DrawLine(pen: System.Drawing.Pen, x1: number, y1: number, x2: number, y2: number): void;
        DrawLine(pen: System.Drawing.Pen, pt1: System.Drawing.PointF, pt2: System.Drawing.PointF): void;
        DrawLines(pen: System.Drawing.Pen, points: System.Drawing.PointF[]): void;
        DrawLine(pen: System.Drawing.Pen, x1: number, y1: number, x2: number, y2: number): void;
        DrawLine(pen: System.Drawing.Pen, pt1: System.Drawing.Point, pt2: System.Drawing.Point): void;
        DrawLines(pen: System.Drawing.Pen, points: System.Drawing.Point[]): void;
        DrawArc(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        DrawArc(pen: System.Drawing.Pen, rect: System.Drawing.RectangleF, startAngle: number, sweepAngle: number): void;
        DrawArc(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        DrawArc(pen: System.Drawing.Pen, rect: System.Drawing.Rectangle, startAngle: number, sweepAngle: number): void;
        DrawBezier(pen: System.Drawing.Pen, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
        DrawBezier(pen: System.Drawing.Pen, pt1: System.Drawing.PointF, pt2: System.Drawing.PointF, pt3: System.Drawing.PointF, pt4: System.Drawing.PointF): void;
        DrawBeziers(pen: System.Drawing.Pen, points: System.Drawing.PointF[]): void;
        DrawBezier(pen: System.Drawing.Pen, pt1: System.Drawing.Point, pt2: System.Drawing.Point, pt3: System.Drawing.Point, pt4: System.Drawing.Point): void;
        DrawBeziers(pen: System.Drawing.Pen, points: System.Drawing.Point[]): void;
        DrawRectangle(pen: System.Drawing.Pen, rect: System.Drawing.Rectangle): void;
        DrawRectangle(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number): void;
        DrawRectangle(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number): void;
        DrawRectangles(pen: System.Drawing.Pen, rects: System.Drawing.RectangleF[]): void;
        DrawRectangles(pen: System.Drawing.Pen, rects: System.Drawing.Rectangle[]): void;
        DrawEllipse(pen: System.Drawing.Pen, rect: System.Drawing.RectangleF): void;
        DrawEllipse(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number): void;
        DrawEllipse(pen: System.Drawing.Pen, rect: System.Drawing.Rectangle): void;
        DrawEllipse(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number): void;
        DrawPie(pen: System.Drawing.Pen, rect: System.Drawing.RectangleF, startAngle: number, sweepAngle: number): void;
        DrawPie(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        DrawPie(pen: System.Drawing.Pen, rect: System.Drawing.Rectangle, startAngle: number, sweepAngle: number): void;
        DrawPie(pen: System.Drawing.Pen, x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        DrawPolygon(pen: System.Drawing.Pen, points: System.Drawing.PointF[]): void;
        DrawPolygon(pen: System.Drawing.Pen, points: System.Drawing.Point[]): void;
        DrawPath(pen: System.Drawing.Pen, path: System.Drawing.Drawing2D.GraphicsPath): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.PointF[]): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.PointF[], tension: number): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.PointF[], offset: number, numberOfSegments: number): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.PointF[], offset: number, numberOfSegments: number, tension: number): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.Point[]): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.Point[], tension: number): void;
        DrawCurve(pen: System.Drawing.Pen, points: System.Drawing.Point[], offset: number, numberOfSegments: number, tension: number): void;
        DrawClosedCurve(pen: System.Drawing.Pen, points: System.Drawing.PointF[]): void;
        DrawClosedCurve(pen: System.Drawing.Pen, points: System.Drawing.PointF[], tension: number, fillmode: System.Drawing.Drawing2D.FillMode): void;
        DrawClosedCurve(pen: System.Drawing.Pen, points: System.Drawing.Point[]): void;
        DrawClosedCurve(pen: System.Drawing.Pen, points: System.Drawing.Point[], tension: number, fillmode: System.Drawing.Drawing2D.FillMode): void;
        Clear(color: System.Drawing.Color): void;
        FillRectangle(brush: System.Drawing.Brush, rect: System.Drawing.RectangleF): void;
        FillRectangle(brush: System.Drawing.Brush, x: number, y: number, width: number, height: number): void;
        FillRectangle(brush: System.Drawing.Brush, rect: System.Drawing.Rectangle): void;
        FillRectangle(brush: System.Drawing.Brush, x: number, y: number, width: number, height: number): void;
        FillRectangles(brush: System.Drawing.Brush, rects: System.Drawing.RectangleF[]): void;
        FillRectangles(brush: System.Drawing.Brush, rects: System.Drawing.Rectangle[]): void;
        FillPolygon(brush: System.Drawing.Brush, points: System.Drawing.PointF[]): void;
        FillPolygon(brush: System.Drawing.Brush, points: System.Drawing.PointF[], fillMode: System.Drawing.Drawing2D.FillMode): void;
        FillPolygon(brush: System.Drawing.Brush, points: System.Drawing.Point[]): void;
        FillPolygon(brush: System.Drawing.Brush, points: System.Drawing.Point[], fillMode: System.Drawing.Drawing2D.FillMode): void;
        FillEllipse(brush: System.Drawing.Brush, rect: System.Drawing.RectangleF): void;
        FillEllipse(brush: System.Drawing.Brush, x: number, y: number, width: number, height: number): void;
        FillEllipse(brush: System.Drawing.Brush, rect: System.Drawing.Rectangle): void;
        FillEllipse(brush: System.Drawing.Brush, x: number, y: number, width: number, height: number): void;
        FillPie(brush: System.Drawing.Brush, rect: System.Drawing.Rectangle, startAngle: number, sweepAngle: number): void;
        FillPie(brush: System.Drawing.Brush, x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        FillPie(brush: System.Drawing.Brush, x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        FillPath(brush: System.Drawing.Brush, path: System.Drawing.Drawing2D.GraphicsPath): void;
        FillClosedCurve(brush: System.Drawing.Brush, points: System.Drawing.PointF[]): void;
        FillClosedCurve(brush: System.Drawing.Brush, points: System.Drawing.PointF[], fillmode: System.Drawing.Drawing2D.FillMode): void;
        FillClosedCurve(brush: System.Drawing.Brush, points: System.Drawing.PointF[], fillmode: System.Drawing.Drawing2D.FillMode, tension: number): void;
        FillClosedCurve(brush: System.Drawing.Brush, points: System.Drawing.Point[]): void;
        FillClosedCurve(brush: System.Drawing.Brush, points: System.Drawing.Point[], fillmode: System.Drawing.Drawing2D.FillMode): void;
        FillClosedCurve(brush: System.Drawing.Brush, points: System.Drawing.Point[], fillmode: System.Drawing.Drawing2D.FillMode, tension: number): void;
        FillRegion(brush: System.Drawing.Brush, region: System.Drawing.Region): void;
        DrawString(s: string, font: System.Drawing.Font, brush: System.Drawing.Brush, x: number, y: number): void;
        DrawString(s: string, font: System.Drawing.Font, brush: System.Drawing.Brush, point: System.Drawing.PointF): void;
        DrawString(s: string, font: System.Drawing.Font, brush: System.Drawing.Brush, x: number, y: number, format: System.Drawing.StringFormat): void;
        DrawString(s: string, font: System.Drawing.Font, brush: System.Drawing.Brush, point: System.Drawing.PointF, format: System.Drawing.StringFormat): void;
        DrawString(s: string, font: System.Drawing.Font, brush: System.Drawing.Brush, layoutRectangle: System.Drawing.RectangleF): void;
        DrawString(s: string, font: System.Drawing.Font, brush: System.Drawing.Brush, layoutRectangle: System.Drawing.RectangleF, format: System.Drawing.StringFormat): void;
        //MeasureString(text: string, font: System.Drawing.Font, layoutArea: System.Drawing.SizeF, stringFormat: System.Drawing.StringFormat, charactersFitted: number &, linesFilled: number &): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font, layoutArea: System.Drawing.SizeF, stringFormat: System.Drawing.StringFormat, charactersFitted: number, linesFilled: number): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font, origin: System.Drawing.PointF, stringFormat: System.Drawing.StringFormat): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font, layoutArea: System.Drawing.SizeF): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font, layoutArea: System.Drawing.SizeF, stringFormat: System.Drawing.StringFormat): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font, width: number): System.Drawing.SizeF;
        MeasureString(text: string, font: System.Drawing.Font, width: number, format: System.Drawing.StringFormat): System.Drawing.SizeF;
        MeasureCharacterRanges(text: string, font: System.Drawing.Font, layoutRect: System.Drawing.RectangleF, stringFormat: System.Drawing.StringFormat): System.Drawing.Region[];
        DrawIcon(icon: System.Drawing.Icon, x: number, y: number): void;
        DrawIcon(icon: System.Drawing.Icon, targetRect: System.Drawing.Rectangle): void;
        DrawIconUnstretched(icon: System.Drawing.Icon, targetRect: System.Drawing.Rectangle): void;
        DrawImage(image: System.Drawing.Image, point: System.Drawing.PointF): void;
        DrawImage(image: System.Drawing.Image, x: number, y: number): void;
        DrawImage(image: System.Drawing.Image, rect: System.Drawing.RectangleF): void;
        DrawImage(image: System.Drawing.Image, x: number, y: number, width: number, height: number): void;
        DrawImage(image: System.Drawing.Image, point: System.Drawing.Point): void;
        DrawImage(image: System.Drawing.Image, x: number, y: number): void;
        DrawImage(image: System.Drawing.Image, rect: System.Drawing.Rectangle): void;
        DrawImage(image: System.Drawing.Image, x: number, y: number, width: number, height: number): void;
        DrawImageUnscaled(image: System.Drawing.Image, point: System.Drawing.Point): void;
        DrawImageUnscaled(image: System.Drawing.Image, x: number, y: number): void;
        DrawImageUnscaled(image: System.Drawing.Image, rect: System.Drawing.Rectangle): void;
        DrawImageUnscaled(image: System.Drawing.Image, x: number, y: number, width: number, height: number): void;
        DrawImageUnscaledAndClipped(image: System.Drawing.Image, rect: System.Drawing.Rectangle): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.PointF[]): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.Point[]): void;
        DrawImage(image: System.Drawing.Image, x: number, y: number, srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, x: number, y: number, srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.RectangleF, srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort, callbackData: number): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort): void;
        DrawImage(image: System.Drawing.Image, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort, callbackData: number): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit, imageAttrs: System.Drawing.Imaging.ImageAttributes): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit, imageAttrs: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit, imageAttrs: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort, callbackData: number): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit, imageAttr: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort): void;
        DrawImage(image: System.Drawing.Image, destRect: System.Drawing.Rectangle, srcX: number, srcY: number, srcWidth: number, srcHeight: number, srcUnit: System.Drawing.GraphicsUnit, imageAttrs: System.Drawing.Imaging.ImageAttributes, callback: System.Drawing.Graphics_DrawImageAbort, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.PointF, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.PointF, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.PointF, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.Point, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.Point, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.Point, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.RectangleF, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.RectangleF, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.RectangleF, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.Rectangle, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.Rectangle, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.Rectangle, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.PointF[], callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.PointF[], callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.PointF[], callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.Point[], callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.Point[], callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.Point[], callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.PointF, srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.PointF, srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.PointF, srcRect: System.Drawing.RectangleF, unit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.Point, srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.Point, srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoint: System.Drawing.Point, srcRect: System.Drawing.Rectangle, unit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.RectangleF, srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.RectangleF, srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.RectangleF, srcRect: System.Drawing.RectangleF, unit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.Rectangle, srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.Rectangle, srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destRect: System.Drawing.Rectangle, srcRect: System.Drawing.Rectangle, unit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, unit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, srcUnit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number): void;
        EnumerateMetafile(metafile: System.Drawing.Imaging.Metafile, destPoints: System.Drawing.Point[], srcRect: System.Drawing.Rectangle, unit: System.Drawing.GraphicsUnit, callback: System.Drawing.Graphics_EnumerateMetafileProc, callbackData: number, imageAttr: System.Drawing.Imaging.ImageAttributes): void;
        SetClip(g: System.Drawing.Graphics): void;
        SetClip(g: System.Drawing.Graphics, combineMode: System.Drawing.Drawing2D.CombineMode): void;
        SetClip(rect: System.Drawing.Rectangle): void;
        SetClip(rect: System.Drawing.Rectangle, combineMode: System.Drawing.Drawing2D.CombineMode): void;
        SetClip(rect: System.Drawing.RectangleF): void;
        SetClip(rect: System.Drawing.RectangleF, combineMode: System.Drawing.Drawing2D.CombineMode): void;
        SetClip(path: System.Drawing.Drawing2D.GraphicsPath): void;
        SetClip(path: System.Drawing.Drawing2D.GraphicsPath, combineMode: System.Drawing.Drawing2D.CombineMode): void;
        SetClip(region: System.Drawing.Region, combineMode: System.Drawing.Drawing2D.CombineMode): void;
        IntersectClip(rect: System.Drawing.Rectangle): void;
        IntersectClip(rect: System.Drawing.RectangleF): void;
        IntersectClip(region: System.Drawing.Region): void;
        ExcludeClip(rect: System.Drawing.Rectangle): void;
        ExcludeClip(region: System.Drawing.Region): void;
        ResetClip(): void;
        TranslateClip(dx: number, dy: number): void;
        TranslateClip(dx: number, dy: number): void;
        GetContextInfo(): any;
        IsVisible(x: number, y: number): boolean;
        IsVisible(point: System.Drawing.Point): boolean;
        IsVisible(x: number, y: number): boolean;
        IsVisible(point: System.Drawing.PointF): boolean;
        IsVisible(x: number, y: number, width: number, height: number): boolean;
        IsVisible(rect: System.Drawing.Rectangle): boolean;
        IsVisible(x: number, y: number, width: number, height: number): boolean;
        IsVisible(rect: System.Drawing.RectangleF): boolean;
        Save(): System.Drawing.Drawing2D.GraphicsState;
        Restore(gstate: System.Drawing.Drawing2D.GraphicsState): void;
        BeginContainer(dstrect: System.Drawing.RectangleF, srcrect: System.Drawing.RectangleF, unit: System.Drawing.GraphicsUnit): System.Drawing.Drawing2D.GraphicsContainer;
        BeginContainer(): System.Drawing.Drawing2D.GraphicsContainer;
        EndContainer(container: System.Drawing.Drawing2D.GraphicsContainer): void;
        BeginContainer(dstrect: System.Drawing.Rectangle, srcrect: System.Drawing.Rectangle, unit: System.Drawing.GraphicsUnit): System.Drawing.Drawing2D.GraphicsContainer;
        AddMetafileComment(data: any): void;
        static GetHalftonePalette(): number;
    }

    export class Bitmap {
        constructor(filename: string);
        constructor(filename: string, useIcm: boolean);
        //constructor(type: System.Type, resource: string);
        constructor(type: any, resource: string);
        //constructor(stream: System.IO.Stream);
        constructor(stream: any);
        //constructor(stream: System.IO.Stream, useIcm: boolean);
        constructor(stream: any, useIcm: boolean);
        constructor(width: number, height: number, stride: number, format: System.Drawing.Imaging.PixelFormat, scan0: number);
        constructor(width: number, height: number, format: System.Drawing.Imaging.PixelFormat);
        constructor(width: number, height: number);
        constructor(width: number, height: number, g: System.Drawing.Graphics);
        constructor(original: System.Drawing.Image);
        constructor(original: System.Drawing.Image, width: number, height: number);
        constructor(original: System.Drawing.Image, newSize: System.Drawing.Size);
        static FromHicon(hicon: number): System.Drawing.Bitmap;
        static FromResource(hinstance: number, bitmapName: string): System.Drawing.Bitmap;
        GetHbitmap(): number;
        GetHbitmap(background: System.Drawing.Color): number;
        GetHicon(): number;
        Clone(rect: System.Drawing.Rectangle, format: System.Drawing.Imaging.PixelFormat): System.Drawing.Bitmap;
        Clone(rect: System.Drawing.RectangleF, format: System.Drawing.Imaging.PixelFormat): System.Drawing.Bitmap;
        MakeTransparent(): void;
        MakeTransparent(transparentColor: System.Drawing.Color): void;
        LockBits(rect: System.Drawing.Rectangle, flags: System.Drawing.Imaging.ImageLockMode, format: System.Drawing.Imaging.PixelFormat): System.Drawing.Imaging.BitmapData;
        LockBits(rect: System.Drawing.Rectangle, flags: System.Drawing.Imaging.ImageLockMode, format: System.Drawing.Imaging.PixelFormat, bitmapData: System.Drawing.Imaging.BitmapData): System.Drawing.Imaging.BitmapData;
        UnlockBits(bitmapdata: System.Drawing.Imaging.BitmapData): void;
        GetPixel(x: number, y: number): System.Drawing.Color;
        SetPixel(x: number, y: number, color: System.Drawing.Color): void;
        SetResolution(xDpi: number, yDpi: number): void;
    }
}

declare module System.Drawing.Drawing2D {
    enum CombineMode {
        Replace = 0,
        Intersect = 1,
        Union = 2,
        Xor = 3,
        Exclude = 4,
        Complement = 5
    }

    enum WarpMode {
        Perspective = 0,
        Bilinear = 1
    }

    enum WrapMode {
        Tile = 0,
        TileFlipX = 1,
        TileFlipY = 2,
        TileFlipXY = 3,
        Clamp = 4
    }

    enum CompositingMode {
        SourceOver = 0,
        SourceCopy = 1
    }

    enum DashCap {
        Flat = 0,
        Round = 2,
        Triangle = 3
    }

    enum LineJoin {
        Miter = 0,
        Bevel = 1,
        Round = 2,
        MiterClipped = 3
    }

    enum DashStyle {
        Solid = 0,
        Dash = 1,
        Dot = 2,
        DashDot = 3,
        DashDotDot = 4,
        Custom = 5
    }

    enum LineCap {
        Flat = 0,
        Square = 1,
        Round = 2,
        Triangle = 3,
        NoAnchor = 16,
        SquareAnchor = 17,
        RoundAnchor = 18,
        DiamondAnchor = 19,
        ArrowAnchor = 20,
        AnchorMask = 240,
        Custom = 255
    }

    enum CompositingQuality {
        Invalid = -1,
        Default = 0,
        HighSpeed = 1,
        HighQuality = 2,
        GammaCorrected = 3,
        AssumeLinear = 4
    }

    enum SmoothingMode {
        Invalid = -1,
        Default = 0,
        HighSpeed = 1,
        HighQuality = 2,
        None = 3,
        AntiAlias = 4
    }

    enum PixelOffsetMode {
        Invalid = -1,
        Default = 0,
        HighSpeed = 1,
        HighQuality = 2,
        None = 3,
        Half = 4
    }

    enum MatrixOrder {
        Prepend = 0,
        Append = 1
    }

    enum InterpolationMode {
        Invalid = -1,
        Default = 0,
        Low = 1,
        High = 2,
        Bilinear = 3,
        Bicubic = 4,
        NearestNeighbor = 5,
        HighQualityBilinear = 6,
        HighQualityBicubic = 7
    }

    enum PenAlignment {
        Center = 0,
        Inset = 1,
        Outset = 2,
        Left = 3,
        Right = 4
    }

    enum PenType {
        SolidColor = 0,
        HatchFill = 1,
        TextureFill = 2,
        PathGradient = 3,
        LinearGradient = 4
    }

    enum FlushIntention {
        Flush = 0,
        Sync = 1
    }

    export class RegionData {
        Data: any;
    }

    enum CoordinateSpace {
        World = 0,
        Page = 1,
        Device = 2
    }

    export class GraphicsState {
    }

    export class GraphicsContainer {
    }

    export class CustomLineCap {
        StrokeJoin: System.Drawing.Drawing2D.LineJoin;
        BaseCap: System.Drawing.Drawing2D.LineCap;
        BaseInset: number;
        WidthScale: number;
        constructor(fillPath: System.Drawing.Drawing2D.GraphicsPath, strokePath: System.Drawing.Drawing2D.GraphicsPath);
        constructor(fillPath: System.Drawing.Drawing2D.GraphicsPath, strokePath: System.Drawing.Drawing2D.GraphicsPath, baseCap: System.Drawing.Drawing2D.LineCap);
        constructor(fillPath: System.Drawing.Drawing2D.GraphicsPath, strokePath: System.Drawing.Drawing2D.GraphicsPath, baseCap: System.Drawing.Drawing2D.LineCap, baseInset: number);
        Dispose(): void;
        Clone(): any;
        SetStrokeCaps(startCap: System.Drawing.Drawing2D.LineCap, endCap: System.Drawing.Drawing2D.LineCap): void;
        //GetStrokeCaps(startCap: System.Drawing.Drawing2D.LineCap &, endCap: System.Drawing.Drawing2D.LineCap &): void;
        GetStrokeCaps(startCap: System.Drawing.Drawing2D.LineCap, endCap: System.Drawing.Drawing2D.LineCap): void;
    }

    export class Matrix {
        Elements: number[];
        OffsetX: number;
        OffsetY: number;
        IsInvertible: boolean;
        IsIdentity: boolean;
        constructor();
        constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number);
        constructor(rect: System.Drawing.RectangleF, plgpts: System.Drawing.PointF[]);
        constructor(rect: System.Drawing.Rectangle, plgpts: System.Drawing.Point[]);
        Dispose(): void;
        Clone(): System.Drawing.Drawing2D.Matrix;
        Reset(): void;
        Multiply(matrix: System.Drawing.Drawing2D.Matrix): void;
        Multiply(matrix: System.Drawing.Drawing2D.Matrix, order: System.Drawing.Drawing2D.MatrixOrder): void;
        Translate(offsetX: number, offsetY: number): void;
        Translate(offsetX: number, offsetY: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        Scale(scaleX: number, scaleY: number): void;
        Scale(scaleX: number, scaleY: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        Rotate(angle: number): void;
        Rotate(angle: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        RotateAt(angle: number, point: System.Drawing.PointF): void;
        RotateAt(angle: number, point: System.Drawing.PointF, order: System.Drawing.Drawing2D.MatrixOrder): void;
        Shear(shearX: number, shearY: number): void;
        Shear(shearX: number, shearY: number, order: System.Drawing.Drawing2D.MatrixOrder): void;
        Invert(): void;
        TransformPoints(pts: System.Drawing.PointF[]): void;
        TransformPoints(pts: System.Drawing.Point[]): void;
        TransformVectors(pts: System.Drawing.PointF[]): void;
        VectorTransformPoints(pts: System.Drawing.Point[]): void;
        TransformVectors(pts: System.Drawing.Point[]): void;
        Equals(obj: any): boolean;
        GetHashCode(): number;
    }

    enum FillMode {
        Alternate = 0,
        Winding = 1
    }

    export class PathData {
        Points: System.Drawing.PointF[];
        Types: any;
        constructor();
    }

    export class GraphicsPath {
        FillMode: System.Drawing.Drawing2D.FillMode;
        PathData: System.Drawing.Drawing2D.PathData;
        PointCount: number;
        PathTypes: any;
        PathPoints: System.Drawing.PointF[];
        constructor();
        constructor(fillMode: System.Drawing.Drawing2D.FillMode);
        constructor(pts: System.Drawing.PointF[], types: any);
        constructor(pts: System.Drawing.PointF[], types: any, fillMode: System.Drawing.Drawing2D.FillMode);
        constructor(pts: System.Drawing.Point[], types: any);
        constructor(pts: System.Drawing.Point[], types: any, fillMode: System.Drawing.Drawing2D.FillMode);
        Clone(): any;
        Dispose(): void;
        Reset(): void;
        StartFigure(): void;
        CloseFigure(): void;
        CloseAllFigures(): void;
        SetMarkers(): void;
        ClearMarkers(): void;
        Reverse(): void;
        GetLastPoint(): System.Drawing.PointF;
        IsVisible(x: number, y: number): boolean;
        IsVisible(point: System.Drawing.PointF): boolean;
        IsVisible(x: number, y: number, graphics: System.Drawing.Graphics): boolean;
        IsVisible(pt: System.Drawing.PointF, graphics: System.Drawing.Graphics): boolean;
        IsVisible(x: number, y: number): boolean;
        IsVisible(point: System.Drawing.Point): boolean;
        IsVisible(x: number, y: number, graphics: System.Drawing.Graphics): boolean;
        IsVisible(pt: System.Drawing.Point, graphics: System.Drawing.Graphics): boolean;
        IsOutlineVisible(x: number, y: number, pen: System.Drawing.Pen): boolean;
        IsOutlineVisible(point: System.Drawing.PointF, pen: System.Drawing.Pen): boolean;
        IsOutlineVisible(x: number, y: number, pen: System.Drawing.Pen, graphics: System.Drawing.Graphics): boolean;
        IsOutlineVisible(pt: System.Drawing.PointF, pen: System.Drawing.Pen, graphics: System.Drawing.Graphics): boolean;
        IsOutlineVisible(x: number, y: number, pen: System.Drawing.Pen): boolean;
        IsOutlineVisible(point: System.Drawing.Point, pen: System.Drawing.Pen): boolean;
        IsOutlineVisible(x: number, y: number, pen: System.Drawing.Pen, graphics: System.Drawing.Graphics): boolean;
        IsOutlineVisible(pt: System.Drawing.Point, pen: System.Drawing.Pen, graphics: System.Drawing.Graphics): boolean;
        AddLine(pt1: System.Drawing.PointF, pt2: System.Drawing.PointF): void;
        AddLine(x1: number, y1: number, x2: number, y2: number): void;
        AddLines(points: System.Drawing.PointF[]): void;
        AddLine(pt1: System.Drawing.Point, pt2: System.Drawing.Point): void;
        AddLine(x1: number, y1: number, x2: number, y2: number): void;
        AddLines(points: System.Drawing.Point[]): void;
        AddArc(rect: System.Drawing.RectangleF, startAngle: number, sweepAngle: number): void;
        AddArc(x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        AddArc(rect: System.Drawing.Rectangle, startAngle: number, sweepAngle: number): void;
        AddArc(x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        AddBezier(pt1: System.Drawing.PointF, pt2: System.Drawing.PointF, pt3: System.Drawing.PointF, pt4: System.Drawing.PointF): void;
        AddBezier(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
        AddBeziers(points: System.Drawing.PointF[]): void;
        AddBezier(pt1: System.Drawing.Point, pt2: System.Drawing.Point, pt3: System.Drawing.Point, pt4: System.Drawing.Point): void;
        AddBezier(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
        AddBeziers(...points: System.Drawing.Point[]): void;
        AddCurve(points: System.Drawing.PointF[]): void;
        AddCurve(points: System.Drawing.PointF[], tension: number): void;
        AddCurve(points: System.Drawing.PointF[], offset: number, numberOfSegments: number, tension: number): void;
        AddCurve(points: System.Drawing.Point[]): void;
        AddCurve(points: System.Drawing.Point[], tension: number): void;
        AddCurve(points: System.Drawing.Point[], offset: number, numberOfSegments: number, tension: number): void;
        AddClosedCurve(points: System.Drawing.PointF[]): void;
        AddClosedCurve(points: System.Drawing.PointF[], tension: number): void;
        AddClosedCurve(points: System.Drawing.Point[]): void;
        AddClosedCurve(points: System.Drawing.Point[], tension: number): void;
        AddRectangle(rect: System.Drawing.RectangleF): void;
        AddRectangles(rects: System.Drawing.RectangleF[]): void;
        AddRectangle(rect: System.Drawing.Rectangle): void;
        AddRectangles(rects: System.Drawing.Rectangle[]): void;
        AddEllipse(rect: System.Drawing.RectangleF): void;
        AddEllipse(x: number, y: number, width: number, height: number): void;
        AddEllipse(rect: System.Drawing.Rectangle): void;
        AddEllipse(x: number, y: number, width: number, height: number): void;
        AddPie(rect: System.Drawing.Rectangle, startAngle: number, sweepAngle: number): void;
        AddPie(x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        AddPie(x: number, y: number, width: number, height: number, startAngle: number, sweepAngle: number): void;
        AddPolygon(points: System.Drawing.PointF[]): void;
        AddPolygon(points: System.Drawing.Point[]): void;
        AddPath(addingPath: System.Drawing.Drawing2D.GraphicsPath, connect: boolean): void;
        AddString(s: string, family: System.Drawing.FontFamily, style: number, emSize: number, origin: System.Drawing.PointF, format: System.Drawing.StringFormat): void;
        AddString(s: string, family: System.Drawing.FontFamily, style: number, emSize: number, origin: System.Drawing.Point, format: System.Drawing.StringFormat): void;
        AddString(s: string, family: System.Drawing.FontFamily, style: number, emSize: number, layoutRect: System.Drawing.RectangleF, format: System.Drawing.StringFormat): void;
        AddString(s: string, family: System.Drawing.FontFamily, style: number, emSize: number, layoutRect: System.Drawing.Rectangle, format: System.Drawing.StringFormat): void;
        Transform(matrix: System.Drawing.Drawing2D.Matrix): void;
        GetBounds(): System.Drawing.RectangleF;
        GetBounds(matrix: System.Drawing.Drawing2D.Matrix): System.Drawing.RectangleF;
        GetBounds(matrix: System.Drawing.Drawing2D.Matrix, pen: System.Drawing.Pen): System.Drawing.RectangleF;
        Flatten(): void;
        Flatten(matrix: System.Drawing.Drawing2D.Matrix): void;
        Flatten(matrix: System.Drawing.Drawing2D.Matrix, flatness: number): void;
        Widen(pen: System.Drawing.Pen): void;
        Widen(pen: System.Drawing.Pen, matrix: System.Drawing.Drawing2D.Matrix): void;
        Widen(pen: System.Drawing.Pen, matrix: System.Drawing.Drawing2D.Matrix, flatness: number): void;
        Warp(destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF): void;
        Warp(destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, matrix: System.Drawing.Drawing2D.Matrix): void;
        Warp(destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, matrix: System.Drawing.Drawing2D.Matrix, warpMode: System.Drawing.Drawing2D.WarpMode): void;
        Warp(destPoints: System.Drawing.PointF[], srcRect: System.Drawing.RectangleF, matrix: System.Drawing.Drawing2D.Matrix, warpMode: System.Drawing.Drawing2D.WarpMode, flatness: number): void;
    }
}


declare module System.Drawing.Imaging {
    export class PlayRecordCallback {
        constructor(object: any, method: number);
        Invoke(recordType: System.Drawing.Imaging.EmfPlusRecordType, flags: number, dataSize: number, recordData: number): void;
        BeginInvoke(recordType: System.Drawing.Imaging.EmfPlusRecordType, flags: number, dataSize: number, recordData: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    enum ColorAdjustType {
        Default = 0,
        Bitmap = 1,
        Brush = 2,
        Pen = 3,
        Text = 4,
        Count = 5,
        Any = 6
    }

    enum ColorChannelFlag {
        ColorChannelC = 0,
        ColorChannelM = 1,
        ColorChannelY = 2,
        ColorChannelK = 3,
        ColorChannelLast = 4
    }

    export class ColorMap {
        OldColor: System.Drawing.Color;
        NewColor: System.Drawing.Color;
        constructor();
    }

    enum ColorMapType {
        Default = 0,
        Brush = 1
    }

    export class ImageAttributes {
        constructor();
        Dispose(): void;
        Clone(): any;
        SetColorMatrix(newColorMatrix: System.Drawing.Imaging.ColorMatrix): void;
        SetColorMatrix(newColorMatrix: System.Drawing.Imaging.ColorMatrix, flags: System.Drawing.Imaging.ColorMatrixFlag): void;
        SetColorMatrix(newColorMatrix: System.Drawing.Imaging.ColorMatrix, mode: System.Drawing.Imaging.ColorMatrixFlag, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearColorMatrix(): void;
        ClearColorMatrix(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetColorMatrices(newColorMatrix: System.Drawing.Imaging.ColorMatrix, grayMatrix: System.Drawing.Imaging.ColorMatrix): void;
        SetColorMatrices(newColorMatrix: System.Drawing.Imaging.ColorMatrix, grayMatrix: System.Drawing.Imaging.ColorMatrix, flags: System.Drawing.Imaging.ColorMatrixFlag): void;
        SetColorMatrices(newColorMatrix: System.Drawing.Imaging.ColorMatrix, grayMatrix: System.Drawing.Imaging.ColorMatrix, mode: System.Drawing.Imaging.ColorMatrixFlag, type: System.Drawing.Imaging.ColorAdjustType): void;
        SetThreshold(threshold: number): void;
        SetThreshold(threshold: number, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearThreshold(): void;
        ClearThreshold(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetGamma(gamma: number): void;
        SetGamma(gamma: number, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearGamma(): void;
        ClearGamma(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetNoOp(): void;
        SetNoOp(type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearNoOp(): void;
        ClearNoOp(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetColorKey(colorLow: System.Drawing.Color, colorHigh: System.Drawing.Color): void;
        SetColorKey(colorLow: System.Drawing.Color, colorHigh: System.Drawing.Color, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearColorKey(): void;
        ClearColorKey(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetOutputChannel(flags: System.Drawing.Imaging.ColorChannelFlag): void;
        SetOutputChannel(flags: System.Drawing.Imaging.ColorChannelFlag, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearOutputChannel(): void;
        ClearOutputChannel(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetOutputChannelColorProfile(colorProfileFilename: string): void;
        SetOutputChannelColorProfile(colorProfileFilename: string, type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearOutputChannelColorProfile(): void;
        ClearOutputChannelColorProfile(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetRemapTable(map: System.Drawing.Imaging.ColorMap[]): void;
        SetRemapTable(map: System.Drawing.Imaging.ColorMap[], type: System.Drawing.Imaging.ColorAdjustType): void;
        ClearRemapTable(): void;
        ClearRemapTable(type: System.Drawing.Imaging.ColorAdjustType): void;
        SetBrushRemapTable(map: System.Drawing.Imaging.ColorMap[]): void;
        ClearBrushRemapTable(): void;
        SetWrapMode(mode: System.Drawing.Drawing2D.WrapMode): void;
        SetWrapMode(mode: System.Drawing.Drawing2D.WrapMode, color: System.Drawing.Color): void;
        SetWrapMode(mode: System.Drawing.Drawing2D.WrapMode, color: System.Drawing.Color, clamp: boolean): void;
        GetAdjustedPalette(palette: System.Drawing.Imaging.ColorPalette, type: System.Drawing.Imaging.ColorAdjustType): void;
    }

    export class WmfPlaceableFileHeader {
        Key: number;
        Hmf: number;
        BboxLeft: number;
        BboxTop: number;
        BboxRight: number;
        BboxBottom: number;
        Inch: number;
        Reserved: number;
        Checksum: number;
        constructor();
    }

    enum EmfType {
        EmfOnly = 3,
        EmfPlusOnly = 4,
        EmfPlusDual = 5
    }

    enum MetafileFrameUnit {
        Pixel = 2,
        Point = 3,
        Inch = 4,
        Document = 5,
        Millimeter = 6,
        GdiCompatible = 7
    }

    enum MetafileType {
        Invalid = 0,
        Wmf = 1,
        WmfPlaceable = 2,
        Emf = 3,
        EmfPlusOnly = 4,
        EmfPlusDual = 5
    }

    export class MetaHeader {
        Type: number;
        HeaderSize: number;
        Version: number;
        Size: number;
        NoObjects: number;
        MaxRecord: number;
        NoParameters: number;
        constructor();
    }

    export class MetafileHeader {
        Type: System.Drawing.Imaging.MetafileType;
        MetafileSize: number;
        Version: number;
        DpiX: number;
        DpiY: number;
        Bounds: System.Drawing.Rectangle;
        WmfHeader: System.Drawing.Imaging.MetaHeader;
        EmfPlusHeaderSize: number;
        LogicalDpiX: number;
        LogicalDpiY: number;
        IsWmf(): boolean;
        IsWmfPlaceable(): boolean;
        IsEmf(): boolean;
        IsEmfOrEmfPlus(): boolean;
        IsEmfPlus(): boolean;
        IsEmfPlusDual(): boolean;
        IsEmfPlusOnly(): boolean;
        IsDisplay(): boolean;
    }

    enum EmfPlusRecordType {
        EmfHeader = 1,
        EmfMin = 1,
        EmfPolyBezier = 2,
        EmfPolygon = 3,
        EmfPolyline = 4,
        EmfPolyBezierTo = 5,
        EmfPolyLineTo = 6,
        EmfPolyPolyline = 7,
        EmfPolyPolygon = 8,
        EmfSetWindowExtEx = 9,
        EmfSetWindowOrgEx = 10,
        EmfSetViewportExtEx = 11,
        EmfSetViewportOrgEx = 12,
        EmfSetBrushOrgEx = 13,
        EmfEof = 14,
        EmfSetPixelV = 15,
        EmfSetMapperFlags = 16,
        EmfSetMapMode = 17,
        EmfSetBkMode = 18,
        EmfSetPolyFillMode = 19,
        EmfSetROP2 = 20,
        EmfSetStretchBltMode = 21,
        EmfSetTextAlign = 22,
        EmfSetColorAdjustment = 23,
        EmfSetTextColor = 24,
        EmfSetBkColor = 25,
        EmfOffsetClipRgn = 26,
        EmfMoveToEx = 27,
        EmfSetMetaRgn = 28,
        EmfExcludeClipRect = 29,
        EmfIntersectClipRect = 30,
        EmfScaleViewportExtEx = 31,
        EmfScaleWindowExtEx = 32,
        EmfSaveDC = 33,
        EmfRestoreDC = 34,
        EmfSetWorldTransform = 35,
        EmfModifyWorldTransform = 36,
        EmfSelectObject = 37,
        EmfCreatePen = 38,
        EmfCreateBrushIndirect = 39,
        EmfDeleteObject = 40,
        EmfAngleArc = 41,
        EmfEllipse = 42,
        EmfRectangle = 43,
        EmfRoundRect = 44,
        EmfRoundArc = 45,
        EmfChord = 46,
        EmfPie = 47,
        EmfSelectPalette = 48,
        EmfCreatePalette = 49,
        EmfSetPaletteEntries = 50,
        EmfResizePalette = 51,
        EmfRealizePalette = 52,
        EmfExtFloodFill = 53,
        EmfLineTo = 54,
        EmfArcTo = 55,
        EmfPolyDraw = 56,
        EmfSetArcDirection = 57,
        EmfSetMiterLimit = 58,
        EmfBeginPath = 59,
        EmfEndPath = 60,
        EmfCloseFigure = 61,
        EmfFillPath = 62,
        EmfStrokeAndFillPath = 63,
        EmfStrokePath = 64,
        EmfFlattenPath = 65,
        EmfWidenPath = 66,
        EmfSelectClipPath = 67,
        EmfAbortPath = 68,
        EmfReserved069 = 69,
        EmfGdiComment = 70,
        EmfFillRgn = 71,
        EmfFrameRgn = 72,
        EmfInvertRgn = 73,
        EmfPaintRgn = 74,
        EmfExtSelectClipRgn = 75,
        EmfBitBlt = 76,
        EmfStretchBlt = 77,
        EmfMaskBlt = 78,
        EmfPlgBlt = 79,
        EmfSetDIBitsToDevice = 80,
        EmfStretchDIBits = 81,
        EmfExtCreateFontIndirect = 82,
        EmfExtTextOutA = 83,
        EmfExtTextOutW = 84,
        EmfPolyBezier16 = 85,
        EmfPolygon16 = 86,
        EmfPolyline16 = 87,
        EmfPolyBezierTo16 = 88,
        EmfPolylineTo16 = 89,
        EmfPolyPolyline16 = 90,
        EmfPolyPolygon16 = 91,
        EmfPolyDraw16 = 92,
        EmfCreateMonoBrush = 93,
        EmfCreateDibPatternBrushPt = 94,
        EmfExtCreatePen = 95,
        EmfPolyTextOutA = 96,
        EmfPolyTextOutW = 97,
        EmfSetIcmMode = 98,
        EmfCreateColorSpace = 99,
        EmfSetColorSpace = 100,
        EmfDeleteColorSpace = 101,
        EmfGlsRecord = 102,
        EmfGlsBoundedRecord = 103,
        EmfPixelFormat = 104,
        EmfDrawEscape = 105,
        EmfExtEscape = 106,
        EmfStartDoc = 107,
        EmfSmallTextOut = 108,
        EmfForceUfiMapping = 109,
        EmfNamedEscpae = 110,
        EmfColorCorrectPalette = 111,
        EmfSetIcmProfileA = 112,
        EmfSetIcmProfileW = 113,
        EmfAlphaBlend = 114,
        EmfSetLayout = 115,
        EmfTransparentBlt = 116,
        EmfReserved117 = 117,
        EmfGradientFill = 118,
        EmfSetLinkedUfis = 119,
        EmfSetTextJustification = 120,
        EmfColorMatchToTargetW = 121,
        EmfCreateColorSpaceW = 122,
        EmfMax = 122,
        EmfPlusRecordBase = 16384,
        Invalid = 16384,
        Header = 16385,
        Min = 16385,
        EndOfFile = 16386,
        Comment = 16387,
        GetDC = 16388,
        MultiFormatStart = 16389,
        MultiFormatSection = 16390,
        MultiFormatEnd = 16391,
        Object = 16392,
        Clear = 16393,
        FillRects = 16394,
        DrawRects = 16395,
        FillPolygon = 16396,
        DrawLines = 16397,
        FillEllipse = 16398,
        DrawEllipse = 16399,
        FillPie = 16400,
        DrawPie = 16401,
        DrawArc = 16402,
        FillRegion = 16403,
        FillPath = 16404,
        DrawPath = 16405,
        FillClosedCurve = 16406,
        DrawClosedCurve = 16407,
        DrawCurve = 16408,
        DrawBeziers = 16409,
        DrawImage = 16410,
        DrawImagePoints = 16411,
        DrawString = 16412,
        SetRenderingOrigin = 16413,
        SetAntiAliasMode = 16414,
        SetTextRenderingHint = 16415,
        SetTextContrast = 16416,
        SetInterpolationMode = 16417,
        SetPixelOffsetMode = 16418,
        SetCompositingMode = 16419,
        SetCompositingQuality = 16420,
        Save = 16421,
        Restore = 16422,
        BeginContainer = 16423,
        BeginContainerNoParams = 16424,
        EndContainer = 16425,
        SetWorldTransform = 16426,
        ResetWorldTransform = 16427,
        MultiplyWorldTransform = 16428,
        TranslateWorldTransform = 16429,
        ScaleWorldTransform = 16430,
        RotateWorldTransform = 16431,
        SetPageTransform = 16432,
        ResetClip = 16433,
        SetClipRect = 16434,
        SetClipPath = 16435,
        SetClipRegion = 16436,
        OffsetClip = 16437,
        DrawDriverString = 16438,
        Max = 16438,
        Total = 16439,
        WmfRecordBase = 65536,
        WmfSaveDC = 65566,
        WmfRealizePalette = 65589,
        WmfSetPalEntries = 65591,
        WmfCreatePalette = 65783,
        WmfSetBkMode = 65794,
        WmfSetMapMode = 65795,
        WmfSetROP2 = 65796,
        WmfSetRelAbs = 65797,
        WmfSetPolyFillMode = 65798,
        WmfSetStretchBltMode = 65799,
        WmfSetTextCharExtra = 65800,
        WmfRestoreDC = 65831,
        WmfInvertRegion = 65834,
        WmfPaintRegion = 65835,
        WmfSelectClipRegion = 65836,
        WmfSelectObject = 65837,
        WmfSetTextAlign = 65838,
        WmfResizePalette = 65849,
        WmfDibCreatePatternBrush = 65858,
        WmfSetLayout = 65865,
        WmfDeleteObject = 66032,
        WmfCreatePatternBrush = 66041,
        WmfSetBkColor = 66049,
        WmfSetTextColor = 66057,
        WmfSetTextJustification = 66058,
        WmfSetWindowOrg = 66059,
        WmfSetWindowExt = 66060,
        WmfSetViewportOrg = 66061,
        WmfSetViewportExt = 66062,
        WmfOffsetWindowOrg = 66063,
        WmfOffsetViewportOrg = 66065,
        WmfLineTo = 66067,
        WmfMoveTo = 66068,
        WmfOffsetCilpRgn = 66080,
        WmfFillRegion = 66088,
        WmfSetMapperFlags = 66097,
        WmfSelectPalette = 66100,
        WmfCreatePenIndirect = 66298,
        WmfCreateFontIndirect = 66299,
        WmfCreateBrushIndirect = 66300,
        WmfPolygon = 66340,
        WmfPolyline = 66341,
        WmfScaleWindowExt = 66576,
        WmfScaleViewportExt = 66578,
        WmfExcludeClipRect = 66581,
        WmfIntersectClipRect = 66582,
        WmfEllipse = 66584,
        WmfFloodFill = 66585,
        WmfRectangle = 66587,
        WmfSetPixel = 66591,
        WmfFrameRegion = 66601,
        WmfAnimatePalette = 66614,
        WmfTextOut = 66849,
        WmfPolyPolygon = 66872,
        WmfExtFloodFill = 66888,
        WmfRoundRect = 67100,
        WmfPatBlt = 67101,
        WmfEscape = 67110,
        WmfCreateRegion = 67327,
        WmfArc = 67607,
        WmfPie = 67610,
        WmfChord = 67632,
        WmfBitBlt = 67874,
        WmfDibBitBlt = 67904,
        WmfExtTextOut = 68146,
        WmfStretchBlt = 68387,
        WmfDibStretchBlt = 68417,
        WmfSetDibToDev = 68915,
        WmfStretchDib = 69443
    }

    export class Metafile {
        constructor(hmetafile: number, wmfHeader: System.Drawing.Imaging.WmfPlaceableFileHeader);
        constructor(hmetafile: number, wmfHeader: System.Drawing.Imaging.WmfPlaceableFileHeader, deleteWmf: boolean);
        constructor(henhmetafile: number, deleteEmf: boolean);
        constructor(filename: string);
        //constructor(stream: System.IO.Stream);
        constructor(stream: any);
        constructor(referenceHdc: number, emfType: System.Drawing.Imaging.EmfType);
        constructor(referenceHdc: number, emfType: System.Drawing.Imaging.EmfType, description: string);
        constructor(referenceHdc: number, frameRect: System.Drawing.RectangleF);
        constructor(referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit);
        constructor(referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType);
        constructor(referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType, description: string);
        constructor(referenceHdc: number, frameRect: System.Drawing.Rectangle);
        constructor(referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit);
        constructor(referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType);
        constructor(referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType, desc: string);
        constructor(fileName: string, referenceHdc: number);
        constructor(fileName: string, referenceHdc: number, type: System.Drawing.Imaging.EmfType);
        constructor(fileName: string, referenceHdc: number, type: System.Drawing.Imaging.EmfType, description: string);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.RectangleF);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, desc: string);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType, description: string);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.Rectangle);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, description: string);
        constructor(fileName: string, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType, description: string);
        //constructor(stream: System.IO.Stream, referenceHdc: number);
        //constructor(stream: System.IO.Stream, referenceHdc: number, type: System.Drawing.Imaging.EmfType);
        //constructor(stream: System.IO.Stream, referenceHdc: number, type: System.Drawing.Imaging.EmfType, description: string);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.RectangleF);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.RectangleF, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType, description: string);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.Rectangle);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType);
        //constructor(stream: System.IO.Stream, referenceHdc: number, frameRect: System.Drawing.Rectangle, frameUnit: System.Drawing.Imaging.MetafileFrameUnit, type: System.Drawing.Imaging.EmfType, description: string);
        static GetMetafileHeader(hmetafile: number, wmfHeader: System.Drawing.Imaging.WmfPlaceableFileHeader): System.Drawing.Imaging.MetafileHeader;
        static GetMetafileHeader(henhmetafile: number): System.Drawing.Imaging.MetafileHeader;
        static GetMetafileHeader(fileName: string): System.Drawing.Imaging.MetafileHeader;
        //static GetMetafileHeader(stream: System.IO.Stream): System.Drawing.Imaging.MetafileHeader;
        static GetMetafileHeader(stream: any): System.Drawing.Imaging.MetafileHeader;
        GetMetafileHeader(): System.Drawing.Imaging.MetafileHeader;
        GetHenhmetafile(): number;
        PlayRecord(recordType: System.Drawing.Imaging.EmfPlusRecordType, flags: number, dataSize: number, data: any): void;
    }

    export class ImageFormat {
        Guid: string;
        MemoryBmp: System.Drawing.Imaging.ImageFormat;
        Bmp: System.Drawing.Imaging.ImageFormat;
        Emf: System.Drawing.Imaging.ImageFormat;
        Wmf: System.Drawing.Imaging.ImageFormat;
        Gif: System.Drawing.Imaging.ImageFormat;
        Jpeg: System.Drawing.Imaging.ImageFormat;
        Png: System.Drawing.Imaging.ImageFormat;
        Tiff: System.Drawing.Imaging.ImageFormat;
        Exif: System.Drawing.Imaging.ImageFormat;
        Icon: System.Drawing.Imaging.ImageFormat;
        constructor(guid: string);
        Equals(o: any): boolean;
        GetHashCode(): number;
        ToString(): string;
    }

    export class ImageCodecInfo {
        Clsid: string;
        FormatID: string;
        CodecName: string;
        DllName: string;
        FormatDescription: string;
        FilenameExtension: string;
        MimeType: string;
        Flags: System.Drawing.Imaging.ImageCodecFlags;
        Version: number;
        SignaturePatterns: number[][];
        SignatureMasks: number[][];
        static GetImageDecoders(): System.Drawing.Imaging.ImageCodecInfo[];
        static GetImageEncoders(): System.Drawing.Imaging.ImageCodecInfo[];
    }

    enum ImageCodecFlags {
        Encoder = 1,
        Decoder = 2,
        SupportBitmap = 4,
        SupportVector = 8,
        SeekableEncode = 16,
        BlockingDecode = 32,
        Builtin = 65536,
        System = 131072,
        User = 262144
    }

    export class ColorMatrix {
        Matrix00: number;
        Matrix01: number;
        Matrix02: number;
        Matrix03: number;
        Matrix04: number;
        Matrix10: number;
        Matrix11: number;
        Matrix12: number;
        Matrix13: number;
        Matrix14: number;
        Matrix20: number;
        Matrix21: number;
        Matrix22: number;
        Matrix23: number;
        Matrix24: number;
        Matrix30: number;
        Matrix31: number;
        Matrix32: number;
        Matrix33: number;
        Matrix34: number;
        Matrix40: number;
        Matrix41: number;
        Matrix42: number;
        Matrix43: number;
        Matrix44: number;
        Item: number;
        constructor();
        constructor(newColorMatrix: number[][]);
    }

    enum ColorMatrixFlag {
        Default = 0,
        SkipGrays = 1,
        AltGrays = 2
    }

    export class FrameDimension {
        Guid: string;
        Time: System.Drawing.Imaging.FrameDimension;
        Resolution: System.Drawing.Imaging.FrameDimension;
        Page: System.Drawing.Imaging.FrameDimension;
        constructor(guid: string);
        Equals(o: any): boolean;
        GetHashCode(): number;
        ToString(): string;
    }

    export class ColorPalette {
        Flags: number;
        Entries: System.Drawing.Color[];
    }

    export class PropertyItem {
        Id: number;
        Len: number;
        Type: number;
        Value: any;
    }

    export class Encoder {
        Compression: System.Drawing.Imaging.Encoder;
        ColorDepth: System.Drawing.Imaging.Encoder;
        ScanMethod: System.Drawing.Imaging.Encoder;
        Version: System.Drawing.Imaging.Encoder;
        RenderMethod: System.Drawing.Imaging.Encoder;
        Quality: System.Drawing.Imaging.Encoder;
        Transformation: System.Drawing.Imaging.Encoder;
        LuminanceTable: System.Drawing.Imaging.Encoder;
        ChrominanceTable: System.Drawing.Imaging.Encoder;
        SaveFlag: System.Drawing.Imaging.Encoder;
        Guid: string;
        constructor(guid: string);
    }

    enum EncoderParameterValueType {
        ValueTypeByte = 1,
        ValueTypeAscii = 2,
        ValueTypeShort = 3,
        ValueTypeLong = 4,
        ValueTypeRational = 5,
        ValueTypeLongRange = 6,
        ValueTypeUndefined = 7,
        ValueTypeRationalRange = 8
    }

    export class EncoderParameter {
        Encoder: System.Drawing.Imaging.Encoder;
        Type: System.Drawing.Imaging.EncoderParameterValueType;
        ValueType: System.Drawing.Imaging.EncoderParameterValueType;
        NumberOfValues: number;
        constructor(encoder: System.Drawing.Imaging.Encoder, value: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: number, undefined: boolean);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, numerator: number, denominator: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, rangebegin: number, rangeend: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, numerator1: number, demoninator1: number, numerator2: number, demoninator2: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: string);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: any);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: any, undefined: boolean);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: number[]);
        constructor(encoder: System.Drawing.Imaging.Encoder, value: number[]);
        constructor(encoder: System.Drawing.Imaging.Encoder, numerator: number[], denominator: number[]);
        constructor(encoder: System.Drawing.Imaging.Encoder, rangebegin: number[], rangeend: number[]);
        constructor(encoder: System.Drawing.Imaging.Encoder, numerator1: number[], denominator1: number[], numerator2: number[], denominator2: number[]);
        constructor(encoder: System.Drawing.Imaging.Encoder, NumberOfValues: number, Type: number, Value: number);
        constructor(encoder: System.Drawing.Imaging.Encoder, numberValues: number, type: System.Drawing.Imaging.EncoderParameterValueType, value: number);
        Dispose(): void;
    }

    export class EncoderParameters {
        Param: System.Drawing.Imaging.EncoderParameter[];
        constructor(count: number);
        constructor();
        Dispose(): void;
    }

    export class BitmapData {
        Width: number;
        Height: number;
        Stride: number;
        PixelFormat: System.Drawing.Imaging.PixelFormat;
        Scan0: number;
        Reserved: number;
        constructor();
    }

    enum PixelFormat {
        Undefined = 0,
        DontCare = 0,
        Max = 15,
        Indexed = 65536,
        Gdi = 131072,
        Format16bppRgb555 = 135173,
        Format16bppRgb565 = 135174,
        Format24bppRgb = 137224,
        Format32bppRgb = 139273,
        Format1bppIndexed = 196865,
        Format4bppIndexed = 197634,
        Format8bppIndexed = 198659,
        Alpha = 262144,
        Format16bppArgb1555 = 397319,
        PAlpha = 524288,
        Format32bppPArgb = 925707,
        Extended = 1048576,
        Format16bppGrayScale = 1052676,
        Format48bppRgb = 1060876,
        Format64bppPArgb = 1851406,
        Canonical = 2097152,
        Format32bppArgb = 2498570,
        Format64bppArgb = 3424269
    }

    enum ImageLockMode {
        ReadOnly = 1,
        WriteOnly = 2,
        ReadWrite = 3,
        UserInputBuffer = 4
    }
}
declare module System.Drawing.Text {

    export class FontCollection {
        Families: System.Drawing.FontFamily[];
        Dispose(): void;
    }

    enum GenericFontFamilies {
        Serif = 0,
        SansSerif = 1,
        Monospace = 2
    }

    enum HotkeyPrefix {
        None = 0,
        Show = 1,
        Hide = 2
    }

    export class InstalledFontCollection {
        constructor();
    }

    export class PrivateFontCollection {
        constructor();
        AddFontFile(filename: string): void;
        AddMemoryFont(memory: number, length: number): void;
    }

    enum TextRenderingHint {
        SystemDefault = 0,
        SingleBitPerPixelGridFit = 1,
        SingleBitPerPixel = 2,
        AntiAliasGridFit = 3,
        AntiAlias = 4,
        ClearTypeGridFit = 5
    }
}
