//****************************************************************
//  (Partially) Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       0.0.0.0
//  Date:          12/31/2016 7:08:00 PM
//
//  Assemblies:
//    dll
//
//****************************************************************

declare class Attachment {
    NetHandle: number;
    PositionOffset: Vector3;
    RotationOffset: Vector3;
    Bone: string;
    constructor();
}

declare class BitReader {
    CurrentIndex: number;
    constructor(array: any);
    CanRead(bytes: number): boolean;
    ReadBoolean(): boolean;
    ReadSingle(): number;
    ReadByte(): number;
    ReadInt16(): number;
    ReadUInt16(): number;
    ReadInt32(): number;
    ReadUInt32(): number;
    ReadInt64(): number;
    ReadUInt64(): number;
}

declare class BlipProperties {
    Sprite: number;
    Scale: number;
    Color: number;
    IsShortRange: boolean;
    AttachedNetEntity: number;
    RangedBlip: number;
    Name: string;
    constructor();
}

declare class BooleanArgument {
    Data: boolean;
    constructor();
}

declare class ClientsideScript {
    ResourceParent: string;
    Script: string;
    Filename: string;
    MD5Hash: string;
    constructor();
}

declare enum ConnectionChannel {
    Default = 0,
    FileTransfer = 1,
    NativeCall = 2,
    Chat = 3,
    EntityBackend = 4,
    PositionData = 5,
    SyncEvent = 6,
    PureSync = 7,
    LightSync = 8,
    BasicSync = 9,
    BulletSync = 10,
    UnoccupiedVeh = 11
}

declare class ConnectionRequest {
    SocialClubName: string;
    Password: string;
    DisplayName: string;
    GameVersion: number;
    ScriptVersion: number;
    constructor();
}

declare class ConnectionResponse {
    CharacterHandle: number;
    Settings: SharedSettings;
    ServerVersion: number;
    constructor();
}

declare class CreateEntity {
    NetHandle: number;
    EntityType: number;
    Properties: EntityProperties;
    constructor();
}

declare class DataDownloadStart {
    Id: number;
    FileType: number;
    FileName: string;
    ResourceParent: string;
    Length: number;
    Md5Hash: string;
    constructor();
}

declare class DeleteEntity {
    NetHandle: number;
    constructor();
}

declare class Delta_BlipProperties {
    //Sprite?: number;
    Sprite: number;
    //Scale?: number;
    Scale: number;
    //Color?: number;
    Color: number;
    //IsShortRange?: boolean;
    IsShortRange: boolean;
    //AttachedNetEntity?: number;
    AttachedNetEntity: number;
    //RangedBlip?: number;
    RangedBlip: number;
    Name: string;
    constructor();
}

declare class Delta_EntityProperties {
    Position: Vector3;
    Rotation: Vector3;
    //ModelHash?: number;
    ModelHash: number;
    //EntityType?: number;
    EntityType: number;
    //Alpha?: number;
    Alpha: number;
    //Dimension?: number;
    Dimension: number;
    AttachedTo: Attachment;
    Attachables: number[];
    //Flag?: number;
    Flag: number;
    SyncedProperties: string[];
    PositionMovement: Movement;
    RotationMovement: Movement;
    //IsInvincible?: boolean;
    IsInvincible: boolean;
    constructor();
}

declare class Delta_MarkerProperties {
    Direction: Vector3;
    //MarkerType?: number;
    MarkerType: number;
    //Red?: number;
    Red: number;
    //Green?: number;
    Green: number;
    //Blue?: number;
    Blue: number;
    Scale: Vector3;
    constructor();
}

declare class Delta_ParticleProperties {
    Library: string;
    Name: string;
    //Scale?: number;
    Scale: number;
    //EntityAttached?: number;
    EntityAttached: number;
    //BoneAttached?: number;
    BoneAttached: number;
    constructor();
}

declare class Delta_PedProperties {
    LoopingAnimation: string;
    constructor();
}

declare class Delta_PickupProperties {
    //Amount?: number;
    Amount: number;
    //PickedUp?: boolean;
    PickedUp: boolean;
    //RespawnTime?: number;
    RespawnTime: number;
    //CustomModel?: number;
    CustomModel: number;
    constructor();
}

declare class Delta_PlayerProperties {
    Props: number[];
    Textures: number[];
    //BlipSprite?: number;
    BlipSprite: number;
    //Team?: number;
    Team: number;
    //BlipColor?: number;
    BlipColor: number;
    //BlipAlpha?: number;
    BlipAlpha: number;
    Accessories: number[];
    Name: string;
    WeaponTints: number[];
    WeaponComponents: number[];
    NametagText: string;
    //NametagSettings?: number;
    NametagSettings: number;
    constructor();
}

declare class Delta_TextLabelProperties {
    Text: string;
    //Red?: number;
    Red: number;
    //Green?: number;
    Green: number;
    //Blue?: number;
    Blue: number;
    //Size?: number;
    Size: number;
    //Range?: number;
    Range: number;
    //EntitySeethrough?: boolean;
    EntitySeethrough: boolean;
    constructor();
}

declare class Delta_VehicleProperties {
    //PrimaryColor?: number;
    PrimaryColor: number;
    //SecondaryColor?: number;
    SecondaryColor: number;
    //Health?: number;
    Health: number;
    //IsDead?: boolean;
    IsDead: boolean;
    Mods: number[];
    //Siren?: boolean;
    Siren: boolean;
    //Doors?: number;
    Doors: number;
    //Trailer?: number;
    Trailer: number;
    //Tires?: number;
    Tires: number;
    //Livery?: number;
    Livery: number;
    NumberPlate: string;
    //VehicleComponents?: number;
    VehicleComponents: number;
    //TraileredBy?: number;
    TraileredBy: number;
    DamageModel: VehicleDamageModel;
    constructor();
}

declare class Delta_WorldProperties {
    //Hours?: number;
    Hours: number;
    //Minutes?: number;
    Minutes: number;
    Weather: string;
    LoadedIpl: string[];
    RemovedIpl: string[];
    constructor();
}

declare class DiscoveryResponse {
    ServerName: string;
    MaxPlayers: number;
    PlayerCount: number;
    PasswordProtected: boolean;
    Port: number;
    Gamemode: string;
    LAN: boolean;
    constructor();
}

declare class EntityArgument {
    NetHandle: number;
    constructor();
    constructor(netHandle: number);
}

declare enum EntityFlag {
    Collisionless = 1,
    EngineOff = 2,
    SpecialLight = 4,
    PlayerSpectating = 8,
    VehicleLocked = 16
}

declare class EntityPointerArgument {
    NetHandle: number;
    constructor(netHandle: number);
    constructor();
}

declare class EntityProperties {
    Position: Vector3;
    Rotation: Vector3;
    ModelHash: number;
    EntityType: number;
    Alpha: number;
    Dimension: number;
    AttachedTo: Attachment;
    Attachables: number[];
    Flag: number;
    SyncedProperties: string[];
    PositionMovement: Movement;
    RotationMovement: Movement;
    IsInvincible: boolean;
    constructor();
}

declare enum EntityType {
    Vehicle = 1,
    Prop = 2,
    Blip = 3,
    Marker = 4,
    Pickup = 5,
    Player = 6,
    TextLabel = 7,
    Ped = 8,
    Particle = 9,
    World = 255
}

declare class Extensions {
    static Clamp(value: number, min: number, max: number): number;
    static FromArgb(a: number, r: number, g: number, b: number): number;
    //static ToArgb(argb: number, a: number&, r: number&, g: number&, b: number&): void;
    static ToArgb(argb: number, a: number, r: number, g: number, b: number): void;
    //static Set(dict: TKey, key: TKey, value: TValue): void;
    static Set(dict: any, key: any, value: any): void;
    //static Get(dict: TKey, key: TKey): TValue;
    static Get(dict: any, key: any): any;
    static Get(dict: number, key: number): number;
}

declare class FileDeclaration {
    type: FileType;
    path: string;
    hash: string;
    constructor(_path: string, _hash: string, _type: FileType);
}

declare class FileManifest {
    exportedFiles: string[];
    constructor();
}

declare enum FileType {
    Normal = 0,
    Map = 1,
    Script = 2,
    EndOfTransfer = 3,
    CustomData = 4
}

declare class FloatArgument {
    Data: number;
    constructor();
}

declare class GTANSchemeListener {
    constructor();
    Create(): void;
    Dispose(): void;
    Check(): string;
    Set(ip: string): void;
}

declare class ImpatientWebClient {
    Timeout: number;
    constructor();
    constructor(timeout: number);
}

declare class IntArgument {
    Data: number;
    constructor();
}

declare class LauncherSettings {
    GameParams: string[];
    constructor();
}

declare interface LauncherSettings_ISubprocessBehaviour {
    Start(args: string[]): void;
}

declare enum Lights {
    NormalLights = 0,
    Highbeams = 1
}

declare class ListArgument {
    Data: NativeArgument[];
    constructor();
}

declare class LocalGamePlayerArgument {
    constructor();
}

declare class LocalPlayerArgument {
    constructor();
}

declare class MarkerProperties {
    Direction: Vector3;
    MarkerType: number;
    Red: number;
    Green: number;
    Blue: number;
    Scale: Vector3;
    constructor();
}

declare class MasterServerAnnounce {
    Port: number;
    MaxPlayers: number;
    ServerName: string;
    CurrentPlayers: number;
    Gamemode: string;
    Map: string;
    Passworded: boolean;
    constructor();
}

//declare class MimeType {
//    static GetMimeType(extension: string): string;
//}

declare class Movement {
    Duration: number;
    Start: number;
    StartVector: Vector3;
    EndVector: Vector3;
    ServerStartTime: number;
    constructor();
}

declare class NativeArgument {
    Id: string;
    constructor();
}

declare class NativeData {
    Hash: number;
    Arguments_: NativeArgument[];
    ReturnType: NativeArgument;
    Id: number;
    constructor();
}

declare class NativeResponse {
    Response: NativeArgument;
    Id: number;
    constructor();
}

declare class NativeTickCall {
    Native: NativeData;
    Identifier: string;
    constructor();
}

declare class NetHandle {
    IsNull: boolean;
    Value: number;
    constructor(handle: number);
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
}

declare enum NonStandardVehicleMod {
    BulletproofTyres = 61,
    NumberPlateStyle = 62,
    PearlescentColor = 63,
    WheelColor = 64,
    WheelType = 65,
    ModColor1 = 66,
    ModColor2 = 67,
    TyreSmokeColor = 68,
    WindowTint = 69,
    EnginePowerMultiplier = 70,
    EngineTorqueMultiplier = 71,
    NeonLightPos = 72,
    NeonLightColor = 73,
    DashboardColor = 74,
    TrimColor = 75
}

declare class OpponentPedHandleArgument {
    Data: number;
    constructor(opponentHandle: number);
    constructor();
}

declare class PacketOptimization {
    static WritePureSync(data: PedData): any;
    static WriteLightSync(data: PedData): any;
    static WritePureSync(data: VehicleData): any;
    static WriteLightSync(data: VehicleData): any;
    static WriteBasicSync(netHandle: number, position: Vector3): any;
    static WriteBulletSync(netHandle: number, shooting: boolean, aimCoords: Vector3): any;
    static WriteUnOccupiedVehicleSync(data: VehicleData): any;
    static WriteBasicUnOccupiedVehicleSync(data: VehicleData): any;
    static ReadPurePedSync(array: any): PedData;
    static ReadLightPedSync(array: any): PedData;
    static ReadPureVehicleSync(array: any): VehicleData;
    static ReadLightVehicleSync(array: any): VehicleData;
    //static ReadBasicSync(array: any, netHandle: number&, position: Vector3&): void;
    static ReadBasicSync(array: any, netHandle: number, position: Vector3): void;
    //static ReadBulletSync(array: any, netHandle: number&, position: Vector3&): boolean;
    static ReadBulletSync(array: any, netHandle: number, position: Vector3): boolean;
    static ReadUnoccupiedVehicleSync(array: any): VehicleData;
    static ReadBasicUnoccupiedVehicleSync(array: any): VehicleData;
    static CompressSingle(value: number): number;
    static DecompressSingle(value: number): number;
    static CheckBit(value: number, flag: VehicleDataFlags): boolean;
    static CheckBit(value: number, flag: PedDataFlags): boolean;
    static CheckBit(value: number, flag: EntityFlag): boolean;
    static SetBit(value: number, flag: EntityFlag): number;
    static ResetBit(value: number, flag: EntityFlag): number;
    static CheckBit(value: number, flag: number): boolean;
    static SetBit(value: number, flag: number): number;
    static ResetBit(value: number, flag: number): number;
}

declare enum PacketType {
    ChatData = 1,
    PlayerDisconnect = 2,
    NpcVehPositionData = 4,
    NpcPedPositionData = 5,
    WorldSharingStop = 6,
    DiscoveryResponse = 7,
    ConnectionRequest = 8,
    NativeCall = 9,
    NativeResponse = 10,
    PlayerRespawned = 11,
    NativeTick = 12,
    NativeTickRecall = 13,
    NativeOnDisconnect = 14,
    NativeOnDisconnectRecall = 15,
    CreateEntity = 16,
    DeleteEntity = 17,
    ScriptEventTrigger = 18,
    SyncEvent = 19,
    FileTransferTick = 20,
    FileTransferRequest = 21,
    FileTransferComplete = 22,
    ConnectionConfirmed = 23,
    PlayerKilled = 24,
    StopResource = 25,
    UpdateEntityProperties = 26,
    FileAcceptDeny = 27,
    ServerEvent = 28,
    RedownloadManifest = 29,
    PedPureSync = 30,
    PedLightSync = 31,
    VehiclePureSync = 32,
    VehicleLightSync = 33,
    BasicSync = 34,
    BulletSync = 35,
    UnoccupiedVehStartStopSync = 36,
    UnoccupiedVehSync = 37,
    BasicUnoccupiedVehSync = 38
}

declare class ParseableVersion {
    Major: number;
    Minor: number;
    Revision: number;
    Build: number;
    constructor(major: number, minor: number, build: number, rev: number);
    ToString(): string;
    CompareTo(right: ParseableVersion): number;
    CreateComparableInteger(): number;
    ToLong(): number;
    static FromLong(version: number): ParseableVersion;
    static Parse(version: string): ParseableVersion;
    static FromAssembly(): ParseableVersion;
    //static FromAssembly(assembly: System.Reflection.Assembly): ParseableVersion;
    static FromAssembly(assembly: any): ParseableVersion;
}

declare class ParticleProperties {
    Library: string;
    Name: string;
    Scale: number;
    EntityAttached: number;
    BoneAttached: number;
    constructor();
}

declare class PedData {
    Position: Vector3;
    //NetHandle?: number;
    NetHandle: number;
    //PedModelHash?: number;
    PedModelHash: number;
    Quaternion: Vector3;
    AimCoords: Vector3;
    //WeaponHash?: number;
    WeaponHash: number;
    //PlayerHealth?: number;
    PlayerHealth: number;
    //Latency?: number;
    Latency: number;
    //Speed?: number;
    Speed: number;
    //PedArmor?: number;
    PedArmor: number;
    //Flag?: number;
    Flag: number;
    Velocity: Vector3;
    //VehicleTryingToEnter?: number;
    VehicleTryingToEnter: number;
    //SeatTryingToEnter?: System.SByte;
    //SeatTryingToEnter?: any;
    SeatTryingToEnter: any;
    constructor();
}

declare enum PedDataFlags {
    Jumping = 1,
    Shooting = 2,
    Aiming = 4,
    ParachuteOpen = 8,
    Ragdoll = 16,
    InMeleeCombat = 32,
    InFreefall = 64,
    IsInCover = 128,
    IsInLowerCover = 256,
    IsInCoverFacingLeft = 512,
    IsReloading = 1024,
    HasAimData = 2048,
    IsOnLadder = 4096,
    IsVaulting = 8192,
    EnteringVehicle = 16384,
    ClosingVehicleDoor = 32768,
    OnFire = 65536,
    PlayerDead = 131072
}

declare class PedProperties {
    LoopingAnimation: string;
    constructor();
}

declare enum PickupHash {
    PortablePackage = -2136239332,
    WeaponBullpupRifle = -2124585240,
    WeaponBat = -2115084258,
    AmmoRPG = -2071756841,
    VehicleWeaponMolotov = -2066319660,
    WeaponMG = -2050315855,
    WeaponCrowbar = -2027042680,
    AmmoGrenadeLauncher = -2011516760,
    WeaponGolfclub = -1997886297,
    WeaponCombatPistol = -1989692173,
    Health = -1888453608,
    WeaponAssaultShotgun = -1835415205,
    WeaponSawnoffShotgun = -1766583645,
    WeaponHeavyPistol = -1661912808,
    AmmoGrenadeLauncherMP = -1541298894,
    VehicleWeaponPistol = -1521817673,
    VehicleCustomScript = -1514616151,
    VehicleWeaponGrenade = -1491601256,
    WeaponPumpShotgun = -1456120371,
    WeaponPipebomb = -1352061783,
    WeaponCombatMG = -1298986476,
    WeaponAdvancedRifle = -1296747938,
    VehicleWeaponMicroSMG = -1200951717,
    WeaponAutoshotgun = -1127890446,
    AmmoSniper = -1070796507,
    WeaponSNSPistol = -977852653,
    WeaponPetrolCan = -962731009,
    VehicleWeaponAPPistol = -863291131,
    MoneyCase = -831529621,
    VehicleWeaponCombatPistol = -794112265,
    WeaponMiniSMG = -747492773,
    AmmoMG = -564600653,
    MoneySecurityCase = -562499202,
    WeaponCarbineRifle = -546236071,
    AmmoRifle = -457363514,
    WeaponWrench = -451800215,
    WeaponCompactLauncher = -253098439,
    AmmoMinigun = -228982343,
    WeaponAssaultRifle = -214137936,
    AmmoMissileMP = -107080240,
    WeaponPistol = -105925489,
    WeaponBottle = -95310859,
    MoneyVariable = -31919185,
    WeaponSniperRifle = -30788308,
    WeaponPoolcue = 155106086,
    WeaponSpecialCarbine = 157823901,
    WeaponBattleaxe = 158843122,
    VehicleHealth = 160266735,
    AmmoSMG = 292537574,
    MoneyMedBag = 341217064,
    HealthSnack = 483577702,
    WeaponSmokeGrenade = 483787975,
    WeaponMicroSMG = 496339155,
    MoneyPurse = 513448440,
    AmmoPistol = 544828034,
    MoneyDepBag = 545862290,
    WeaponKnife = 663586612,
    CustomScript = 738282662,
    VehicleWeaponStickyBomb = 746606563,
    WeaponMolotov = 768803961,
    VehicleWeaponSawnoffShotgun = 772217690,
    WeaponGrenadeLauncher = 779501861,
    WeaponMinigun = 792114228,
    WeaponSMG = 978070226,
    WeaponAPPistol = 996550793,
    Armour = 1274757841,
    WeaponRPG = 1295434569,
    AmmoBulletMP = 1426343849,
    MoneyWallet = 1575005502,
    WeaponGrenade = 1577485217,
    WeaponNightstick = 1587637620,
    VehicleWeaponSmokeGrenade = 1705498857,
    Parachute = 1735599485,
    WeaponHeavySniper = 1765114797,
    PortableCrateUnfixed = 1852930709,
    MoneyPaperBag = 1897726628,
    AmmoShotgun = 2012476125,
    WeaponStickyBomb = 2081529176
}

declare class PickupProperties {
    Amount: number;
    PickedUp: boolean;
    RespawnTime: number;
    CustomModel: number;
    constructor();
}

declare class PickupToWeapon {
    static Translate(pickup: number): number;
}

declare class PlayerDisconnect {
    Id: number;
    constructor();
}

declare class PlayerProperties {
    Props: number[];
    Textures: number[];
    BlipSprite: number;
    Team: number;
    BlipColor: number;
    BlipAlpha: number;
    Accessories: number[];
    Name: string;
    WeaponTints: number[];
    WeaponComponents: number[];
    NametagText: string;
    NametagSettings: number;
    constructor();
}

declare class PlayerSettings {
    DisplayName: string;
    MasterServerAddress: string;
    FavoriteServers: string[];
    RecentServers: string[];
    ScaleChatWithSafezone: boolean;
    SteamPowered: boolean;
    UpdateChannel: string;
    DisableRockstarEditor: boolean;
    // ScreenshotKey: System.Windows.Forms.Keys;
    CefFps: number;
    StartGameInOfflineMode: boolean;
    AutosetBorderlessWindowed: boolean;
    UseClassicChat: boolean;
    ChatboxXOffset: number;
    ChatboxYOffset: number;
    constructor();
}

declare class Quaternion {
    W: number;
    constructor();
    constructor(x: number, y: number, z: number, w: number);
    constructor(x: number, y: number, z: number, w: number);
    ToString(): string;
}

declare class ScriptCollection {
    ClientsideScripts: ClientsideScript[];
    constructor();
}

declare class ScriptEventTrigger {
    EventName: string;
    Arguments_: NativeArgument[];
    Resource: string;
    constructor();
}

declare enum ScriptVersion {
    Unknown = 0,
    VERSION_0_6 = 1,
    VERSION_0_6_1 = 2,
    VERSION_0_7 = 3,
    VERSION_0_8_1 = 4,
    VERSION_0_9 = 5
}

declare enum ServerEventType {
    PlayerTeamChange = 0,
    PlayerBlipColorChange = 1,
    PlayerBlipAlphaChange = 2,
    PlayerBlipSpriteChange = 3,
    PlayerSpectatorChange = 4,
    PlayerAnimationStart = 5,
    PlayerAnimationStop = 6,
    EntityDetachment = 7,
    WeaponPermissionChange = 8
}

declare class ServerMap {
    Objects: number[];
    Vehicles: number[];
    Blips: number[];
    Markers: number[];
    Pickups: number[];
    Players: number[];
    TextLabels: number[];
    Peds: number[];
    Particles: number[];
    World: WorldProperties;
    constructor();
}

declare class ServerSettings {
    Name: string;
    Port: number;
    MaxPlayers: number;
    MinimumClientVersion: string;
    AutoUpdateMinClientVersion: boolean;
    Announce: boolean;
    UseUPnP: boolean;
    AnnounceToLan: boolean;
    Password: string;
    MasterServer: string;
    Resources: ServerSettings_SettingsResFilepath[];
    UseACL: boolean;
    LogToFile: boolean;
    VehicleLagCompensation: boolean;
    OnFootLagCompensation: boolean;
    RefreshHz: number;
    LogLevel: number;
    UseHTTPServer: boolean;
    EnableClientsideEntityProperties: boolean;
    LocalAddress: string;
    whitelist: WhitelistCollection;
    constructor();
    static ReadSettings(path: string): ServerSettings;
    static WriteSettings(path: string, sett: ServerSettings): void;
}

declare class ServerSettings_SettingsResFilepath {
    Path: string;
    constructor();
}

declare class SharedSettings {
    VehicleLagCompensation: boolean;
    OnFootLagCompensation: boolean;
    ModWhitelist: string[];
    UseHttpServer: boolean;
    constructor();
}

declare class StringArgument {
    Data: string;
    constructor();
}

declare class SyncEvent {
    EventType: number;
    Arguments_: NativeArgument[];
    constructor();
}

declare enum SyncEventType {
    LandingGearChange = 0,
    DoorStateChange = 1,
    BooleanLights = 2,
    TrailerDeTach = 3,
    TireBurst = 4,
    RadioChange = 5,
    PickupPickedUp = 6,
    StickyBombDetonation = 7
}

declare class TextLabelProperties {
    Text: string;
    Red: number;
    Green: number;
    Blue: number;
    Size: number;
    Range: number;
    EntitySeethrough: boolean;
    constructor();
}

declare class UIntArgument {
    Data: number;
    constructor();
}

declare class UpdateEntity {
    NetHandle: number;
    EntityType: number;
    Properties: Delta_EntityProperties;
    constructor();
}

declare class Vector3 {
    X: number;
    Y: number;
    Z: number;
    Normalized: Vector3;
    constructor(x: number, y: number, z: number);
    constructor(x: number, y: number, z: number);
    constructor();
    static Lerp(start: Vector3, end: Vector3, n: number): Vector3;
    ToString(): string;
    LengthSquared(): number;
    Length(): number;
    Normalize(): void;
    Add(right: Vector3): Vector3;
    Subtract(right: Vector3): Vector3;
    Multiply(right: number): Vector3;
    Divide(right: number): Vector3;
    static RandomXY(): Vector3;
    Around(distance: number): Vector3;
    DistanceToSquared(right: Vector3): number;
    DistanceTo(right: Vector3): number;
    DistanceToSquared2D(right: Vector3): number;
    DistanceTo2D(right: Vector3): number;
}

declare class Vector3Argument {
    X: number;
    Y: number;
    Z: number;
    constructor();
}

declare class VehicleDamageModel {
    BrokenWindows: number;
    BrokenDoors: number;
    BrokenLights: number;
    constructor();
}

declare class VehicleData {
    Position: Vector3;
    //VehicleHandle?: number;
    VehicleHandle: number;
    //NetHandle?: number;
    NetHandle: number;
    //PedModelHash?: number;
    PedModelHash: number;
    //WeaponHash?: number;
    WeaponHash: number;
    Quaternion: Vector3;
    //VehicleSeat?: number;
    VehicleSeat: number;
    //VehicleHealth?: number;
    VehicleHealth: number;
    //PlayerHealth?: number;
    PlayerHealth: number;
    //Latency?: number;
    Latency: number;
    Velocity: Vector3;
    //PedArmor?: number;
    PedArmor: number;
    AimCoords: Vector3;
    //RPM?: number;
    RPM: number;
    //Flag?: number;
    Flag: number;
    //Steering?: number;
    Steering: number;
    Trailer: Vector3;
    DamageModel: VehicleDamageModel;
    constructor();
}

declare enum VehicleDataFlags {
    PressingHorn = 1,
    Shooting = 2,
    SirenActive = 4,
    VehicleDead = 8,
    Aiming = 16,
    Driver = 32,
    HasAimData = 64,
    BurnOut = 128,
    ExitingVehicle = 256,
    PlayerDead = 512
}

declare enum VehicleHash {
    Bagger = -2140431165,
    DockTrailer = -2140210194,
    Phantom = -2137348917,
    Dump = -2130482718,
    Blazer = -2128233223,
    Manana = -2124201592,
    Stunt = -2122757008,
    Faction = -2119578145,
    Avarus = -2115793025,
    Guardian = -2107990196,
    Rallytruck = -2103821244,
    Tug = -2100640717,
    StingerGT = -2098947590,
    Technical = -2096818938,
    Phoenix = -2095439403,
    Tractor2 = -2076478498,
    Coach = -2072933068,
    Mesa3 = -2064372143,
    Trailers3 = -2058878099,
    Mule3 = -2052737935,
    Italigtb = -2048333973,
    Rebel2 = -2045594037,
    Primo2 = -2040426790,
    Faction3 = -2039755226,
    Tornado4 = -2033222435,
    Cognoscenti = -2030171296,
    Comet3 = -2022483795,
    PBus = -2007026063,
    Feltzer2 = -1995326987,
    Boxville = -1987130134,
    Police4 = -1973172295,
    Stretch = -1961627517,
    Nightshade = -1943285540,
    RapidGT = -1934452204,
    Windsor2 = -1930048799,
    Asterope = -1903012613,
    Surge = -1894894188,
    Premier = -1883869285,
    Emperor2 = -1883002148,
    Insurgent = -1860900134,
    Volatus = -1845487887,
    Faggio = -1842748181,
    Pfister811 = -1829802492,
    Asea = -1809822327,
    Asea2 = -1807623979,
    Gauntlet = -1800170043,
    Tornado5 = -1797613329,
    Faction2 = -1790546981,
    PoliceOld2 = -1779120616,
    Rumpo2 = -1776615689,
    Granger = -1775728740,
    TVTrailer = -1770643266,
    Penetrator = -1758137366,
    Seven70 = -1757836725,
    Mammatus = -1746576111,
    GBurrito = -1745203402,
    Burrito3 = -1743316013,
    Rubble = -1705304628,
    Scrap = -1700801569,
    Bullet = -1696146015,
    SabreGT = -1685021548,
    Sheriff = -1683328900,
    Velum = -1673356438,
    Supervolito2 = -1671539132,
    Double = -1670998136,
    Dune = -1661854193,
    Mamba = -1660945322,
    Maverick = -1660661558,
    Radi = -1651067813,
    Phantom2 = -1649536104,
    FBI2 = -1647941228,
    ArmyTrailer2 = -1637149482,
    Police2 = -1627000575,
    Voltic = -1622444098,
    Nightblade = -1606187161,
    Valkyrie = -1600252419,
    Blazer5 = -1590337689,
    Trailers2 = -1579533167,
    Feltzer3 = -1566741232,
    Tornado6 = -1558399629,
    Gresley = -1543762099,
    PoliceOld1 = -1536924937,
    Manchez = -1523428744,
    Schafter3 = -1485523546,
    Brawler = -1479664699,
    Stanier = -1477580979,
    ArmyTrailer = -1476447243,
    Ninef2 = -1461482751,
    Sanchez2 = -1453280962,
    Prairie = -1450650718,
    Bodhi2 = -1435919434,
    Daemon2 = -1404136503,
    Zentorno = -1403128555,
    Kuruma = -1372848492,
    Chino2 = -1361687965,
    Vindicator = -1353081087,
    TRFlat = -1352468814,
    Wastlndr = -1349201652,
    Burrito = -1346687836,
    TowTruck = -1323100960,
    Surfer2 = -1311240698,
    Cheetah = -1311154784,
    Jester = -1297672541,
    Nimbus = -1295027632,
    EntityXF = -1291952903,
    Ingot = -1289722222,
    Faggio3 = -1289178744,
    Lazer = -1281684762,
    Blazer3 = -1269889662,
    Trash2 = -1255698084,
    Schafter2 = -1255452397,
    Emperor3 = -1241712818,
    Dubsta3 = -1237253773,
    TriBike2 = -1233807380,
    le7b = -1232836011,
    Adder = -1216765807,
    Shamal = -1214505995,
    Luxor2 = -1214293858,
    Rebel = -1207771834,
    ArmyTanker = -1207431159,
    Blade = -1205801634,
    Riot = -1205689942,
    Zion2 = -1193103848,
    Sandking = -1189015600,
    Issi2 = -1177863319,
    Primo = -1150599089,
    Fq2 = -1137532101,
    Dilettante = -1130810103,
    Minivan2 = -1126264336,
    Zion = -1122289213,
    Jester2 = -1106353882,
    RentalBus = -1098802077,
    Furoregt = -1089039904,
    Tampa2 = -1071380347,
    Submersible2 = -1066334226,
    Mule2 = -1050465301,
    Comet2 = -1045541610,
    Marquis = -1043459709,
    Banshee = -1041692462,
    Seashark = -1030275036,
    Buccaneer2 = -1013450936,
    Zombiea = -1009268949,
    Tailgater = -1008861746,
    Cutter = -1006919392,
    CableCar = -960289747,
    Taxi = -956048545,
    TipTruck2 = -947761570,
    Dominator2 = -915704871,
    PCJ = -909201658,
    Burrito2 = -907477130,
    Dodo = -901163259,
    Virgo2 = -899509638,
    Ruffian = -893578776,
    Bati2 = -891462355,
    Schafter5 = -888242983,
    Docktug = -884690486,
    Trailers = -877478386,
    Ripley = -845979911,
    Monster = -845961253,
    Fixter = -836512833,
    BType2 = -831834716,
    Dune4 = -827162039,
    Vigero = -825837129,
    Barracks = -823509173,
    Speedo = -810318068,
    Baller = -808831384,
    Patriot = -808457413,
    Cavalcade2 = -789894171,
    Mixer = -784816453,
    FreightTrailer = -777275802,
    Omnis = -777172681,
    Fcr2 = -757735410,
    Mesa2 = -748008636,
    Schwarzer = -746882698,
    Tanker = -730904777,
    Bus = -713569950,
    Emperor = -685276541,
    Buccaneer = -682211828,
    Raptor = -674927303,
    RatLoader = -667151410,
    Trophytruck2 = -663299102,
    Cuban800 = -644710429,
    Nemesis = -634879114,
    Massacro2 = -631760477,
    Jackal = -624529134,
    Wolfsbane = -618617997,
    Seashark2 = -616331036,
    Blimp2 = -613725916,
    Vortex = -609625092,
    Cognoscenti2 = -604842630,
    BType3 = -602287871,
    Sadler = -599568815,
    Blista3 = -591651781,
    F620 = -591610296,
    RatLoader2 = -589178377,
    Zombieb = -570033273,
    Elegy2 = -566387422,
    Caddy2 = -537896628,
    Oracle2 = -511601230,
    Virgo = -498054846,
    Predator = -488123221,
    Italigtb2 = -482719877,
    TowTruck2 = -442313018,
    Blazer4 = -440768424,
    Monroe = -433375717,
    Xls2 = -432008408,
    Panto = -431692672,
    Shotaro = -405626514,
    Stalion2 = -401643538,
    TriBike3 = -400295096,
    BaleTrailer = -399841706,
    Dubsta2 = -394074634,
    Felon = -391594584,
    Penumbra = -377465520,
    Bifta = -349601129,
    Blista = -344943009,
    Swift = -339587598,
    Dukes2 = -326143852,
    Dune5 = -312295511,
    Seashark3 = -311022263,
    Minivan = -310465116,
    Brickade = -305727417,
    Buffalo = -304802106,
    SultanRS = -295689028,
    Suntrap = -282946103,
    Hakuchou2 = -255678177,
    Diablous = -239841468,
    Boxville2 = -233098306,
    Ruiner = -227741703,
    Stockade3 = -214455498,
    Scorcher = -186537451,
    Innovation = -159126838,
    Blimp = -150975354,
    Massacro = -142942670,
    Vader = -140902153,
    Journey = -120287622,
    Pony = -119658072,
    Limo2 = -114627507,
    Bati = -114291515,
    Felon2 = -89291282,
    Savage = -82626025,
    Cargobob = -50547061,
    Blazer2 = -48031959,
    Policeb = -34623805,
    Bison = -16948145,
    Regina = -14495224,
    Exemplar = -5153954,
    Chimera = 6774487,
    CarbonRS = 11251904,
    Virgo3 = 16646064,
    Hotknife = 37348240,
    TipTruck = 48339065,
    Faggio2 = 55628203,
    Youga = 65402552,
    Glendale = 75131841,
    Ztype = 75889561,
    Dominator = 80636076,
    Bf400 = 86520421,
    Kalahari = 92612664,
    Trophytruck = 101905590,
    Coquette = 108773431,
    BType = 117401876,
    Boxville3 = 121658888,
    Baller2 = 142944341,
    Miljet = 165154707,
    FreightCar = 184361638,
    Elegy = 196747873,
    SabreGT2 = 223258115,
    Speeder = 231083307,
    Reaper = 234062309,
    Buffalo3 = 237764926,
    FreightCont2 = 240201337,
    Tempesta = 272929391,
    Dinghy2 = 276773164,
    Tropic = 290013743,
    GBurrito2 = 296357396,
    Hexer = 301427732,
    Crusader = 321739290,
    CogCabrio = 330661258,
    Vacca = 338562499,
    Gauntlet2 = 349315417,
    Chino = 349605904,
    Polmav = 353883353,
    PropTrailer = 356391690,
    CargoPlane = 368211810,
    Surano = 384071873,
    Cliffhanger = 390201602,
    RakeTrailer = 390902130,
    Squalo = 400514754,
    Turismor = 408192225,
    Kuruma2 = 410882957,
    Infernus = 418536135,
    Speeder2 = 437538602,
    Boxville4 = 444171386,
    Handler = 444583674,
    Cruiser = 448402357,
    PoliceT = 456714581,
    Tornado = 464687292,
    Lguard = 469291905,
    Baller5 = 470404958,
    Mixer2 = 475220373,
    Lynx = 482197771,
    Huntley = 486987393,
    Fusilade = 499169875,
    Dinghy3 = 509498602,
    UtilliTruck = 516990260,
    Voodoo2 = 523724515,
    BoatTrailer = 524108981,
    Moonbeam = 525509695,
    Dune2 = 534258863,
    Khamelion = 544021352,
    Packer = 569305213,
    TankerCar = 586013744,
    Luxor = 621481054,
    Romero = 627094268,
    Fcr = 627535535,
    Barracks3 = 630371791,
    Banshee2 = 633712403,
    Baller4 = 634118882,
    Lectro = 640818791,
    FreightGrain = 642617954,
    Baller6 = 666166960,
    Boxville5 = 682434785,
    Contender = 683047626,
    Surfer = 699456151,
    Cog552 = 704435172,
    Supervolito = 710198397,
    TrailerSmall = 712162987,
    Dukes = 723973206,
    Speedo2 = 728614474,
    SlamVan = 729783779,
    Sadler2 = 734217681,
    Buffalo2 = 736902334,
    Gargoyle = 741090084,
    Pranger = 741586030,
    Sovereign = 743478836,
    Frogger = 744705981,
    Buzzard2 = 745926877,
    Alpha = 767087018,
    Submersible = 771711535,
    Rhino = 782665360,
    Coquette3 = 784565758,
    Sanchez = 788045382,
    Buzzard = 788747387,
    Sheava = 819197656,
    Defiler = 822018448,
    SlamVan2 = 833469436,
    Annihilator = 837858166,
    Rhapsody = 841808271,
    BJXL = 850565707,
    Biff = 850991848,
    Jetmax = 861409633,
    Dinghy4 = 867467158,
    Sentinel2 = 873639469,
    Habanero = 884422927,
    Intruder = 886934177,
    UtilliTruck2 = 887537515,
    Burrito4 = 893081117,
    Mule = 904750859,
    Cog55 = 906642318,
    Toro2 = 908897389,
    Mesa = 914654722,
    FreightCont1 = 920453016,
    Ruiner2 = 941494461,
    Casco = 941800958,
    Pony2 = 943752001,
    Duster = 970356638,
    Hydra = 970385471,
    Sultan = 970598228,
    Tampa = 972671128,
    Voltic2 = 989294410,
    Sandking2 = 989381445,
    Coquette2 = 1011753235,
    GrainTrailer = 1019737494,
    Youga2 = 1026149675,
    Freight = 1030400667,
    Ninef = 1032823388,
    Dinghy = 1033245328,
    Nero = 1034187331,
    Blista2 = 1039032026,
    Skylift = 1044954915,
    JB700 = 1051415893,
    Jet = 1058115860,
    BobcatXL = 1069929536,
    Toro = 1070967343,
    Barracks2 = 1074326203,
    Specter2 = 1074745671,
    Swift2 = 1075432268,
    Velum2 = 1077420264,
    Pigalle = 1078682497,
    Nero2 = 1093792632,
    Verlierer2 = 1102544804,
    SlamVan3 = 1119641113,
    Superd = 1123216662,
    BfInjection = 1126868326,
    FBI = 1127131465,
    TriBike = 1127861609,
    Bmx = 1131912276,
    Burrito5 = 1132262048,
    Caddy = 1147287684,
    Rumpo = 1162065741,
    Ambulance = 1171614426,
    Dubsta = 1177543287,
    Technical2 = 1180875963,
    Xls = 1203490606,
    Seminole = 1221512915,
    Marshall = 1233534620,
    Hakuchou = 1265391242,
    Landstalker = 1269098716,
    Bestiagts = 1274868363,
    Airbus = 1283517198,
    Serrano = 1337041428,
    Vestra = 1341619767,
    Oracle = 1348744438,
    Sentinel = 1349725314,
    Flatbed = 1353720154,
    Warrener = 1373123368,
    Cargobob3 = 1394036463,
    Fmj = 1426219628,
    Tractor3 = 1445631933,
    Tropic2 = 1448677353,
    Rumpo3 = 1475773103,
    Paradise = 1488164764,
    Schafter4 = 1489967196,
    Sanctus = 1491277511,
    Forklift = 1491375716,
    Picador = 1507916787,
    Hauler = 1518533038,
    Tornado2 = 1531094468,
    Valkyrie2 = 1543134283,
    Stinger = 1545842587,
    Brioso = 1549126457,
    Airtug = 1560980623,
    Windsor = 1581459400,
    Cargobob2 = 1621617168,
    Tractor = 1641462412,
    RancherXL = 1645267888,
    T20 = 1663218586,
    Akuma = 1672195559,
    Dilettante2 = 1682114128,
    Stratum = 1723137093,
    RapidGT2 = 1737773231,
    Bison3 = 1739845664,
    Stockade = 1747439474,
    Enduro = 1753414259,
    Tornado3 = 1762279763,
    DLoader = 1770332643,
    Washington = 1777363799,
    Mower = 1783355638,
    TR3 = 1784254509,
    Diablous2 = 1790834270,
    Besra = 1824333165,
    Peyote = 1830407356,
    Thrust = 1836027715,
    Ratbike = 1873600305,
    Camper = 1876516712,
    Baller3 = 1878062887,
    Specter = 1886268224,
    Bulldozer = 1886712733,
    Tropos = 1887331236,
    Moonbeam2 = 1896491931,
    Fugitive = 1909141499,
    Police3 = 1912215274,
    Trash = 1917016601,
    Schafter6 = 1922255844,
    Sheriff2 = 1922257928,
    Stalion = 1923400478,
    RancherXL2 = 1933662059,
    FireTruck = 1938952078,
    Tourbus = 1941029835,
    Frogger2 = 1949211328,
    Taco = 1951180813,
    Tanker2 = 1956216962,
    Titan = 1981688531,
    Osiris = 1987142870,
    Daemon = 2006142190,
    Voodoo = 2006667053,
    Cavalcade = 2006918058,
    TrailerLogs = 2016027501,
    Futo = 2016857647,
    Cargobob4 = 2025593404,
    Esskey = 2035069708,
    Police = 2046537925,
    Benson = 2053223216,
    Tyrus = 2067820283,
    Lurcher = 2068293287,
    Insurgent2 = 2071877360,
    Bison2 = 2072156101,
    Carbonizzare = 2072687711,
    TR2 = 2078290630,
    TR4 = 2091594960,
    Pounder = 2112052861,
    Prototipo = 2123327359,
    UtilliTruck3 = 2132890591,
    Rocoto = 2136773105
}

declare class VehicleProperties {
    PrimaryColor: number;
    SecondaryColor: number;
    Health: number;
    IsDead: boolean;
    Mods: number[];
    Siren: boolean;
    Doors: number;
    Trailer: number;
    Tires: number;
    Livery: number;
    NumberPlate: string;
    VehicleComponents: number;
    TraileredBy: number;
    DamageModel: VehicleDamageModel;
    constructor();
}

declare class VersionCompatibility {
    LastCompatibleClientVersion: ParseableVersion;
    LastCompatibleServerVersion: ParseableVersion;
}

declare enum WeaponHash {
    CarbineRifle = -2084633992,
    Crowbar = -2067956739,
    Flashlight = -1951375401,
    Dagger = -1834847097,
    Grenade = -1813897027,
    Poolcue = -1810795771,
    Bat = -1786099057,
    Pistol50 = -1716589765,
    Knife = -1716189206,
    MG = -1660422300,
    BullpupShotgun = -1654528753,
    BZGas = -1600701090,
    Unarmed = -1569615261,
    GrenadeLauncher = -1568386805,
    Musket = -1466123874,
    ProximityMine = -1420407917,
    AdvancedRifle = -1357824103,
    RPG = -1312131151,
    Pipebomb = -1169823560,
    MiniSMG = -1121678507,
    SNSPistol = -1076751822,
    AssaultRifle = -1074790547,
    SpecialCarbine = -1063057011,
    Revolver = -1045183535,
    MarksmanRifle = -952879014,
    Battleaxe = -853065399,
    HeavyPistol = -771403250,
    KnuckleDuster = -656458692,
    MachinePistol = -619010992,
    MarksmanPistol = -598887786,
    Machete = -581044007,
    SwitchBlade = -538741184,
    AssaultShotgun = -494615257,
    DoubleBarrelShotgun = -275439685,
    AssaultSMG = -270015777,
    Hatchet = -102973651,
    Bottle = -102323637,
    Parachute = -72657034,
    SmokeGrenade = -37975472,
    SniperRifle = 100416529,
    FireExtinguisher = 101631238,
    CompactLauncher = 125959754,
    Snowball = 126349499,
    VintagePistol = 137902532,
    CombatPDW = 171789620,
    HeavySniper = 205991906,
    Autoshotgun = 317205821,
    MicroSMG = 324215364,
    Wrench = 419712736,
    Pistol = 453432689,
    PumpShotgun = 487013001,
    APPistol = 584646201,
    Ball = 600439132,
    Molotov = 615608432,
    SMG = 736523883,
    StickyBomb = 741814745,
    PetrolCan = 883325847,
    StunGun = 911657153,
    HeavyShotgun = 984333226,
    Minigun = 1119849093,
    Golfclub = 1141786504,
    FlareGun = 1198879012,
    Flare = 1233104067,
    GrenadeLauncherSmoke = 1305664598,
    Hammer = 1317494643,
    CombatPistol = 1593441988,
    Gusenberg = 1627465347,
    CompactRifle = 1649403952,
    HomingLauncher = 1672152130,
    Nightstick = 1737195953,
    Railgun = 1834241177,
    SawnoffShotgun = 2017895192,
    BullpupRifle = 2132975508,
    Firework = 2138347493,
    CombatMG = 2144741730
}

declare class WhitelistCollection {
    Items: WhitelistItem[];
    constructor();
}

declare class WhitelistItem {
    Hash: string;
    constructor();
}

declare class WorldProperties {
    Hours: number;
    Minutes: number;
    Weather: number;
    LoadedIpl: string[];
    RemovedIpl: string[];
    constructor();
}