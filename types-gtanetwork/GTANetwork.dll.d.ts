//****************************************************************
//  Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       v0.1.5081.42854 - SHA1:66c203d - Debug
//  Date:          12/28/2016 8:14:59 PM
//
//  Assemblies:
//    GTANetwork.dll
//
//****************************************************************



declare module GTANetwork.GUI {

    export interface Browser {
        Headless: boolean;
        Position: System.Drawing.Point;
        Pinned: System.Drawing.PointF[];
        Size: System.Drawing.Size;
    }

    export interface BrowserJavascriptCallback {
    }

    export interface CefController {
        _lastMousePoint: System.Drawing.PointF;
        GameFPS: number;
        ShowCursor: boolean;
    }

    export interface Chat extends GTANetwork.GUI.IChat {
        HasInitialized: boolean;
        IsFocused: boolean;
        CurrentInput: string;
    }

    export interface ChatThread {
    }

    export interface ClassicChat extends GTANetwork.GUI.IChat {
        HasInitialized: boolean;
        MAX_CHAT_MESSAGE: number;
        IsFocused: boolean;
        CurrentInput: string;
    }

    export interface IChat {
        IsFocused: boolean;
        CurrentInput: string;
    }

    export interface SecureCefResourceHandler {
        DefaultMimeType: string;
        FilePath: string;
        MimeType: string;
        Stream: any; // System.IO.Stream
        StatusCode: number;
        StatusText: string;
        ResponseLength?: number;
        Headers: any; // System.Collections.Specialized.NameValueCollection
        AutoDisposeStream: boolean;
        ErrorCode?: any; // Xilium.CefGlue.CefErrorCode
    }

    export interface TabButton {
        Visible: boolean;
        Focused: boolean;
        Active: boolean;
        Text: string;
        Position: System.Drawing.Point;
        Size: System.Drawing.Size;
        JustOpened: boolean;
        Hovered: boolean;
    }

    export interface TabButtonArrayItem {
        Buttons: GTANetwork.GUI.TabButton[];
        Visible: boolean;
        Index: number;
    }

    export interface TabMapItem {
        MAP_PATH: string;
        BLIP_PATH: string;
        Position: System.Drawing.PointF;
        Focused: boolean;
    }

    export interface TabWelcomeMessageItem {
        PromoPicturePath: string;
    }

    export interface V8Array {
        Item: any;
        length: number;
    }

    export interface V8Helper {
    }

    export interface Warning {
        Header: string;
        Message: string;
        Visible: boolean;
        Error: boolean;
        OnAccept: any; // System.Action
    }

}
declare module GTANetwork.GUI.DirectXHook.Hook.Common {

    export interface Element extends GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement {
        Hidden: boolean;
    }

    export interface ImageElement {
        Dirty: boolean;
        SwitchLock: any;
        Bitmap: System.Drawing.Bitmap;
        Tint: System.Drawing.Color;
        Location: System.Drawing.Point;
        Angle: number;
        Scale: number;
        Filename: string;
        Image: GTANetwork.GUI.DirectXHook.Hook.DX11.DXImage;
        NextBitmap: System.Drawing.Bitmap;
    }

    export interface IOverlay extends GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement {
        Elements: GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement[];
    }

    export interface IOverlayElement {
        Hidden: boolean;
    }

    export interface Overlay extends GTANetwork.GUI.DirectXHook.Hook.Common.IOverlay, GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement {
        Elements: GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement[];
        Hidden: boolean;
    }

    export interface TextElement {
        Text: string;
        Font: System.Drawing.Font;
        Color: System.Drawing.Color;
        Location: System.Drawing.Point;
        AntiAliased: boolean;
    }

}
declare module GTANetwork.GUI.DirectXHook.Hook {

    export interface D10Text {
        Text: string;
        FontDescription: any; // SharpDX.Direct3D10.FontDescription
        Position: any; // SharpDX.Vector2
        Color: any; // SharpDX.Color4
    }

    export interface Hook {
        FuncToHook: number;
        NewFunc: any; // System.Delegate
        Owner: any;
        LocalHook: any; // EasyHook.LocalHook
        IsActive: boolean;
    }

    // export interface Hook<T> {
    //     Original: T;
    // }

    export interface IDXHook {
    }

    export interface SafeHGlobal {
        IsInvalid: boolean;
    }

}
declare module GTANetwork.GUI.DirectXHook.Hook.DX11 {

    export interface ContextState {
    }

    export interface DeviceManager {
        Direct3DDevice: any; // SharpDX.Direct3D11.Device
        Direct3DContext: any; // SharpDX.Direct3D11.DeviceContext
    }

    export interface DXFont {
    }

    export interface DXImage {
        Width: number;
        Height: number;
        Device: any; // SharpDX.Direct3D11.Device
    }

    export interface DXSprite {
    }

    export interface RendererBase {
        World: any; // SharpDX.Matrix
        DeviceManager: GTANetwork.GUI.DirectXHook.Hook.DX11.DeviceManager;
        Show: boolean;
    }

    export interface ScreenAlignedQuadRenderer {
        UseLinearSampling: boolean;
        ShaderResource: any; // SharpDX.Direct3D11.ShaderResourceView
        RenderTargetView: any; // SharpDX.Direct3D11.RenderTargetView
        RenderTarget: any; // SharpDX.Direct3D11.Texture2D
    }

}
declare module GTANetwork.GUI.DirectXHook {

    export interface InjectionFailedException {
    }

    export interface ProcessAlreadyHookedException {
    }

    export interface ProcessHasNoWindowHandleException {
    }

    export interface SwapchainHooker {
    }

}
declare module GTANetwork.GUI.Extern {

    export interface FastBitmap {
        Width: number;
        Height: number;
        CompositingMode: System.Drawing.Drawing2D.CompositingMode;
    }

    export interface QuadDistort {
    }

    export interface RGBColor {
        Transparent: GTANetwork.GUI.Extern.RGBColor;
        Black: GTANetwork.GUI.Extern.RGBColor;
        White: GTANetwork.GUI.Extern.RGBColor;
        Red: GTANetwork.GUI.Extern.RGBColor;
        Green: GTANetwork.GUI.Extern.RGBColor;
        Blue: GTANetwork.GUI.Extern.RGBColor;
        Yellow: GTANetwork.GUI.Extern.RGBColor;
        Magenta: GTANetwork.GUI.Extern.RGBColor;
        Cyan: GTANetwork.GUI.Extern.RGBColor;
        Grey: GTANetwork.GUI.Extern.RGBColor;
        Argb: number;
        B: number;
        G: number;
        R: number;
        A: number;
    }

}
declare module GTANetwork.Javascript {

    export interface BooleanEvent {
    }

    export interface CameraManager {
    }

    export interface ClientResourceSettings {
        Settings: string[];
    }

    export interface GlobalCamera {
        Position: Vector3;
        Rotation: Vector3;
        EntityPointing: number;
        BonePointing: number;
        PointOffset: Vector3;
        VectorPointing: Vector3;
        EntityAttached: number;
        BoneAttached: number;
        AttachOffset: Vector3;
        Shake: string;
        ShakeAmp: number;
        Fov: number;
        Active: boolean;
        CamObj: any; // GTA.Camera
    }

    export interface IntegerEvent {
    }

    export interface JavascriptChat extends GTANetwork.GUI.IChat {
        SanitationLevel: number;
        IsFocused: boolean;
        CurrentInput: string;
    }

    export interface JavascriptHook {
        MousePosition: System.Drawing.PointF;
        MouseClick: boolean;
        TextElements: any; // NativeUI.UIResText[]
        AudioDevice: any; // NAudio.Wave.WaveOutEvent
        AudioReader: any; // NAudio.Wave.WaveStream
        Exported: any; // System.Dynamic.ExpandoObject
    }

    export interface LoopStream {
        EnableLooping: boolean;
        WaveFormat: any; // NAudio.Wave.WaveFormat
        Length: number;
        Position: number;
    }

    export interface MessageEvent {
    }

    enum ScriptContext_ReturnType {
        Int,
        UInt,
        Long,
        ULong,
        String,
        Vector3,
        Vector2,
        Float,
        Bool,
        Handle
    }

    export interface ScriptContext_Raycast {
        didHitAnything: boolean;
        didHitEntity: boolean;
        hitEntity: GTANetwork.Util.LocalHandle;
        hitCoords: Vector3;
    }

    export interface ScriptContext_fArg {
        Value: number;
    }

    export interface ScriptContext_ServerEventTrigger {
    }

    export interface ScriptContext_ChatEvent {
    }

    export interface ScriptContext_StreamEvent {
    }

    export interface ScriptContext_DataChangedEvent {
    }

    export interface ScriptContext_CustomDataReceived {
    }

    export interface ScriptContext_EmptyEvent {
    }

    export interface ScriptContext_EntityEvent {
    }

    export interface ScriptContext_PlayerKilledEvent {
    }

    export interface ScriptContext_IntChangeEvent {
    }

    export interface ScriptContext_BoolChangeEvent {
    }

    export interface ScriptContext_PlayerDamageEvent {
    }

    export interface ScriptContext_PlayerMeleeDamageEvent {
    }

    export interface ScriptContext_WeaponShootEvent {
    }

    enum StringSanitation {
        None,
        Javascript,
        Html,
        All
    }

    export interface xmlElement {
        name: string;
    }

    export interface XmlGroup {
    }

    export interface ScriptContext {
        startCoroutine(target: any): void;
        showCursor(show: boolean): void;
        isCursorShown(): boolean;
        setSetting(name: string, value: any): void;
        getSetting(name: string): any;
        doesSettingExist(name: string): boolean;
        removeSetting(name: string): void;
        registerChatOverride(): GTANetwork.Javascript.JavascriptChat;
        createCamera(position: Vector3, rotation: Vector3): GTANetwork.Javascript.GlobalCamera;
        setActiveCamera(camera: GTANetwork.Javascript.GlobalCamera): void;
        setGameplayCameraActive(): void;
        getActiveCamera(): GTANetwork.Javascript.GlobalCamera;
        setCameraShake(cam: GTANetwork.Javascript.GlobalCamera, shakeType: string, amplitute: number): void;
        stopCameraShake(cam: GTANetwork.Javascript.GlobalCamera): void;
        isCameraShaking(cam: GTANetwork.Javascript.GlobalCamera): boolean;
        setCameraPosition(cam: GTANetwork.Javascript.GlobalCamera, pos: Vector3): void;
        getCameraPosition(cam: GTANetwork.Javascript.GlobalCamera): Vector3;
        setCameraRotation(cam: GTANetwork.Javascript.GlobalCamera, rotation: Vector3): void;
        getCameraRotation(cam: GTANetwork.Javascript.GlobalCamera): Vector3;
        setCameraFov(cam: GTANetwork.Javascript.GlobalCamera, fov: number): void;
        getCameraFov(cam: GTANetwork.Javascript.GlobalCamera): number;
        pointCameraAtPosition(cam: GTANetwork.Javascript.GlobalCamera, pos: Vector3): void;
        pointCameraAtEntity(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, offset: Vector3): void;
        pointCameraAtEntityBone(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, bone: number, offset: Vector3): void;
        stopCameraPointing(cam: GTANetwork.Javascript.GlobalCamera): void;
        attachCameraToEntity(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, offset: Vector3): void;
        attachCameraToEntityBone(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, bone: number, offset: Vector3): void;
        detachCamera(cam: GTANetwork.Javascript.GlobalCamera): void;
        interpolateCameras(from: GTANetwork.Javascript.GlobalCamera, to: GTANetwork.Javascript.GlobalCamera, duration: number, easepos: boolean, easerot: boolean): void;
        getCursorPosition(): System.Drawing.PointF;
        getCursorPositionMantainRatio(): System.Drawing.PointF;
        worldToScreen(pos: Vector3): System.Drawing.PointF;
        worldToScreenMantainRatio(pos: Vector3): System.Drawing.PointF;
        getCurrentResourceName(): string;
        screenToWorld(pos: System.Drawing.PointF): Vector3;
        screenToWorldMantainRatio(pos: System.Drawing.PointF): Vector3;
        screenToWorld(pos: System.Drawing.PointF, camPos: Vector3, camRot: Vector3): Vector3;
        screenToWorldMantainRatio(pos: System.Drawing.PointF, camPos: Vector3, camrot: Vector3): Vector3;
        createRaycast(start: Vector3, end: Vector3, flag: number, ignoreEntity?: GTANetwork.Util.LocalHandle): GTANetwork.Javascript.ScriptContext_Raycast;
        getGameplayCamPos(): Vector3;
        getGameplayCamRot(): Vector3;
        getGameplayCamDir(): Vector3;
        setCanOpenChat(show: boolean): void;
        getCanOpenChat(): boolean;
        setDisplayWastedShard(show: boolean): void;
        getDisplayWastedShard(): boolean;
        createCefBrowser(width: number, height: number, local: boolean): GTANetwork.GUI.Browser;
        destroyCefBrowser(browser: GTANetwork.GUI.Browser): void;
        isCefBrowserInitialized(browser: GTANetwork.GUI.Browser): boolean;
        waitUntilCefBrowserInit(browser: GTANetwork.GUI.Browser): void;
        setCefBrowserSize(browser: GTANetwork.GUI.Browser, width: number, height: number): void;
        getCefBrowserSize(browser: GTANetwork.GUI.Browser): System.Drawing.Size;
        setCefBrowserHeadless(browser: GTANetwork.GUI.Browser, headless: boolean): void;
        getCefBrowserHeadless(browser: GTANetwork.GUI.Browser): boolean;
        setCefBrowserPosition(browser: GTANetwork.GUI.Browser, xPos: number, yPos: number): void;
        getCefBrowserPosition(browser: GTANetwork.GUI.Browser): System.Drawing.Point;
        pinCefBrowser(browser: GTANetwork.GUI.Browser, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
        clearCefPinning(browser: GTANetwork.GUI.Browser): void;
        verifyIntegrityOfCache(): void;
        loadPageCefBrowser(browser: GTANetwork.GUI.Browser, uri: string): void;
        loadHtmlCefBrowser(browser: GTANetwork.GUI.Browser, html: string): void;
        isCefBrowserLoading(browser: GTANetwork.GUI.Browser): boolean;
        callNative(hash: string, ...args: any[]): void;
        returnNative(hash: string, returnType: number, ...args: any[]): any;
        setUiColor(r: number, g: number, b: number): void;
        getHashKey(input: string): number;
        setEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string, data: any): boolean;
        resetEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string): void;
        hasEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string): boolean;
        getEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string): any;
        setWorldSyncedData(key: string, data: any): boolean;
        resetWorldSyncedData(key: string): void;
        hasWorldSyncedData(key: string): boolean;
        getWorldSyncedData(key: string): any;
        getGamePlayer(): number;
        getLocalPlayer(): GTANetwork.Util.LocalHandle;
        getEntityPosition(entity: GTANetwork.Util.LocalHandle): Vector3;
        getEntityRotation(entity: GTANetwork.Util.LocalHandle): Vector3;
        getEntityVelocity(entity: GTANetwork.Util.LocalHandle): Vector3;
        getVehicleHealth(entity: GTANetwork.Util.LocalHandle): number;
        getVehicleRPM(entity: GTANetwork.Util.LocalHandle): number;
        isPlayerInAnyVehicle(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerOnFire(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerParachuting(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerInFreefall(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerAiming(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerShooting(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerReloading(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerInCover(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerOnLadder(player: GTANetwork.Util.LocalHandle): boolean;
        getPlayerAimingPoint(player: GTANetwork.Util.LocalHandle): Vector3;
        isPlayerDead(player: GTANetwork.Util.LocalHandle): boolean;
        doesEntityExist(entity: GTANetwork.Util.LocalHandle): boolean;
        setEntityInvincible(entity: GTANetwork.Util.LocalHandle, invincible: boolean): void;
        getEntityInvincible(entity: GTANetwork.Util.LocalHandle): boolean;
        getLocalPlayerInvincible(): boolean;
        createParticleEffectOnPosition(ptfxLibrary: string, ptfxName: string, position: Vector3, rotation: Vector3, scale: number): void;
        createParticleEffectOnEntity(ptfxLibrary: string, ptfxName: string, entity: GTANetwork.Util.LocalHandle, offset: Vector3, rotation: Vector3, scale: number, boneIndex: number): void;
        createExplosion(explosionType: number, position: Vector3, damageScale: number): void;
        createOwnedExplosion(owner: GTANetwork.Util.LocalHandle, explosionType: number, position: Vector3, damageScale: number): void;
        createProjectile(weapon: number, start: Vector3, target: Vector3, damage: number, speed: number, dimension: number): void;
        createOwnedProjectile(owner: GTANetwork.Util.LocalHandle, weapon: number, start: Vector3, target: Vector3, damage: number, speed: number, dimension: number): void;
        setVehicleLivery(vehicle: GTANetwork.Util.LocalHandle, livery: number): void;
        getVehicleLivery(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleLocked(vehicle: GTANetwork.Util.LocalHandle, locked: boolean): void;
        getVehicleLocked(vehicle: GTANetwork.Util.LocalHandle): boolean;
        getVehicleTrailer(vehicle: GTANetwork.Util.LocalHandle): GTANetwork.Util.LocalHandle;
        getVehicleTraileredBy(vehicle: GTANetwork.Util.LocalHandle): GTANetwork.Util.LocalHandle;
        getVehicleSirenState(vehicle: GTANetwork.Util.LocalHandle): boolean;
        isVehicleTyrePopped(vehicle: GTANetwork.Util.LocalHandle, tyre: number): boolean;
        popVehicleTyre(vehicle: GTANetwork.Util.LocalHandle, tyre: number, pop: boolean): void;
        isVehicleDoorBroken(vehicle: GTANetwork.Util.LocalHandle, door: number): boolean;
        setVehicleDoorState(vehicle: GTANetwork.Util.LocalHandle, door: number, open: boolean): void;
        getVehicleDoorState(vehicle: GTANetwork.Util.LocalHandle, door: number): boolean;
        breakVehicleTyre(vehicle: GTANetwork.Util.LocalHandle, door: number, breakDoor: boolean): void;
        isVehicleWindowBroken(vehicle: GTANetwork.Util.LocalHandle, window: number): boolean;
        breakVehicleWindow(vehicle: GTANetwork.Util.LocalHandle, window: number, breakWindow: boolean): void;
        setVehicleExtra(vehicle: GTANetwork.Util.LocalHandle, slot: number, enabled: boolean): void;
        getVehicleExtra(vehicle: GTANetwork.Util.LocalHandle, slot: number): boolean;
        setVehicleNumberPlate(vehicle: GTANetwork.Util.LocalHandle, plate: string): void;
        getVehicleNumberPlate(vehicle: GTANetwork.Util.LocalHandle): string;
        setVehicleEngineStatus(vehicle: GTANetwork.Util.LocalHandle, turnedOn: boolean): void;
        getEngineStatus(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setVehicleSpecialLightStatus(vehicle: GTANetwork.Util.LocalHandle, status: boolean): void;
        getVehicleSpecialLightStatus(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setEntityCollissionless(entity: GTANetwork.Util.LocalHandle, status: boolean): void;
        getEntityCollisionless(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setVehicleMod(vehicle: GTANetwork.Util.LocalHandle, slot: number, modType: number): void;
        getVehicleMod(vehicle: GTANetwork.Util.LocalHandle, slot: number): number;
        removeVehicleMod(vehicle: GTANetwork.Util.LocalHandle, slot: number): void;
        setVehicleBulletproofTyres(vehicle: GTANetwork.Util.LocalHandle, bulletproof: boolean): void;
        getVehicleBulletproofTyres(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setVehicleNumberPlateStyle(vehicle: GTANetwork.Util.LocalHandle, style: number): void;
        getVehicleNumberPlateStyle(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehiclePearlescentColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        getVehiclePearlescentColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleWheelColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        getVehicleWheelColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleWheelType(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleWheelType(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleModColor1(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleModColor2(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleTyreSmokeColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleWindowTint(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleWindowTint(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleEnginePowerMultiplier(vehicle: GTANetwork.Util.LocalHandle, mult: number): void;
        getVehicleEnginePowerMultiplier(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleEngineTorqueMultiplier(vehicle: GTANetwork.Util.LocalHandle, mult: number): void;
        getVehicleEngineTorqueMultiplier(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleNeonState(vehicle: GTANetwork.Util.LocalHandle, slot: number, turnedOn: boolean): void;
        getVehicleNeonState(vehicle: GTANetwork.Util.LocalHandle, slot: number): boolean;
        setVehicleNeonColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleDashboardColor(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleDashboardColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleTrimColor(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleTrimColor(vehicle: GTANetwork.Util.LocalHandle): number;
        getVehicleDisplayName(model: number): string;
        getVehicleMaxSpeed(model: number): number;
        getVehicleMaxBraking(model: number): number;
        getVehicleMaxTraction(model: number): number;
        getVehicleMaxAcceleration(model: number): number;
        getVehicleMaxOccupants(model: number): number;
        getVehicleClass(model: number): number;
        detonatePlayerStickies(): void;
        setPlayerNametag(player: GTANetwork.Util.LocalHandle, text: string): void;
        resetPlayerNametag(player: GTANetwork.Util.LocalHandle): void;
        setPlayerNametagVisible(player: GTANetwork.Util.LocalHandle, show: boolean): void;
        getPlayerNametagVisible(player: GTANetwork.Util.LocalHandle): boolean;
        setPlayerNametagColor(player: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        resetPlayerNametagColor(player: GTANetwork.Util.LocalHandle): void;
        setPlayerSkin(model: number): void;
        setPlayerDefaultClothes(): void;
        setPlayerTeam(team: number): void;
        getPlayerTeam(): number;
        playPlayerScenario(name: string): void;
        playPlayerAnimation(animDict: string, animName: string, flag: number, duration: number): void;
        stopPlayerAnimation(): void;
        setVehiclePrimaryColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        setVehicleSecondaryColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        setVehicleCustomPrimaryColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleCustomSecondaryColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        getVehicleCustomPrimaryColor(vehicle: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        getVehicleCustomSecondaryColor(vehicle: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        getVehiclePrimaryColor(vehicle: GTANetwork.Util.LocalHandle): number;
        getVehicleSecondaryColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setPlayerClothes(player: GTANetwork.Util.LocalHandle, slot: number, drawable: number, texture: number): void;
        setPlayerAccessory(player: GTANetwork.Util.LocalHandle, slot: number, drawable: number, texture: number): void;
        clearPlayerAccessory(player: GTANetwork.Util.LocalHandle, slot: number): void;
        vehicleNameToModel(modelName: string): number;
        pedNameToModel(modelName: string): number;
        pickupNameToModel(modelName: string): number;
        weaponNameToModel(modelName: string): number;
        loadInterior(pos: Vector3): void;
        clearPlayerTasks(): void;
        setEntityPositionFrozen(entity: GTANetwork.Util.LocalHandle, frozen: boolean): void;
        setEntityVelocity(entity: GTANetwork.Util.LocalHandle, velocity: Vector3): void;
        getPlayerVehicleSeat(player: GTANetwork.Util.LocalHandle): number;
        setPlayerWeaponTint(weapon: number, tint: number): void;
        getPlayerWeaponTint(weapon: number): number;
        givePlayerWeaponComponent(weapon: number, component: number): void;
        removePlayerWeaponComponent(weapon: number, component: number): void;
        hasPlayerWeaponComponent(weapon: number, component: number): boolean;
        //getAllWeaponComponents(weapon: WeaponHash): GTA.WeaponComponent[];
        getPlayerCurrentWeapon(): number;
        disconnect(reason: string): void;
        setEntityPosition(ent: GTANetwork.Util.LocalHandle, pos: Vector3): void;
        setEntityRotation(ent: GTANetwork.Util.LocalHandle, rot: Vector3): void;
        setPlayerIntoVehicle(vehicle: GTANetwork.Util.LocalHandle, seat: number): void;
        setPlayerHealth(health: number): void;
        getPlayerHealth(player: GTANetwork.Util.LocalHandle): number;
        setTextLabelText(label: GTANetwork.Util.LocalHandle, text: string): void;
        setTextLabelColor(textLabel: GTANetwork.Util.LocalHandle, alpha: number, r: number, g: number, b: number): void;
        getTextLabelColor(textLabel: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        setTextLabelSeethrough(handle: GTANetwork.Util.LocalHandle, seethrough: boolean): void;
        getTextLabelSeethrough(handle: GTANetwork.Util.LocalHandle): boolean;
        getOffsetInWorldCoords(entity: GTANetwork.Util.LocalHandle, offset: Vector3): Vector3;
        getOffsetFromWorldCoords(entity: GTANetwork.Util.LocalHandle, pos: Vector3): Vector3;
        drawLine(start: Vector3, end: Vector3, a: number, r: number, g: number, b: number): void;
        playSoundFrontEnd(audioLib: string, audioName: string): void;
        showShard(text: string, timeout: number): void;
        showColorShard(text: string, description: string, color1: number, color2: number, time: number): void;
        showWeaponPurchasedShard(text: string, weaponName: string, weapon: number, time: number): void;
        loadConfig(config: string): GTANetwork.Javascript.XmlGroup;
        fromJson(json: string): any;
        toJson(data: any): string;
        getScreenResolutionMantainRatio(): System.Drawing.SizeF;
        sendChatMessage(sender: string, text: string): void;
        sendChatMessage(text: string): void;
        getScreenResolution(): System.Drawing.Size;
        sendNotification(text: string): void;
        displaySubtitle(text: string): void;
        displaySubtitle(text: string, duration: number): void;
        formatTime(ms: number, format: string): string;
        setPlayerInvincible(invinc: boolean): void;
        setPlayerWantedLevel(wantedLevel: number): void;
        getPlayerWantedLevel(): number;
        getPlayerInvincible(): boolean;
        setPlayerArmor(armor: number): void;
        getPlayerArmor(player: GTANetwork.Util.LocalHandle): number;
        getStreamedPlayers(): GTANetwork.Util.LocalHandle[];
        getStreamedVehicles(): GTANetwork.Util.LocalHandle[];
        getStreamedObjects(): GTANetwork.Util.LocalHandle[];
        getStreamedPickups(): GTANetwork.Util.LocalHandle[];
        getStreamedPeds(): GTANetwork.Util.LocalHandle[];
        getStreamedMarkers(): GTANetwork.Util.LocalHandle[];
        getStreamedTextLabels(): GTANetwork.Util.LocalHandle[];
        getAllPlayers(): GTANetwork.Util.LocalHandle[];
        getAllVehicles(): GTANetwork.Util.LocalHandle[];
        getAllObjects(): GTANetwork.Util.LocalHandle[];
        getAllPickups(): GTANetwork.Util.LocalHandle[];
        getAllPeds(): GTANetwork.Util.LocalHandle[];
        getAllMarkers(): GTANetwork.Util.LocalHandle[];
        getAllTextLabels(): GTANetwork.Util.LocalHandle[];
        getPlayerVehicle(player: GTANetwork.Util.LocalHandle): GTANetwork.Util.LocalHandle;
        explodeVehicle(vehicle: GTANetwork.Util.LocalHandle): void;
        getPlayerByName(name: string): GTANetwork.Util.LocalHandle;
        getPlayerName(player: GTANetwork.Util.LocalHandle): string;
        forceSendAimData(force: boolean): void;
        isAimDataForced(): boolean;
        getPlayerAimCoords(player: GTANetwork.Util.LocalHandle): Vector3;
        getPlayerPing(player: GTANetwork.Util.LocalHandle): number;
        createVehicle(model: number, pos: Vector3, heading: number): GTANetwork.Util.LocalHandle;
        createPed(model: number, pos: Vector3, heading: number): GTANetwork.Util.LocalHandle;
        createBlip(pos: Vector3): GTANetwork.Util.LocalHandle;
        setBlipPosition(blip: GTANetwork.Util.LocalHandle, pos: Vector3): void;
        getBlipPosition(blip: GTANetwork.Util.LocalHandle): Vector3;
        getWaypointPosition(): Vector3;
        isWaypointSet(): boolean;
        setWaypoint(x: number, y: number): void;
        removeWaypoint(): void;
        setBlipColor(blip: GTANetwork.Util.LocalHandle, color: number): void;
        getBlipColor(blip: GTANetwork.Util.LocalHandle): number;
        setBlipSprite(blip: GTANetwork.Util.LocalHandle, sprite: number): void;
        getBlipSprite(blip: GTANetwork.Util.LocalHandle): number;
        setBlipName(blip: GTANetwork.Util.LocalHandle, name: string): void;
        getBlipName(blip: GTANetwork.Util.LocalHandle): string;
        setBlipTransparency(blip: GTANetwork.Util.LocalHandle, alpha: number): void;
        getBlipTransparency(blip: GTANetwork.Util.LocalHandle): number;
        setBlipShortRange(blip: GTANetwork.Util.LocalHandle, shortRange: boolean): void;
        getBlipShortRange(blip: GTANetwork.Util.LocalHandle): boolean;
        showBlipRoute(blip: GTANetwork.Util.LocalHandle, show: boolean): void;
        setBlipScale(blip: GTANetwork.Util.LocalHandle, scale: number): void;
        setBlipScale(blip: GTANetwork.Util.LocalHandle, scale: number): void;
        getBlipScale(blip: GTANetwork.Util.LocalHandle): number;
        setChatVisible(display: boolean): void;
        getChatVisible(): boolean;
        getAveragePacketSize(): number;
        getBytesSentPerSecond(): number;
        getBytesReceivedPerSecond(): number;
        requestControlOfPlayer(player: GTANetwork.Util.LocalHandle): void;
        stopControlOfPlayer(player: GTANetwork.Util.LocalHandle): void;
        setHudVisible(visible: boolean): void;
        isSpectating(): boolean;
        getHudVisible(): boolean;
        createMarker(markerType: number, pos: Vector3, dir: Vector3, rot: Vector3, scale: Vector3, r: number, g: number, b: number, alpha: number): GTANetwork.Util.LocalHandle;
        setMarkerType(marker: GTANetwork.Util.LocalHandle, type: number): void;
        getMarkerType(marker: GTANetwork.Util.LocalHandle): number;
        setMarkerColor(marker: GTANetwork.Util.LocalHandle, alpha: number, r: number, g: number, b: number): void;
        getMarkerColor(marker: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        setMarkerScale(marker: GTANetwork.Util.LocalHandle, scale: Vector3): void;
        getMarkerScale(marker: GTANetwork.Util.LocalHandle): Vector3;
        setMarkerDirection(marker: GTANetwork.Util.LocalHandle, dir: Vector3): void;
        getMarkerDirection(marker: GTANetwork.Util.LocalHandle): Vector3;
        deleteEntity(handle: GTANetwork.Util.LocalHandle): void;
        attachEntity(ent1: GTANetwork.Util.LocalHandle, ent2: GTANetwork.Util.LocalHandle, bone: string, positionOffset: Vector3, rotationOffset: Vector3): void;
        detachEntity(ent: GTANetwork.Util.LocalHandle): void;
        isEntityAttachedToAnything(ent: GTANetwork.Util.LocalHandle): boolean;
        isEntityAttachedToEntity(from: GTANetwork.Util.LocalHandle, to: GTANetwork.Util.LocalHandle): boolean;
        createTextLabel(text: string, pos: Vector3, range: number, size: number, entitySeethrough: boolean): GTANetwork.Util.LocalHandle;
        lerpVector(start: Vector3, end: Vector3, currentTime: number, duration: number): Vector3;
        lerpFloat(start: number, end: number, currentTime: number, duration: number): number;
        isInRangeOf(entity: Vector3, destination: Vector3, range: number): boolean;
        dxDrawTexture(path: string, pos: System.Drawing.Point, size: System.Drawing.Size, rotation: number): void;
        drawGameTexture(dict: string, txtName: string, x: number, y: number, width: number, height: number, heading: number, r: number, g: number, b: number, alpha: number): void;
        drawRectangle(xPos: number, yPos: number, wSize: number, hSize: number, r: number, g: number, b: number, alpha: number): void;
        drawText(caption: string, xPos: number, yPos: number, scale: number, r: number, g: number, b: number, alpha: number, font: number, justify: number, shadow: boolean, outline: boolean, wordWrap: number): void;
        addTextElement(caption: string, x: number, y: number, scale: number, r: number, g: number, b: number, a: number, font: number, alignment: number): NativeUI.UIResText;
        getGameTime(): number;
        getGlobalTime(): number;
        angleBetween(from: Vector3, to: Vector3): number;
        isPed(ent: GTANetwork.Util.LocalHandle): boolean;
        isVehicle(ent: GTANetwork.Util.LocalHandle): boolean;
        isProp(ent: GTANetwork.Util.LocalHandle): boolean;
        toFloat(d: number): number;
        f(value: number): GTANetwork.Javascript.ScriptContext_fArg;
        sleep(ms: number): void;
        startAudio(path: string, looped: boolean): void;
        pauseAudio(): void;
        resumeAudio(): void;
        setAudioTime(seconds: number): void;
        getAudioTime(): number;
        isAudioPlaying(): boolean;
        setGameVolume(vol: number): void;
        isAudioInitialized(): boolean;
        stopAudio(): void;
        triggerServerEvent(eventName: string, ...arguments: any[]): void;
        toString(obj: any): string;
        getBoneName(bone: number): string;
        getWeaponName(weapon: number): string;
        getVehicleModelName(model: number): string;
        createMenu(banner: string, subtitle: string, x: number, y: number, anchor: number): NativeUI.UIMenu;
        createMenu(subtitle: string, x: number, y: number, anchor: number): NativeUI.UIMenu;
        createMenuItem(label: string, description: string): NativeUI.UIMenuItem;
        createColoredItem(label: string, description: string, hexColor: string, hexHighlightColor: string): NativeUI.UIMenuColoredItem;
        createCheckboxItem(label: string, description: string, isChecked: boolean): NativeUI.UIMenuCheckboxItem;
        // createListItem(label: string, description: string, items: System.Collections.Generic.List`1<System.String>, index: number): NativeUI.UIMenuListItem;
        getMenuPool(): NativeUI.MenuPool;
        drawMenu(menu: NativeUI.UIMenu): void;
        setMenuBannerSprite(menu: NativeUI.UIMenu, spritedict: string, spritename: string): void;
        setMenuBannerTexture(menu: NativeUI.UIMenu, path: string): void;
        setMenuBannerRectangle(menu: NativeUI.UIMenu, alpha: number, red: number, green: number, blue: number): void;
        setMenuTitle(menu: NativeUI.UIMenu, title: string): void;
        setMenuSubtitle(menu: NativeUI.UIMenu, text: string): void;
        getUserInput(defaultText: string, maxlen: number): string;
        isControlJustPressed(control: number): boolean;
        isControlPressed(control: number): boolean;
        isDisabledControlJustReleased(control: number): boolean;
        isDisabledControlJustPressed(control: number): boolean;
        isDisabledControlPressed(control: number): boolean;
        isControlJustReleased(control: number): boolean;
        disableControlThisFrame(control: number): void;
        enableControlThisFrame(control: number): void;
        disableAllControlsThisFrame(): void;
        getControlNormal(control: number): number;
        getDisabledControlNormal(control: number): number;
        setControlNormal(control: number, value: number): void;
        isChatOpen(): boolean;
        loadAnimationDict(dict: string): void;
        loadModel(model: number): void;
        // requestScaleform(scaleformName: string): GTA.Scaleform;
        // renderScaleform(sc: GTA.Scaleform, x: number, y: number, w: number, h: number): void;
        setEntityTransparency(entity: GTANetwork.Util.LocalHandle, alpha: number): void;
        getEntityType(entity: GTANetwork.Util.LocalHandle): number;
        getEntityTransparency(entity: GTANetwork.Util.LocalHandle): number;
        setEntityDimension(entity: GTANetwork.Util.LocalHandle, dimension: number): void;
        getEntityDimension(entity: GTANetwork.Util.LocalHandle): number;
        getEntityModel(entity: GTANetwork.Util.LocalHandle): number;
        givePlayerWeapon(weapon: number, ammo: number, equipNow: boolean, ammoLoaded: boolean): void;
        removeAllPlayerWeapons(): void;
        doesPlayerHaveWeapon(weapon: number): boolean;
        removePlayerWeapon(weapon: number): void;
        setWeather(weather: number): void;
        getWeather(): number;
        resetWeather(): void;
        setTime(hours: number, minutes: number): void;
        // getTime(): System.TimeSpan;
        resetTime(): void;
        onResourceStart: IEvent<() => void>;
        onResourceStop: IEvent<() => void>;
        onUpdate: IEvent<() => void>;
        onKeyDown: IEvent<(sender: any, e: any) => void>; // e: System.Windows.Forms.KeyEventArgs
        onKeyUp: IEvent<(sender: any, e: any) => void>; // e: System.Windows.Forms.KeyEventArgs
        onServerEventTrigger: IEvent<(eventName: string, arguments: any[]) => void>;
        onChatMessage: IEvent<(msg: string) => void>;
        onChatCommand: IEvent<(msg: string) => void>;
        onEntityStreamIn: IEvent<(item: GTANetwork.Util.LocalHandle, entityType: number) => void>;
        onEntityStreamOut: IEvent<(item: GTANetwork.Util.LocalHandle, entityType: number) => void>;
        onEntityDataChange: IEvent<(entity: GTANetwork.Util.LocalHandle, key: string, oldValue: any) => void>;
        onCustomDataReceived: IEvent<(data: string) => void>;
        onPlayerDeath: IEvent<(killer: GTANetwork.Util.LocalHandle, weapon: number) => void>;
        onPlayerRespawn: IEvent<() => void>;
        onPlayerPickup: IEvent<(entity: GTANetwork.Util.LocalHandle) => void>;
        onPlayerEnterVehicle: IEvent<(entity: GTANetwork.Util.LocalHandle) => void>;
        onPlayerExitVehicle: IEvent<(entity: GTANetwork.Util.LocalHandle) => void>;
        onVehicleHealthChange: IEvent<(oldValue: number) => void>;
        onVehicleDoorBreak: IEvent<(oldValue: number) => void>;
        onVehicleWindowSmash: IEvent<(oldValue: number) => void>;
        onPlayerHealthChange: IEvent<(oldValue: number) => void>;
        onPlayerArmorChange: IEvent<(oldValue: number) => void>;
        onPlayerWeaponSwitch: IEvent<(oldValue: number) => void>;
        onPlayerModelChange: IEvent<(oldValue: number) => void>;
        onVehicleSirenToggle: IEvent<() => void>;
        onPlayerDetonateStickies: IEvent<() => void>;
        onVehicleTyreBurst: IEvent<(oldValue: number) => void>;
        onLocalPlayerDamaged: IEvent<(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number, boneHit: number) => void>;
        onLocalPlayerMeleeHit: IEvent<(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number) => void>;
        onLocalPlayerShoot: IEvent<(weaponUsed: number, aimCoords: Vector3) => void>;
    }

}
declare module GTANetwork {

    export interface MasterServerList {
        list: string[];
    }

    export interface WelcomeSchema {
        Title: string;
        Message: string;
        Picture: string;
    }

}
declare module GTANetwork.Misc {

    export interface BiDictionary<TFirst, TSecond> {
        Reverse: TSecond[];
        Count: number;
        // System.Collections.ICollection.SyncRoot: any;
        // System.Collections.ICollection.IsSynchronized: boolean;
        // System.Collections.IDictionary.IsFixedSize: boolean;
        IsReadOnly: boolean;
        Item: TSecond;
        // System.Collections.IDictionary.Item: any;
        Keys: TFirst[];
        // System.Collections.IDictionary.Keys: System.Collections.ICollection;
        // System.Collections.Generic.IReadOnlyDictionary<TFirst,TSecond>.Keys: TFirst[];
        Values: TSecond[];
        // System.Collections.IDictionary.Values: System.Collections.ICollection;
        // System.Collections.Generic.IReadOnlyDictionary<TFirst,TSecond>.Values: TSecond[];
    }

    export interface ChatData {
        Id: number;
        Sender: string;
        Message: string;
    }

    export interface GameScript {
    }

    export interface GameSettings {
    }

    export interface GameSettings_Version {
        Value: number;
    }

    export interface GameSettings_Tessellation {
        Value: number;
    }

    export interface GameSettings_LodScale {
        Value: number;
    }

    export interface GameSettings_PedLodBias {
        Value: number;
    }

    export interface GameSettings_VehicleLodBias {
        Value: number;
    }

    export interface GameSettings_ShadowQuality {
        Value: number;
    }

    export interface GameSettings_ReflectionQuality {
        Value: number;
    }

    export interface GameSettings_ReflectionMSAA {
        Value: number;
    }

    export interface GameSettings_SSAO {
        Value: number;
    }

    export interface GameSettings_AnisotropicFiltering {
        Value: number;
    }

    export interface GameSettings_MSAA {
        Value: number;
    }

    export interface GameSettings_MSAAFragments {
        Value: number;
    }

    export interface GameSettings_MSAAQuality {
        Value: number;
    }

    export interface GameSettings_SamplingMode {
        Value: number;
    }

    export interface GameSettings_TextureQuality {
        Value: number;
    }

    export interface GameSettings_ParticleQuality {
        Value: number;
    }

    export interface GameSettings_WaterQuality {
        Value: number;
    }

    export interface GameSettings_GrassQuality {
        Value: number;
    }

    export interface GameSettings_ShaderQuality {
        Value: number;
    }

    export interface GameSettings_Shadow_SoftShadows {
        Value: number;
    }

    export interface GameSettings_UltraShadows_Enabled {
        Value: boolean;
    }

    export interface GameSettings_Shadow_ParticleShadows {
        Value: boolean;
    }

    export interface GameSettings_Shadow_Distance {
        Value: number;
    }

    export interface GameSettings_Shadow_LongShadows {
        Value: boolean;
    }

    export interface GameSettings_Shadow_SplitZStart {
        Value: number;
    }

    export interface GameSettings_Shadow_SplitZEnd {
        Value: number;
    }

    export interface GameSettings_Shadow_aircraftExpWeight {
        Value: number;
    }

    export interface GameSettings_Shadow_DisableScreenSizeCheck {
        Value: boolean;
    }

    export interface GameSettings_Reflection_MipBlur {
        Value: boolean;
    }

    export interface GameSettings_FXAA_Enabled {
        Value: boolean;
    }

    export interface GameSettings_TXAA_Enabled {
        Value: boolean;
    }

    export interface GameSettings_Lighting_FogVolumes {
        Value: boolean;
    }

    export interface GameSettings_Shader_SSA {
        Value: boolean;
    }

    export interface GameSettings_DX_Version {
        Value: number;
    }

    export interface GameSettings_CityDensity {
        Value: number;
    }

    export interface GameSettings_PedVarietyMultiplier {
        Value: number;
    }

    export interface GameSettings_VehicleVarietyMultiplier {
        Value: number;
    }

    export interface GameSettings_PostFX {
        Value: number;
    }

    export interface GameSettings_DoF {
        Value: boolean;
    }

    export interface GameSettings_HdStreamingInFlight {
        Value: boolean;
    }

    export interface GameSettings_MaxLodScale {
        Value: number;
    }

    export interface GameSettings_MotionBlurStrength {
        Value: number;
    }

    export interface GameSettings_Graphics {
        Tessellation: GTANetwork.Misc.GameSettings_Tessellation;
        LodScale: GTANetwork.Misc.GameSettings_LodScale;
        PedLodBias: GTANetwork.Misc.GameSettings_PedLodBias;
        VehicleLodBias: GTANetwork.Misc.GameSettings_VehicleLodBias;
        ShadowQuality: GTANetwork.Misc.GameSettings_ShadowQuality;
        ReflectionQuality: GTANetwork.Misc.GameSettings_ReflectionQuality;
        ReflectionMSAA: GTANetwork.Misc.GameSettings_ReflectionMSAA;
        SSAO: GTANetwork.Misc.GameSettings_SSAO;
        AnisotropicFiltering: GTANetwork.Misc.GameSettings_AnisotropicFiltering;
        MSAA: GTANetwork.Misc.GameSettings_MSAA;
        MSAAFragments: GTANetwork.Misc.GameSettings_MSAAFragments;
        MSAAQuality: GTANetwork.Misc.GameSettings_MSAAQuality;
        SamplingMode: GTANetwork.Misc.GameSettings_SamplingMode;
        TextureQuality: GTANetwork.Misc.GameSettings_TextureQuality;
        ParticleQuality: GTANetwork.Misc.GameSettings_ParticleQuality;
        WaterQuality: GTANetwork.Misc.GameSettings_WaterQuality;
        GrassQuality: GTANetwork.Misc.GameSettings_GrassQuality;
        ShaderQuality: GTANetwork.Misc.GameSettings_ShaderQuality;
        Shadow_SoftShadows: GTANetwork.Misc.GameSettings_Shadow_SoftShadows;
        UltraShadows_Enabled: GTANetwork.Misc.GameSettings_UltraShadows_Enabled;
        Shadow_ParticleShadows: GTANetwork.Misc.GameSettings_Shadow_ParticleShadows;
        Shadow_Distance: GTANetwork.Misc.GameSettings_Shadow_Distance;
        Shadow_LongShadows: GTANetwork.Misc.GameSettings_Shadow_LongShadows;
        Shadow_SplitZStart: GTANetwork.Misc.GameSettings_Shadow_SplitZStart;
        Shadow_SplitZEnd: GTANetwork.Misc.GameSettings_Shadow_SplitZEnd;
        Shadow_aircraftExpWeight: GTANetwork.Misc.GameSettings_Shadow_aircraftExpWeight;
        Shadow_DisableScreenSizeCheck: GTANetwork.Misc.GameSettings_Shadow_DisableScreenSizeCheck;
        Reflection_MipBlur: GTANetwork.Misc.GameSettings_Reflection_MipBlur;
        FXAA_Enabled: GTANetwork.Misc.GameSettings_FXAA_Enabled;
        TXAA_Enabled: GTANetwork.Misc.GameSettings_TXAA_Enabled;
        Lighting_FogVolumes: GTANetwork.Misc.GameSettings_Lighting_FogVolumes;
        Shader_SSA: GTANetwork.Misc.GameSettings_Shader_SSA;
        DX_Version: GTANetwork.Misc.GameSettings_DX_Version;
        CityDensity: GTANetwork.Misc.GameSettings_CityDensity;
        PedVarietyMultiplier: GTANetwork.Misc.GameSettings_PedVarietyMultiplier;
        VehicleVarietyMultiplier: GTANetwork.Misc.GameSettings_VehicleVarietyMultiplier;
        PostFX: GTANetwork.Misc.GameSettings_PostFX;
        DoF: GTANetwork.Misc.GameSettings_DoF;
        HdStreamingInFlight: GTANetwork.Misc.GameSettings_HdStreamingInFlight;
        MaxLodScale: GTANetwork.Misc.GameSettings_MaxLodScale;
        MotionBlurStrength: GTANetwork.Misc.GameSettings_MotionBlurStrength;
    }

    export interface GameSettings_NumBytesPerReplayBlock {
        Value: number;
    }

    export interface GameSettings_NumReplayBlocks {
        Value: number;
    }

    export interface GameSettings_MaxSizeOfStreamingReplay {
        Value: number;
    }

    export interface GameSettings_MaxFileStoreSize {
        Value: number;
    }

    export interface GameSettings_System {
        NumBytesPerReplayBlock: GTANetwork.Misc.GameSettings_NumBytesPerReplayBlock;
        NumReplayBlocks: GTANetwork.Misc.GameSettings_NumReplayBlocks;
        MaxSizeOfStreamingReplay: GTANetwork.Misc.GameSettings_MaxSizeOfStreamingReplay;
        MaxFileStoreSize: GTANetwork.Misc.GameSettings_MaxFileStoreSize;
    }

    export interface GameSettings_Audio3d {
        Value: boolean;
    }

    export interface GameSettings_Audio {
        Audio3d: GTANetwork.Misc.GameSettings_Audio3d;
    }

    export interface GameSettings_AdapterIndex {
        Value: number;
    }

    export interface GameSettings_OutputIndex {
        Value: number;
    }

    export interface GameSettings_ScreenWidth {
        Value: number;
    }

    export interface GameSettings_ScreenHeight {
        Value: number;
    }

    export interface GameSettings_RefreshRate {
        Value: number;
    }

    export interface GameSettings_Windowed {
        Value: number;
    }

    export interface GameSettings_VSync {
        Value: number;
    }

    export interface GameSettings_Stereo {
        Value: number;
    }

    export interface GameSettings_Convergence {
        Value: number;
    }

    export interface GameSettings_Separation {
        Value: number;
    }

    export interface GameSettings_PauseOnFocusLoss {
        Value: number;
    }

    export interface GameSettings_AspectRatio {
        Value: number;
    }

    export interface GameSettings_Video {
        AdapterIndex: GTANetwork.Misc.GameSettings_AdapterIndex;
        OutputIndex: GTANetwork.Misc.GameSettings_OutputIndex;
        ScreenWidth: GTANetwork.Misc.GameSettings_ScreenWidth;
        ScreenHeight: GTANetwork.Misc.GameSettings_ScreenHeight;
        RefreshRate: GTANetwork.Misc.GameSettings_RefreshRate;
        Windowed: GTANetwork.Misc.GameSettings_Windowed;
        VSync: GTANetwork.Misc.GameSettings_VSync;
        Stereo: GTANetwork.Misc.GameSettings_Stereo;
        Convergence: GTANetwork.Misc.GameSettings_Convergence;
        Separation: GTANetwork.Misc.GameSettings_Separation;
        PauseOnFocusLoss: GTANetwork.Misc.GameSettings_PauseOnFocusLoss;
        AspectRatio: GTANetwork.Misc.GameSettings_AspectRatio;
    }

    export interface GameSettings_Settings {
        Version: GTANetwork.Misc.GameSettings_Version;
        ConfigSource: string;
        Graphics: GTANetwork.Misc.GameSettings_Graphics;
        System: GTANetwork.Misc.GameSettings_System;
        Audio: GTANetwork.Misc.GameSettings_Audio;
        Video: GTANetwork.Misc.GameSettings_Video;
        VideoCardDescription: string;
    }

    export interface KeyValuePairExts {
    }

    export interface Program {
        Location: string;
    }

    export interface WeaponDataProvider {
    }

}
declare module GTANetwork.Networking {

    export interface DeltaCompressor {
        DataReceived: number[];
        LastPacketReceived: any;
        LastSentObject: any;
    }

    export interface ILocalHandleable {
        LocalHandle: number;
    }

    export interface IStreamedItem {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        Position: Vector3;
        EntityType: number;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    export interface PedThread {
    }

    export interface RemoteBlip extends GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
    }

    export interface RemoteMarker extends GTANetwork.Networking.IStreamedItem {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
    }

    export interface RemoteParticle extends GTANetwork.Networking.IStreamedItem, GTANetwork.Networking.ILocalHandleable {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        LocalHandle: number;
        Position: Vector3;
    }

    export interface RemotePed extends GTANetwork.Networking.IStreamedItem, GTANetwork.Networking.ILocalHandleable {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        LocalHandle: number;
    }

    export interface RemotePickup extends GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
    }

    export interface RemotePlayer extends GTANetwork.Networking.IStreamedItem, GTANetwork.Networking.ILocalHandleable {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        LocalHandle: number;
    }

    export interface RemoteProp extends GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
    }

    export interface RemoteTextLabel extends GTANetwork.Networking.IStreamedItem {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
    }

    export interface RemoteVehicle extends GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
    }

    export interface SyncCollector {
    }

}
declare module GTANetwork.Util {

    export interface CachedString {
        LastAccess: Date;
        Data: string;
        Pointer: number;
        Allocated: boolean;
    }

    export interface ConstantVehicleData {
        DisplayName: string;
        MaxSpeed: number;
        MaxBraking: number;
        MaxTraction: number;
        MaxAcceleration: number;
        _0xBFBA3BA79CFF7EBF: number;
        _0x53409B5163D5B846: number;
        _0xC6AD107DDC9054CC: number;
        _0x5AA3F878A178C4FC: number;
        MaxNumberOfPassengers: number;
        MaxOccupants: number;
        VehicleClass: number;
    }

    export interface DataCollector {
    }

    export interface DebugWindow {
        Visible: boolean;
        PlayerIndex: number;
    }

    enum ESubtask {
        AIMED_SHOOTING_ON_FOOT,
        GETTING_UP,
        MOVING_ON_FOOT_NO_COMBAT,
        MOVING_ON_FOOT_COMBAT,
        USING_LADDER,
        CLIMBING,
        GETTING_OFF_SOMETHING,
        SWAPPING_WEAPON,
        REMOVING_HELMET,
        DEAD,
        SCENARIO,
        MELEE_COMBAT,
        HITTING_MELEE,
        ANIMATION,
        SITTING_IN_VEHICLE,
        DRIVING_WANDERING,
        EXITING_VEHICLE,
        ENTERING_VEHICLE_GENERAL,
        ENTERING_VEHICLE_BREAKING_WINDOW,
        ENTERING_VEHICLE_OPENING_DOOR,
        ENTERING_VEHICLE_ENTERING,
        ENTERING_VEHICLE_CLOSING_DOOR,
        EXIING_VEHICLE_OPENING_DOOR_EXITING,
        EXITING_VEHICLE_CLOSING_DOOR,
        DRIVING_GOING_TO_DESTINATION_OR_ESCORTING,
        USING_MOUNTED_WEAPON,
        DRIVE_BY,
        IN_COVER_GENERAL,
        IN_COVER_FULLY_IN_COVER,
        AIMING_THROWABLE,
        AIMING_GUN,
        RELOADING,
        AIMING_PREVENTED_BY_OBSTACLE,
        RUNNING_TO_COVER,
        IN_COVER_TRANSITION_TO_AIMING_FROM_COVER,
        IN_COVER_TRANSITION_FROM_AIMING_FROM_COVER,
        IN_COVER_BLIND_FIRE,
        PARACHUTING,
        PUTTING_OFF_PARACHUTE,
        JUMPING_OR_CLIMBING_GENERAL,
        JUMPING_AIR,
        JUMPING_FINISHING_JUMP
    }

    export interface GTAMemory {
    }

    enum HandleType {
        GameHandle,
        LocalHandle,
        NetHandle
    }

    export interface InputboxThread {
        ThreadJumper: any[]; // System.Action[]
    }

    export interface Interpolator<T> {
    }

    export interface LocalHandle {
        HandleType: GTANetwork.Util.HandleType;
        Raw: number;
        Value: number;
        IsNull: boolean;
    }

    export interface LogManager {
        LogDirectory: string;
        errorLogLock: any;
    }

    export interface Memory {
        BaseAddress: number;
        ModuleSize: number;
    }

    export interface MimeTypes {
    }

    export interface ModelSpoofer {
    }

    export interface NativeWhitelist {
    }

    export interface Screenshot {
    }

    export interface ScriptTable {
        Count: number;
        IsTableInitialised: boolean;
    }

    export interface ScriptTable_ScriptTableItem {
        ScriptStartAddress: number;
        ScriptHash: number;
    }

    export interface StickyBombTracker {
    }

    export interface StringCache {
        Timeout: number;
        createdCache: boolean;
    }

    export interface Subtask {
    }

    export interface User32 {
    }

    export interface User32_Rect {
        left: number;
        top: number;
        right: number;
        bottom: number;
    }

    export interface Util {
        ModelRequest: boolean;
        TickCount: number;
    }

    export interface VectorExtensions {
    }

}

