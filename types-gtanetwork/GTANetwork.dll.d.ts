//****************************************************************
//  (Partially) Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       0.0.0.0
//  Date:          12/31/2016 7:07:59 PM
//
//  Assemblies:
//    GTANetwork.dll
//
//****************************************************************

declare namespace GTANetwork.GUI {

    class Browser {
        Headless: boolean;
        Position: System.Drawing.Point;
        Pinned: System.Drawing.PointF[];
        Size: System.Drawing.Size;
        eval(code: string): void;
        call(method: string, ...argumentss: any[]): void;
        Dispose(): void;
    }

    class BrowserJavascriptCallback {
        constructor(parent: any, wrapper: GTANetwork.GUI.Browser);
        constructor();
        call(functionName: string, ...argumentss: any[]): any;
        eval(code: string): any;
        addEventHandler(eventName: string, action: any[]): void;
    }

    class CefController {
        _lastMousePoint: System.Drawing.PointF;
        GameFPS: number;
        ShowCursor: boolean;
        constructor();
        static GetMouseModifiers(leftbutton: boolean, rightButton: boolean): any;
    }

    interface IChat {
        IsFocused: boolean;
        CurrentInput: string;
        Init(): void;
        Clear(): void;
        Tick(): void;
        AddMessage(sender: string, msg: string): void;
        OnKeyDown(key: Keys): void;
        OnComplete: IEvent<(sender: any, e: System.EventArgs) => void>;
    }

    class Chat implements GTANetwork.GUI.IChat {
        HasInitialized: boolean;
        IsFocused: boolean;
        CurrentInput: string;
        constructor();
        Init(): void;
        Tick(): void;
        AddMessage(sender: string, msg: string): void;
        static SanitizeString(input: string): string;
        Clear(): void;
        OnKeyDown(key: Keys): void;
        //static ToUnicodeEx(virtualKeyCode: number, scanCode: number, keyboardState: any, receivingBuffer: System.Text.StringBuilder, bufferSize: number, flags: number, kblayout: number): number;
        static ToUnicodeEx(virtualKeyCode: number, scanCode: number, keyboardState: any, receivingBuffer: any, bufferSize: number, flags: number, kblayout: number): number;
        static ActivateKeyboardLayout(hkl: number, flags: number): number;
        static GetCharFromKey(key: Keys, shift: boolean, altGr: boolean): string;
        OnComplete: IEvent<(sender: any, e: System.EventArgs) => void>;
    }

    class ChatThread {
        constructor();
    }

    class ClassicChat implements GTANetwork.GUI.IChat {
        HasInitialized: boolean;
        MAX_CHAT_MESSAGE: number;
        IsFocused: boolean;
        CurrentInput: string;
        constructor();
        Init(): void;
        Clear(): void;
        Tick(): void;
        AddMessage(sender: string, msg: string): void;
        static SanitizeString(input: string): string;
        OnKeyDown(key: Keys): void;
        //static ToUnicodeEx(virtualKeyCode: number, scanCode: number, keyboardState: any, receivingBuffer: System.Text.StringBuilder, bufferSize: number, flags: number, kblayout: number): number;
        static ToUnicodeEx(virtualKeyCode: number, scanCode: number, keyboardState: any, receivingBuffer: any, bufferSize: number, flags: number, kblayout: number): number;
        static ActivateKeyboardLayout(hkl: number, flags: number): number;
        static GetKeyState(keyCode: number): number;
        static GetCharFromKey(key: Keys, shift: boolean, altGr: boolean): string;
        OnComplete: IEvent<(sender: any, e: System.EventArgs) => void>;
    }

    class SecureCefResourceHandler {
        DefaultMimeType: string;
        FilePath: string;
        MimeType: string;
        //Stream: System.IO.Stream;
        Stream: any;
        StatusCode: number;
        StatusText: string;
        //ResponseLength?: number;
		ResponseLength: number;
        //Headers: System.Collections.Specialized.NameValueCollection;
        Headers: any;
        AutoDisposeStream: boolean;
        //ErrorCode?: Xilium.CefGlue.CefErrorCode;
		ErrorCode: Xilium.CefGlue.CefErrorCode;
        constructor();
        constructor(mimeType: string);
        static FromFilePath(fileName: string, mimeType: string): GTANetwork.GUI.SecureCefResourceHandler;
        static FromString(text: string, fileExtension: string): GTANetwork.GUI.SecureCefResourceHandler;
        //static FromString(text: string, encoding: System.Text.Encoding, includePreamble: boolean, mimeType: string): GTANetwork.GUI.SecureCefResourceHandler;
        static FromString(text: string, encoding: any, includePreamble: boolean, mimeType: string): GTANetwork.GUI.SecureCefResourceHandler;
        //static FromStream(stream: System.IO.Stream, mimeType: string): GTANetwork.GUI.SecureCefResourceHandler;
        static FromStream(stream: any, mimeType: string): GTANetwork.GUI.SecureCefResourceHandler;
    }

    class TabButton {
        Visible: boolean;
        Focused: boolean;
        Active: boolean;
        Text: string;
        Position: System.Drawing.Point;
        Size: System.Drawing.Size;
        JustOpened: boolean;
        Hovered: boolean;
        constructor();
        OnActivated(): void;
        Draw(): void;
        Activated: IEvent<(sender: any, e: System.EventArgs) => void>;
    }

    class TabButtonArrayItem {
        Buttons: GTANetwork.GUI.TabButton[];
        Visible: boolean;
        Index: number;
        constructor(name: string);
        ProcessControls(): void;
        Draw(): void;
    }

    class TabMapItem {
        MAP_PATH: string;
        BLIP_PATH: string;
        Position: System.Drawing.PointF;
        Focused: boolean;
        constructor();
        ProcessControls(): void;
        Draw(): void;
        static GetBlipcolor(col: GTA.BlipColor, a: number): System.Drawing.Color;
        AbsoluteToRelative(pos: GTA.Math.Vector2, mapPos: System.Drawing.PointF): System.Drawing.PointF;
        Map2DToWorld3d(mapPos: System.Drawing.PointF, mapPoint: System.Drawing.PointF): GTA.Math.Vector2;
        World3DToMap2D(worldPos: GTA.Math.Vector3): System.Drawing.SizeF;
        DrawSprite(dict: string, name: string, pos: System.Drawing.PointF, size: System.Drawing.SizeF): void;
        DrawSprite(dict: string, name: string, pos: System.Drawing.PointF, size: System.Drawing.SizeF, col: System.Drawing.Color): void;
    }

    class TabWelcomeMessageItem {
        PromoPicturePath: string;
        constructor(defaultTitle: string, defaultText: string);
        Draw(): void;
    }

    class V8Array {
        Item: any;
        length: number;
    }

    class V8Helper {
        static GetValue(val: Xilium.CefGlue.CefV8Value): any;
        static CreateValue(value: any): Xilium.CefGlue.CefV8Value;
    }

    class Warning {
        Header: string;
        Message: string;
        Visible: boolean;
        Error: boolean;
        //OnAccept: System.Action;
        OnAccept: any;
        constructor(message: string);
        constructor(header: string, message: string);
        Draw(): void;
    }

}
declare namespace GTANetwork.GUI.DirectXHook.Hook.Common {

    interface IOverlayElement {
        Hidden: boolean;
        Frame(): void;
    }

    class Element implements GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement {
        Hidden: boolean;
        Frame(): void;
        Clone(): any;
        Dispose(): void;
        InitializeLifetimeService(): any;
    }

    class ImageElement {
        Dirty: boolean;
        SwitchLock: any;
        Bitmap: System.Drawing.Bitmap;
        Tint: System.Drawing.Color;
        Location: System.Drawing.Point;
        Angle: number;
        Scale: number;
        Filename: string;
        Image: GTANetwork.GUI.DirectXHook.Hook.DX11.DXImage;
        NextBitmap: System.Drawing.Bitmap;
        constructor(filename: string);
        constructor(bitmap: System.Drawing.Bitmap, ownsImage: boolean);
        SetBitmap(bmp: System.Drawing.Bitmap): void;
    }

    interface IOverlay extends GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement {
        Elements: GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement[];
    }

    class Overlay implements GTANetwork.GUI.DirectXHook.Hook.Common.IOverlay, GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement {
        Elements: GTANetwork.GUI.DirectXHook.Hook.Common.IOverlayElement[];
        Hidden: boolean;
        constructor();
        Frame(): void;
        Clone(): any;
    }

    class TextElement {
        Text: string;
        Font: System.Drawing.Font;
        Color: System.Drawing.Color;
        Location: System.Drawing.Point;
        AntiAliased: boolean;
        constructor(font: System.Drawing.Font);
    }

}
declare namespace GTANetwork.GUI.DirectXHook.Hook {

    class D10Text {
        Text: string;
        //FontDescription: SharpDX.Direct3D10.FontDescription;
        FontDescription: any;
        //Position: SharpDX.Vector2;
        Position: any;
        //Color: SharpDX.Color4;
        Color: any;
    }

    class Hook {
        FuncToHook: number;
        //NewFunc: System.Delegate;
        NewFunc: Function;
        Owner: any;
        //LocalHook: EasyHook.LocalHook;
        LocalHook: any;
        IsActive: boolean;
        //constructor(funcToHook: number, newFunc: System.Delegate, owner: any);
        constructor(funcToHook: number, newFunc: Function, owner: any);
        Activate(): void;
        Deactivate(): void;
        Dispose(): void;
    }

    //class Hook<T> {
    //    Original: T;
    //    constructor(funcToHook: number, newFunc: System.Delegate, owner: any);
    //}

    interface IDXHook {
        Hook(): void;
        Cleanup(): void;
    }

    class SafeHGlobal {
        IsInvalid: boolean;
        constructor(sizeInBytes: number);
    }

}
declare namespace GTANetwork.GUI.DirectXHook.Hook.DX11 {

    class ContextState {
        constructor();
    }

    class DeviceManager {
        //Direct3DDevice: SharpDX.Direct3D11.Device;
        Direct3DDevice: any;
        //Direct3DContext: SharpDX.Direct3D11.DeviceContext;
        Direct3DContext: any;
        //constructor(device: SharpDX.Direct3D11.Device);
        constructor(device: any);
    }

    class DXFont {
        //constructor(device: SharpDX.Direct3D11.Device, deviceContext: SharpDX.Direct3D11.DeviceContext);
        constructor(device: any, deviceContext: any);
        Dispose(): void;
        Initialize(FontName: string, FontSize: number, FontStyle: System.Drawing.FontStyle, AntiAliased: boolean): boolean;
        //GetFontSheetSRV(): SharpDX.Direct3D11.ShaderResourceView;
        GetFontSheetSRV(): any;
        //GetCharRect(c: number): SharpDX.Rectangle;
        GetCharRect(c: number): any;
        GetSpaceWidth(): number;
        GetCharHeight(): number;
    }

    class DXImage {
        Width: number;
        Height: number;
        //Device: SharpDX.Direct3D11.Device;
        Device: any;
        //constructor(device: SharpDX.Direct3D11.Device, deviceContext: SharpDX.Direct3D11.DeviceContext);
        constructor(device: any, deviceContext: any);
        Initialise(bitmap: System.Drawing.Bitmap): boolean;
        Update(bitmap: System.Drawing.Bitmap): void;
        //GetSRV(): SharpDX.Direct3D11.ShaderResourceView;
        GetSRV(): any;
    }

    class DXSprite {
        //constructor(device: SharpDX.Direct3D11.Device, deviceContext: SharpDX.Direct3D11.DeviceContext);
        constructor(device: any, deviceContext: any);
        Initialize(): boolean;
        DrawImage(x: number, y: number, scale: number, angle: number, color: System.Drawing.Color, image: GTANetwork.GUI.DirectXHook.Hook.DX11.DXImage): void;
        DrawString(X: number, Y: number, text: string, color: System.Drawing.Color, F: GTANetwork.GUI.DirectXHook.Hook.DX11.DXFont): void;
        //BeginBatch(texSRV: SharpDX.Direct3D11.ShaderResourceView): void;
        BeginBatch(texSRV: any): void;
        EndBatch(): void;
        //Draw(destinationRect: SharpDX.Rectangle, sourceRect: SharpDX.Rectangle, color: SharpDX.Color4, scale: number, angle: number, z: number): void;
        Draw(destinationRect: any, sourceRect: any, color: any, scale: number, angle: number, z: number): void;
    }

    class RendererBase {
        //World: SharpDX.Matrix;
        World: any;
        DeviceManager: GTANetwork.GUI.DirectXHook.Hook.DX11.DeviceManager;
        Show: boolean;
        constructor();
        Initialize(dm: GTANetwork.GUI.DirectXHook.Hook.DX11.DeviceManager): void;
        Render(): void;
        //Render(context: SharpDX.Direct3D11.DeviceContext): void;
        Render(context: any): void;
    }

    class ScreenAlignedQuadRenderer {
        UseLinearSampling: boolean;
        //ShaderResource: SharpDX.Direct3D11.ShaderResourceView;
        ShaderResource: any;
        //RenderTargetView: SharpDX.Direct3D11.RenderTargetView;
        RenderTargetView: any;
        //RenderTarget: SharpDX.Direct3D11.Texture2D;
        RenderTarget: any;
        constructor();
    }

}
declare namespace GTANetwork.GUI.DirectXHook {

    class InjectionFailedException {
        //constructor(innerException: System.Exception);
        constructor(innerException: any);
    }

    class ProcessAlreadyHookedException {
        constructor();
    }

    class ProcessHasNoWindowHandleException {
        constructor();
    }

    class SwapchainHooker {
        constructor();
    }

}
declare namespace GTANetwork.GUI.Extern {

    class FastBitmap {
        Width: number;
        Height: number;
        CompositingMode: System.Drawing.Drawing2D.CompositingMode;
        constructor(sFilename: string);
        constructor(oBitmap: System.Drawing.Bitmap);
        constructor(nWidth: number, nHeight: number);
        constructor(oSize: System.Drawing.Size);
        SetPixel(x: number, y: number, oColor: GTANetwork.GUI.Extern.RGBColor): void;
        GetPixel(x: number, y: number): GTANetwork.GUI.Extern.RGBColor;
        Clear(oColor: GTANetwork.GUI.Extern.RGBColor): void;
    }

    class QuadDistort {
        constructor();
        static DrawBitmap(oTexture: GTANetwork.GUI.Extern.FastBitmap, topLeft: System.Drawing.Point, topRight: System.Drawing.Point, bottomRight: System.Drawing.Point, bottomLeft: System.Drawing.Point, oCanvas: GTANetwork.GUI.Extern.FastBitmap): void;
    }

    class RGBColor {
        Transparent: GTANetwork.GUI.Extern.RGBColor;
        Black: GTANetwork.GUI.Extern.RGBColor;
        White: GTANetwork.GUI.Extern.RGBColor;
        Red: GTANetwork.GUI.Extern.RGBColor;
        Green: GTANetwork.GUI.Extern.RGBColor;
        Blue: GTANetwork.GUI.Extern.RGBColor;
        Yellow: GTANetwork.GUI.Extern.RGBColor;
        Magenta: GTANetwork.GUI.Extern.RGBColor;
        Cyan: GTANetwork.GUI.Extern.RGBColor;
        Grey: GTANetwork.GUI.Extern.RGBColor;
        Argb: number;
        B: number;
        G: number;
        R: number;
        A: number;
        constructor(argb: number);
        constructor(grey: number);
        constructor(alpha: number, oOriginal: GTANetwork.GUI.Extern.RGBColor);
        constructor(red: number, green: number, blue: number);
        constructor(alpha: number, red: number, green: number, blue: number);
        ToString(): string;
        SetValues(red: number, green: number, blue: number): void;
        GetVector(): number;
        Equals(obj: any): boolean;
        GetHashCode(): number;
    }

}

declare namespace GTANetwork.Javascript {

    class BooleanEvent {
        constructor(object: any, method: number);
        Invoke(value: boolean): void;
        BeginInvoke(value: boolean, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class CameraManager {
        constructor();
        Reset(): void;
        GetActive(): GTANetwork.Javascript.GlobalCamera;
        Create(position: Vector3, rotation: Vector3): GTANetwork.Javascript.GlobalCamera;
        Delete(cam: GTANetwork.Javascript.GlobalCamera): void;
        SetActive(cam: GTANetwork.Javascript.GlobalCamera): void;
        SetActiveWithInterp(cam: GTANetwork.Javascript.GlobalCamera, duration: number, easePos: boolean, easeRot: boolean): void;
    }

    class ClientResourceSettings {
        Settings: string[];
        constructor();
    }

    class GlobalCamera {
    }

    class IntegerEvent {
        constructor(object: any, method: number);
        Invoke(value: number): void;
        BeginInvoke(value: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class JavascriptChat implements GTANetwork.GUI.IChat {
        SanitationLevel: number;
        IsFocused: boolean;
        CurrentInput: string;
        constructor();
        Tick(): void;
        sendMessage(msg: string): void;
        OnKeyDown(key: Keys): void;
        Init(): void;
        Clear(): void;
        AddMessage(sender: string, message: string): void;
        OnComplete: IEvent<(sender: any, e: System.EventArgs) => void>;
        onTick: IEvent<() => void>;
        onKeyDown: IEvent<(sender: any, e: System.Windows.Forms.KeyEventArgs) => void>;
        onFocusChange: IEvent<(value: boolean) => void>;
        onInit: IEvent<() => void>;
        onClearRequest: IEvent<() => void>;
        onAddMessageRequest: IEvent<(msg: string, hasColor: boolean, r: number, g: number, b: number) => void>;
        onCharInput: IEvent<(value: number) => void>;
        onChatHideRequest: IEvent<(value: boolean) => void>;
    }

    class JavascriptHook {
        MousePosition: System.Drawing.PointF;
        MouseClick: boolean;
        TextElements: NativeUI.UIResText[];
        //AudioDevice: NAudio.Wave.WaveOutEvent;
        AudioDevice: any;
        //AudioReader: NAudio.Wave.WaveStream;
        AudioReader: any;
        //Exported: System.Dynamic.ExpandoObject;
        Exported: any;
        constructor();
    }

    class LoopStream {
        EnableLooping: boolean;
        //WaveFormat: NAudio.Wave.WaveFormat;
        WaveFormat: any;
        Length: number;
        Position: number;
        //constructor(sourceStream: NAudio.Wave.WaveStream);
        constructor(sourceStream: any);
        Read(buffer: any, offset: number, count: number): number;
    }

    class MessageEvent {
        constructor(object: any, method: number);
        Invoke(msg: string, hasColor: boolean, r: number, g: number, b: number): void;
        BeginInvoke(msg: string, hasColor: boolean, r: number, g: number, b: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext {
        //constructor(engine: Microsoft.ClearScript.V8.V8ScriptEngine);
        constructor(engine: any);
        startCoroutine(target: any): void;
        showCursor(show: boolean): void;
        isCursorShown(): boolean;
        setSetting(name: string, value: any): void;
        getSetting(name: string): any;
        doesSettingExist(name: string): boolean;
        removeSetting(name: string): void;
        registerChatOverride(): GTANetwork.Javascript.JavascriptChat;
        createCamera(position: Vector3, rotation: Vector3): GTANetwork.Javascript.GlobalCamera;
        setActiveCamera(camera: GTANetwork.Javascript.GlobalCamera): void;
        setGameplayCameraActive(): void;
        getActiveCamera(): GTANetwork.Javascript.GlobalCamera;
        setCameraShake(cam: GTANetwork.Javascript.GlobalCamera, shakeType: string, amplitute: number): void;
        stopCameraShake(cam: GTANetwork.Javascript.GlobalCamera): void;
        isCameraShaking(cam: GTANetwork.Javascript.GlobalCamera): boolean;
        setCameraPosition(cam: GTANetwork.Javascript.GlobalCamera, pos: Vector3): void;
        getCameraPosition(cam: GTANetwork.Javascript.GlobalCamera): Vector3;
        setCameraRotation(cam: GTANetwork.Javascript.GlobalCamera, rotation: Vector3): void;
        getCameraRotation(cam: GTANetwork.Javascript.GlobalCamera): Vector3;
        setCameraFov(cam: GTANetwork.Javascript.GlobalCamera, fov: number): void;
        getCameraFov(cam: GTANetwork.Javascript.GlobalCamera): number;
        pointCameraAtPosition(cam: GTANetwork.Javascript.GlobalCamera, pos: Vector3): void;
        pointCameraAtEntity(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, offset: Vector3): void;
        pointCameraAtEntityBone(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, bone: number, offset: Vector3): void;
        stopCameraPointing(cam: GTANetwork.Javascript.GlobalCamera): void;
        attachCameraToEntity(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, offset: Vector3): void;
        attachCameraToEntityBone(cam: GTANetwork.Javascript.GlobalCamera, ent: GTANetwork.Util.LocalHandle, bone: number, offset: Vector3): void;
        detachCamera(cam: GTANetwork.Javascript.GlobalCamera): void;
        interpolateCameras(from: GTANetwork.Javascript.GlobalCamera, to: GTANetwork.Javascript.GlobalCamera, duration: number, easepos: boolean, easerot: boolean): void;
        getCursorPosition(): System.Drawing.PointF;
        getCursorPositionMantainRatio(): System.Drawing.PointF;
        worldToScreen(pos: Vector3): System.Drawing.PointF;
        worldToScreenMantainRatio(pos: Vector3): System.Drawing.PointF;
        getCurrentResourceName(): string;
        screenToWorld(pos: System.Drawing.PointF): Vector3;
        screenToWorldMantainRatio(pos: System.Drawing.PointF): Vector3;
        screenToWorld(pos: System.Drawing.PointF, camPos: Vector3, camRot: Vector3): Vector3;
        screenToWorldMantainRatio(pos: System.Drawing.PointF, camPos: Vector3, camrot: Vector3): Vector3;
        createRaycast(start: Vector3, end: Vector3, flag: Enums.IntersectOptions, ignoreEntity: GTANetwork.Util.LocalHandle): GTANetwork.Javascript.ScriptContext_Raycast;
        getGameplayCamPos(): Vector3;
        getGameplayCamRot(): Vector3;
        getGameplayCamDir(): Vector3;
        setCanOpenChat(show: boolean): void;
        getCanOpenChat(): boolean;
        setDisplayWastedShard(show: boolean): void;
        getDisplayWastedShard(): boolean;
        createCefBrowser(width: number, height: number, local?: boolean): GTANetwork.GUI.Browser;
        destroyCefBrowser(browser: GTANetwork.GUI.Browser): void;
        isCefBrowserInitialized(browser: GTANetwork.GUI.Browser): boolean;
        waitUntilCefBrowserInit(browser: GTANetwork.GUI.Browser): void;
        waitUntilCefBrowserLoaded(browser: GTANetwork.GUI.Browser): void;
        setCefBrowserSize(browser: GTANetwork.GUI.Browser, width: number, height: number): void;
        getCefBrowserSize(browser: GTANetwork.GUI.Browser): System.Drawing.Size;
        setCefBrowserHeadless(browser: GTANetwork.GUI.Browser, headless: boolean): void;
        getCefBrowserHeadless(browser: GTANetwork.GUI.Browser): boolean;
        setCefBrowserPosition(browser: GTANetwork.GUI.Browser, xPos: number, yPos: number): void;
        getCefBrowserPosition(browser: GTANetwork.GUI.Browser): System.Drawing.Point;
        pinCefBrowser(browser: GTANetwork.GUI.Browser, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
        clearCefPinning(browser: GTANetwork.GUI.Browser): void;
        verifyIntegrityOfCache(): void;
        loadPageCefBrowser(browser: GTANetwork.GUI.Browser, uri: string): void;
        loadHtmlCefBrowser(browser: GTANetwork.GUI.Browser, html: string): void;
        isCefBrowserLoading(browser: GTANetwork.GUI.Browser): boolean;
        callNative(hash: string, ...args: any[]): void;
        returnNative(hash: string, returnType: Enums.NativeReturnTypes, ...args: any[]): any;
        setUiColor(r: number, g: number, b: number): void;
        getHashKey(input: string): number;
        setEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string, data: any): boolean;
        resetEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string): void;
        hasEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string): boolean;
        getEntitySyncedData(entity: GTANetwork.Util.LocalHandle, key: string): any;
        getAllEntitySyncedData(entity: GTANetwork.Util.LocalHandle): System.Array<string>
        setWorldSyncedData(key: string, data: any): boolean;
        resetWorldSyncedData(key: string): void;
        hasWorldSyncedData(key: string): boolean;
        getWorldSyncedData(key: string): any;
        getAllWorldSyncedData(): System.Array<string>;
        getGamePlayer(): number;
        getLocalPlayer(): GTANetwork.Util.LocalHandle;
        getEntityPosition(entity: GTANetwork.Util.LocalHandle): Vector3;
        getEntityRotation(entity: GTANetwork.Util.LocalHandle): Vector3;
        getEntityVelocity(entity: GTANetwork.Util.LocalHandle): Vector3;
        getVehicleHealth(entity: GTANetwork.Util.LocalHandle): number;
        getVehicleRPM(entity: GTANetwork.Util.LocalHandle): number;
        isPlayerInAnyVehicle(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerOnFire(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerParachuting(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerInFreefall(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerAiming(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerShooting(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerReloading(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerInCover(player: GTANetwork.Util.LocalHandle): boolean;
        isPlayerOnLadder(player: GTANetwork.Util.LocalHandle): boolean;
        getPlayerAimingPoint(player: GTANetwork.Util.LocalHandle): Vector3;
        isPlayerDead(player: GTANetwork.Util.LocalHandle): boolean;
        doesEntityExist(entity: GTANetwork.Util.LocalHandle): boolean;
        setEntityInvincible(entity: GTANetwork.Util.LocalHandle, invincible: boolean): void;
        getEntityInvincible(entity: GTANetwork.Util.LocalHandle): boolean;
        getLocalPlayerInvincible(): boolean;
        createParticleEffectOnPosition(ptfxLibrary: string, ptfxName: string, position: Vector3, rotation: Vector3, scale: number): void;
        createParticleEffectOnEntity(ptfxLibrary: string, ptfxName: string, entity: GTANetwork.Util.LocalHandle, offset: Vector3, rotation: Vector3, scale: number, boneIndex: number): void;
        createExplosion(explosionType: Enums.ExplosionType, position: Vector3, damageScale: number): void;
        createOwnedExplosion(owner: GTANetwork.Util.LocalHandle, explosionType: Enums.ExplosionType, position: Vector3, damageScale: number): void;
        createProjectile(weapon: Enums.WeaponHash, start: Vector3, target: Vector3, damage: number, speed: number, dimension: number): void;
        createOwnedProjectile(owner: GTANetwork.Util.LocalHandle, weapon: Enums.WeaponHash, start: Vector3, target: Vector3, damage: number, speed: number, dimension: number): void;
        setVehicleLivery(vehicle: GTANetwork.Util.LocalHandle, livery: number): void;
        getVehicleLivery(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleLocked(vehicle: GTANetwork.Util.LocalHandle, locked: boolean): void;
        getVehicleLocked(vehicle: GTANetwork.Util.LocalHandle): boolean;
        getVehicleTrailer(vehicle: GTANetwork.Util.LocalHandle): GTANetwork.Util.LocalHandle;
        getVehicleTraileredBy(vehicle: GTANetwork.Util.LocalHandle): GTANetwork.Util.LocalHandle;
        getVehicleSirenState(vehicle: GTANetwork.Util.LocalHandle): boolean;
        isVehicleTyrePopped(vehicle: GTANetwork.Util.LocalHandle, tyre: number): boolean;
        popVehicleTyre(vehicle: GTANetwork.Util.LocalHandle, tyre: number, pop: boolean): void;
        isVehicleDoorBroken(vehicle: GTANetwork.Util.LocalHandle, door: number): boolean;
        setVehicleDoorState(vehicle: GTANetwork.Util.LocalHandle, door: number, open: boolean): void;
        getVehicleDoorState(vehicle: GTANetwork.Util.LocalHandle, door: number): boolean;
        breakVehicleTyre(vehicle: GTANetwork.Util.LocalHandle, door: number, breakDoor: boolean): void;
        isVehicleWindowBroken(vehicle: GTANetwork.Util.LocalHandle, window: number): boolean;
        breakVehicleWindow(vehicle: GTANetwork.Util.LocalHandle, window: number, breakWindow: boolean): void;
        setVehicleExtra(vehicle: GTANetwork.Util.LocalHandle, slot: number, enabled: boolean): void;
        getVehicleExtra(vehicle: GTANetwork.Util.LocalHandle, slot: number): boolean;
        setVehicleNumberPlate(vehicle: GTANetwork.Util.LocalHandle, plate: string): void;
        getVehicleNumberPlate(vehicle: GTANetwork.Util.LocalHandle): string;
        setVehicleEngineStatus(vehicle: GTANetwork.Util.LocalHandle, turnedOn: boolean): void;
        getEngineStatus(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setVehicleSpecialLightStatus(vehicle: GTANetwork.Util.LocalHandle, status: boolean): void;
        getVehicleSpecialLightStatus(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setEntityCollissionless(entity: GTANetwork.Util.LocalHandle, status: boolean): void;
        getEntityCollisionless(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setVehicleMod(vehicle: GTANetwork.Util.LocalHandle, slot: number, modType: number): void;
        getVehicleMod(vehicle: GTANetwork.Util.LocalHandle, slot: number): number;
        removeVehicleMod(vehicle: GTANetwork.Util.LocalHandle, slot: number): void;
        setVehicleBulletproofTyres(vehicle: GTANetwork.Util.LocalHandle, bulletproof: boolean): void;
        getVehicleBulletproofTyres(vehicle: GTANetwork.Util.LocalHandle): boolean;
        setVehicleNumberPlateStyle(vehicle: GTANetwork.Util.LocalHandle, style: number): void;
        getVehicleNumberPlateStyle(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehiclePearlescentColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        getVehiclePearlescentColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleWheelColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        getVehicleWheelColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleWheelType(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleWheelType(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleModColor1(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleModColor2(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleTyreSmokeColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleWindowTint(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleWindowTint(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleEnginePowerMultiplier(vehicle: GTANetwork.Util.LocalHandle, mult: number): void;
        getVehicleEnginePowerMultiplier(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleEngineTorqueMultiplier(vehicle: GTANetwork.Util.LocalHandle, mult: number): void;
        getVehicleEngineTorqueMultiplier(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleNeonState(vehicle: GTANetwork.Util.LocalHandle, slot: number, turnedOn: boolean): void;
        getVehicleNeonState(vehicle: GTANetwork.Util.LocalHandle, slot: number): boolean;
        setVehicleNeonColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleDashboardColor(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleDashboardColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setVehicleTrimColor(vehicle: GTANetwork.Util.LocalHandle, type: number): void;
        getVehicleTrimColor(vehicle: GTANetwork.Util.LocalHandle): number;
        getVehicleDisplayName(model: number): string;
        getVehicleMaxSpeed(model: number): number;
        getVehicleMaxBraking(model: number): number;
        getVehicleMaxTraction(model: number): number;
        getVehicleMaxAcceleration(model: number): number;
        getVehicleMaxOccupants(model: number): number;
        getVehicleClass(model: number): number;
        detonatePlayerStickies(): void;
        setPlayerNametag(player: GTANetwork.Util.LocalHandle, text: string): void;
        resetPlayerNametag(player: GTANetwork.Util.LocalHandle): void;
        setPlayerNametagVisible(player: GTANetwork.Util.LocalHandle, show: boolean): void;
        getPlayerNametagVisible(player: GTANetwork.Util.LocalHandle): boolean;
        setPlayerNametagColor(player: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        resetPlayerNametagColor(player: GTANetwork.Util.LocalHandle): void;
        setPlayerSkin(model: number): void;
        setPlayerDefaultClothes(): void;
        setPlayerTeam(team: number): void;
        getPlayerTeam(): number;
        playPlayerScenario(name: string): void;
        playPlayerAnimation(animDict: string, animName: string, flag: number, duration: number): void;
        stopPlayerAnimation(): void;
        setVehiclePrimaryColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        setVehicleSecondaryColor(vehicle: GTANetwork.Util.LocalHandle, color: number): void;
        setVehicleCustomPrimaryColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        setVehicleCustomSecondaryColor(vehicle: GTANetwork.Util.LocalHandle, r: number, g: number, b: number): void;
        getVehicleCustomPrimaryColor(vehicle: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        getVehicleCustomSecondaryColor(vehicle: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        getVehiclePrimaryColor(vehicle: GTANetwork.Util.LocalHandle): number;
        getVehicleSecondaryColor(vehicle: GTANetwork.Util.LocalHandle): number;
        setPlayerClothes(player: GTANetwork.Util.LocalHandle, slot: number, drawable: number, texture: number): void;
        setPlayerAccessory(player: GTANetwork.Util.LocalHandle, slot: number, drawable: number, texture: number): void;
        clearPlayerAccessory(player: GTANetwork.Util.LocalHandle, slot: number): void;
        vehicleNameToModel(modelName: string): number;
        pedNameToModel(modelName: string): number;
        pickupNameToModel(modelName: string): number;
        weaponNameToModel(modelName: string): number;
        loadInterior(pos: Vector3): void;
        clearPlayerTasks(): void;
        setEntityPositionFrozen(entity: GTANetwork.Util.LocalHandle, frozen: boolean): void;
        setEntityVelocity(entity: GTANetwork.Util.LocalHandle, velocity: Vector3): void;
        getPlayerVehicleSeat(player: GTANetwork.Util.LocalHandle): number;
        setPlayerWeaponTint(weapon: Enums.WeaponHash, tint: Enums.WeaponTint): void;
        getPlayerWeaponTint(weapon: Enums.WeaponHash): number;
        givePlayerWeaponComponent(weapon: Enums.WeaponHash, component: Enums.WeaponComponent): void;
        removePlayerWeaponComponent(weapon: Enums.WeaponHash, component: Enums.WeaponComponent): void;
        hasPlayerWeaponComponent(weapon: Enums.WeaponHash, component: Enums.WeaponComponent): boolean;
        getAllWeaponComponents(weapon: Enums.WeaponHash): GTA.WeaponComponent[];
        getPlayerCurrentWeapon(): number;
        disconnect(reason: string): void;
        setEntityPosition(ent: GTANetwork.Util.LocalHandle, pos: Vector3): void;
        setEntityRotation(ent: GTANetwork.Util.LocalHandle, rot: Vector3): void;
        setPlayerIntoVehicle(vehicle: GTANetwork.Util.LocalHandle, seat: number): void;
        setPlayerHealth(health: number): void;
        getPlayerHealth(player: GTANetwork.Util.LocalHandle): number;
        setTextLabelText(label: GTANetwork.Util.LocalHandle, text: string): void;
        setTextLabelColor(textLabel: GTANetwork.Util.LocalHandle, alpha: number, r: number, g: number, b: number): void;
        getTextLabelColor(textLabel: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        setTextLabelSeethrough(handle: GTANetwork.Util.LocalHandle, seethrough: boolean): void;
        getTextLabelSeethrough(handle: GTANetwork.Util.LocalHandle): boolean;
        getOffsetInWorldCoords(entity: GTANetwork.Util.LocalHandle, offset: Vector3): Vector3;
        getOffsetFromWorldCoords(entity: GTANetwork.Util.LocalHandle, pos: Vector3): Vector3;
        drawLine(start: Vector3, end: Vector3, a: number, r: number, g: number, b: number): void;
        playSoundFrontEnd(audioLib: string, audioName: string): void;
        showShard(text: string, timeout: number): void;
        showColorShard(text: string, description: string, color1: number, color2: number, time: number): void;
        showWeaponPurchasedShard(text: string, weaponName: string, weapon: Enums.WeaponHash, time: number): void;
        loadConfig(config: string): GTANetwork.Javascript.XmlGroup;
        fromJson(json: string): any;
        toJson(data: any): string;
        getScreenResolutionMantainRatio(): System.Drawing.SizeF;
        sendChatMessage(sender: string, text: string): void;
        sendChatMessage(text: string): void;
        getScreenResolution(): System.Drawing.Size;
        sendNotification(text: string): void;
        displaySubtitle(text: string): void;
        displaySubtitle(text: string, duration: number): void;
        formatTime(ms: number, format: string): string;
        setPlayerInvincible(invinc: boolean): void;
        setPlayerWantedLevel(wantedLevel: number): void;
        getPlayerWantedLevel(): number;
        getPlayerInvincible(): boolean;
        setPlayerArmor(armor: number): void;
        getPlayerArmor(player: GTANetwork.Util.LocalHandle): number;
        getStreamedPlayers(): System.Array<GTANetwork.Util.LocalHandle>;
        getStreamedVehicles(): System.Array<GTANetwork.Util.LocalHandle>;
        getStreamedObjects(): System.Array<GTANetwork.Util.LocalHandle>;
        getStreamedPickups(): System.Array<GTANetwork.Util.LocalHandle>;
        getStreamedPeds(): System.Array<GTANetwork.Util.LocalHandle>;
        getStreamedMarkers(): System.Array<GTANetwork.Util.LocalHandle>;
        getStreamedTextLabels(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllPlayers(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllVehicles(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllObjects(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllPickups(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllPeds(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllMarkers(): System.Array<GTANetwork.Util.LocalHandle>;
        getAllTextLabels(): System.Array<GTANetwork.Util.LocalHandle>;
        getPlayerVehicle(player: GTANetwork.Util.LocalHandle): GTANetwork.Util.LocalHandle;
        explodeVehicle(vehicle: GTANetwork.Util.LocalHandle): void;
        getPlayerByName(name: string): GTANetwork.Util.LocalHandle;
        getPlayerName(player: GTANetwork.Util.LocalHandle): string;
        forceSendAimData(force: boolean): void;
        isAimDataForced(): boolean;
        getPlayerAimCoords(player: GTANetwork.Util.LocalHandle): Vector3;
        getPlayerPing(player: GTANetwork.Util.LocalHandle): number;
        createVehicle(model: number, pos: Vector3, heading: number): GTANetwork.Util.LocalHandle;
        createPed(model: number, pos: Vector3, heading: number): GTANetwork.Util.LocalHandle;
        createBlip(pos: Vector3): GTANetwork.Util.LocalHandle;
        setBlipPosition(blip: GTANetwork.Util.LocalHandle, pos: Vector3): void;
        getBlipPosition(blip: GTANetwork.Util.LocalHandle): Vector3;
        getWaypointPosition(): Vector3;
        isWaypointSet(): boolean;
        setWaypoint(x: number, y: number): void;
        removeWaypoint(): void;
        setBlipColor(blip: GTANetwork.Util.LocalHandle, color: number): void;
        getBlipColor(blip: GTANetwork.Util.LocalHandle): number;
        setBlipSprite(blip: GTANetwork.Util.LocalHandle, sprite: number): void;
        getBlipSprite(blip: GTANetwork.Util.LocalHandle): number;
        setBlipName(blip: GTANetwork.Util.LocalHandle, name: string): void;
        getBlipName(blip: GTANetwork.Util.LocalHandle): string;
        setBlipTransparency(blip: GTANetwork.Util.LocalHandle, alpha: number): void;
        getBlipTransparency(blip: GTANetwork.Util.LocalHandle): number;
        setBlipShortRange(blip: GTANetwork.Util.LocalHandle, shortRange: boolean): void;
        getBlipShortRange(blip: GTANetwork.Util.LocalHandle): boolean;
        showBlipRoute(blip: GTANetwork.Util.LocalHandle, show: boolean): void;
        setBlipScale(blip: GTANetwork.Util.LocalHandle, scale: number): void;
        setBlipScale(blip: GTANetwork.Util.LocalHandle, scale: number): void;
        getBlipScale(blip: GTANetwork.Util.LocalHandle): number;
        setChatVisible(display: boolean): void;
        getChatVisible(): boolean;
        getAveragePacketSize(): number;
        getBytesSentPerSecond(): number;
        getBytesReceivedPerSecond(): number;
        requestControlOfPlayer(player: GTANetwork.Util.LocalHandle): void;
        stopControlOfPlayer(player: GTANetwork.Util.LocalHandle): void;
        setHudVisible(visible: boolean): void;
        isSpectating(): boolean;
        getHudVisible(): boolean;
        createMarker(markerType: number, pos: Vector3, dir: Vector3, rot: Vector3, scale: Vector3, r: number, g: number, b: number, alpha: number): GTANetwork.Util.LocalHandle;
        setMarkerType(marker: GTANetwork.Util.LocalHandle, type: number): void;
        getMarkerType(marker: GTANetwork.Util.LocalHandle): number;
        setMarkerColor(marker: GTANetwork.Util.LocalHandle, alpha: number, r: number, g: number, b: number): void;
        getMarkerColor(marker: GTANetwork.Util.LocalHandle): System.Drawing.Color;
        setMarkerScale(marker: GTANetwork.Util.LocalHandle, scale: Vector3): void;
        getMarkerScale(marker: GTANetwork.Util.LocalHandle): Vector3;
        setMarkerDirection(marker: GTANetwork.Util.LocalHandle, dir: Vector3): void;
        getMarkerDirection(marker: GTANetwork.Util.LocalHandle): Vector3;
        deleteEntity(handle: GTANetwork.Util.LocalHandle): void;
        attachEntity(ent1: GTANetwork.Util.LocalHandle, ent2: GTANetwork.Util.LocalHandle, bone: string, positionOffset: Vector3, rotationOffset: Vector3): void;
        detachEntity(ent: GTANetwork.Util.LocalHandle): void;
        isEntityAttachedToAnything(ent: GTANetwork.Util.LocalHandle): boolean;
        isEntityAttachedToEntity(from: GTANetwork.Util.LocalHandle, to: GTANetwork.Util.LocalHandle): boolean;
        createTextLabel(text: string, pos: Vector3, range: number, size: number, entitySeethrough: boolean): GTANetwork.Util.LocalHandle;
        lerpVector(start: Vector3, end: Vector3, currentTime: number, duration: number): Vector3;
        lerpFloat(start: number, end: number, currentTime: number, duration: number): number;
        isInRangeOf(entity: Vector3, destination: Vector3, range: number): boolean;
        dxDrawTexture(path: string, pos: System.Drawing.Point, size: System.Drawing.Size, rotation: number): void;
        drawGameTexture(dict: string, txtName: string, x: number, y: number, width: number, height: number, heading: number, r: number, g: number, b: number, alpha: number): void;
        drawRectangle(xPos: number, yPos: number, wSize: number, hSize: number, r: number, g: number, b: number, alpha: number): void;
        drawText(caption: string, xPos: number, yPos: number, scale: number, r: number, g: number, b: number, alpha: number, font: number, justify: number, shadow: boolean, outline: boolean, wordWrap: number): void;
        addTextElement(caption: string, x: number, y: number, scale: number, r: number, g: number, b: number, a: number, font: number, alignment: number): NativeUI.UIResText;
        getGameTime(): number;
        getGlobalTime(): number;
        angleBetween(from: Vector3, to: Vector3): number;
        isPed(ent: GTANetwork.Util.LocalHandle): boolean;
        isVehicle(ent: GTANetwork.Util.LocalHandle): boolean;
        isProp(ent: GTANetwork.Util.LocalHandle): boolean;
        toFloat(d: number): number;
        // f(value: number): GTANetwork.Javascript.ScriptContext_fArg;
        f(value: number): any;
        sleep(ms: number): void;
        startAudio(path: string, looped: boolean): void;
        pauseAudio(): void;
        resumeAudio(): void;
        setAudioTime(seconds: number): void;
        getAudioTime(): number;
        isAudioPlaying(): boolean;
        setGameVolume(vol: number): void;
        isAudioInitialized(): boolean;
        stopAudio(): void;
        triggerServerEvent(eventName: string, ...argumentss: any[]): void;
        toString(obj: any): string;
        getBoneName(bone: number): string;
        getWeaponName(weapon: Enums.WeaponHash): string;
        getVehicleModelName(model: number): string;
        createMenu(banner: string, subtitle: string, x: number, y: number, anchor: Enums.MenuAnchor): NativeUI.UIMenu;
        createMenu(subtitle: string, x: number, y: number, anchor: Enums.MenuAnchor): NativeUI.UIMenu;
        createMenuItem(label: string, description: string): NativeUI.UIMenuItem;
        createColoredItem(label: string, description: string, hexColor: string, hexHighlightColor: string): NativeUI.UIMenuColoredItem;
        createCheckboxItem(label: string, description: string, isChecked: boolean): NativeUI.UIMenuCheckboxItem;
        createListItem(label: string, description: string, items: string, index: number): NativeUI.UIMenuListItem;
        getMenuPool(): NativeUI.MenuPool;
        drawMenu(menu: NativeUI.UIMenu): void;
        setMenuBannerSprite(menu: NativeUI.UIMenu, spritedict: string, spritename: string): void;
        setMenuBannerTexture(menu: NativeUI.UIMenu, path: string): void;
        setMenuBannerRectangle(menu: NativeUI.UIMenu, alpha: number, red: number, green: number, blue: number): void;
        setMenuTitle(menu: NativeUI.UIMenu, title: string): void;
        setMenuSubtitle(menu: NativeUI.UIMenu, text: string): void;
        getUserInput(defaultText: string, maxlen: number): string;
        isControlJustPressed(control: Enums.Controls): boolean;
        isControlPressed(control: Enums.Controls): boolean;
        isDisabledControlJustReleased(control: Enums.Controls): boolean;
        isDisabledControlJustPressed(control: Enums.Controls): boolean;
        isDisabledControlPressed(control: Enums.Controls): boolean;
        isControlJustReleased(control: Enums.Controls): boolean;
        disableControlThisFrame(control: Enums.Controls): void;
        enableControlThisFrame(control: Enums.Controls): void;
        disableAllControlsThisFrame(): void;
        getControlNormal(control: Enums.Controls): number;
        getDisabledControlNormal(control: Enums.Controls): number;
        setControlNormal(control: Enums.Controls, value: number): void;
        isChatOpen(): boolean;
        loadAnimationDict(dict: string): void;
        loadModel(model: number): void;
        requestScaleform(scaleformName: string): GTA.Scaleform;
        renderScaleform(sc: GTA.Scaleform, x: number, y: number, w: number, h: number): void;
        setEntityTransparency(entity: GTANetwork.Util.LocalHandle, alpha: number): void;
        getEntityType(entity: GTANetwork.Util.LocalHandle): Enums.EntityType;
        getEntityTransparency(entity: GTANetwork.Util.LocalHandle): number;
        setEntityDimension(entity: GTANetwork.Util.LocalHandle, dimension: number): void;
        getEntityDimension(entity: GTANetwork.Util.LocalHandle): number;
        getEntityModel(entity: GTANetwork.Util.LocalHandle): number;
        givePlayerWeapon(weapon: Enums.WeaponHash, ammo: number, equipNow: boolean, ammoLoaded: boolean): void;
        removeAllPlayerWeapons(): void;
        doesPlayerHaveWeapon(weapon: Enums.WeaponHash): boolean;
        removePlayerWeapon(weapon: Enums.WeaponHash): void;
        setWeather(weather: Enums.Weather): void;
        getWeather(): Enums.Weather;
        resetWeather(): void;
        setTime(hours: number, minutes: number): void;
        getTime(): System.TimeSpan;
        getTime(): any;
        resetTime(): void;
        onResourceStart: IEvent<() => void>;
        onResourceStop: IEvent<() => void>;
        onUpdate: IEvent<() => void>;
        onKeyDown: IEvent<(sender: any, e: System.Windows.Forms.KeyEventArgs) => void>;
        onKeyUp: IEvent<(sender: any, e: System.Windows.Forms.KeyEventArgs) => void>;
        onServerEventTrigger: IEvent<(eventName: string, argumentss: System.Array<any>) => void>;
        onChatMessage: IEvent<(msg: string) => void>;
        onChatCommand: IEvent<(msg: string) => void>;
        onEntityStreamIn: IEvent<(item: GTANetwork.Util.LocalHandle, entityType: Enums.EntityType) => void>;
        onEntityStreamOut: IEvent<(item: GTANetwork.Util.LocalHandle, entityType: Enums.EntityType) => void>;
        onEntityDataChange: IEvent<(entity: GTANetwork.Util.LocalHandle, key: string, oldValue: any) => void>;
        onCustomDataReceived: IEvent<(data: string) => void>;
        onPlayerDeath: IEvent<(killer: GTANetwork.Util.LocalHandle, weapon: Enums.WeaponHash) => void>;
        onPlayerRespawn: IEvent<() => void>;
        onPlayerPickup: IEvent<(entity: GTANetwork.Util.LocalHandle) => void>;
        onPlayerEnterVehicle: IEvent<(entity: GTANetwork.Util.LocalHandle) => void>;
        onPlayerExitVehicle: IEvent<(entity: GTANetwork.Util.LocalHandle) => void>;
        onVehicleHealthChange: IEvent<(oldValue: number) => void>;
        onVehicleDoorBreak: IEvent<(oldValue: number) => void>;
        onVehicleWindowSmash: IEvent<(oldValue: number) => void>;
        onPlayerHealthChange: IEvent<(oldValue: number) => void>;
        onPlayerArmorChange: IEvent<(oldValue: number) => void>;
        onPlayerWeaponSwitch: IEvent<(oldValue: number) => void>;
        onPlayerModelChange: IEvent<(oldValue: number) => void>;
        onVehicleSirenToggle: IEvent<() => void>;
        onPlayerDetonateStickies: IEvent<() => void>;
        onVehicleTyreBurst: IEvent<(oldValue: number) => void>;
        onLocalPlayerDamaged: IEvent<(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number, boneHit: number) => void>;
        onLocalPlayerMeleeHit: IEvent<(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number) => void>;
        onLocalPlayerShoot: IEvent<(weaponUsed: number, aimCoords: Vector3) => void>;
    }

    enum ScriptContext_ReturnType {
        Int = 0,
        UInt = 1,
        Long = 2,
        ULong = 3,
        String = 4,
        Vector3 = 5,
        Vector2 = 6,
        Float = 7,
        Bool = 8,
        Handle = 9
    }

    class ScriptContext_Raycast {
        didHitAnything: boolean;
        didHitEntity: boolean;
        hitEntity: GTANetwork.Util.LocalHandle;
        hitCoords: Vector3;
    }

    class ScriptContext_fArg {
        Value: number;
        constructor(f: number);
    }

    class ScriptContext_ServerEventTrigger {
        constructor(object: any, method: number);
        Invoke(eventName: string, argumentss: any[]): void;
        BeginInvoke(eventName: string, argumentss: any[], callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_ChatEvent {
        constructor(object: any, method: number);
        Invoke(msg: string): void;
        BeginInvoke(msg: string, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_StreamEvent {
        constructor(object: any, method: number);
        Invoke(item: GTANetwork.Util.LocalHandle, entityType: Enums.EntityType): void;
        BeginInvoke(item: GTANetwork.Util.LocalHandle, entityType: Enums.EntityType, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_DataChangedEvent {
        constructor(object: any, method: number);
        Invoke(entity: GTANetwork.Util.LocalHandle, key: string, oldValue: any): void;
        BeginInvoke(entity: GTANetwork.Util.LocalHandle, key: string, oldValue: any, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_CustomDataReceived {
        constructor(object: any, method: number);
        Invoke(data: string): void;
        BeginInvoke(data: string, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_EmptyEvent {
        constructor(object: any, method: number);
        Invoke(): void;
        BeginInvoke(callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_EntityEvent {
        constructor(object: any, method: number);
        Invoke(entity: GTANetwork.Util.LocalHandle): void;
        BeginInvoke(entity: GTANetwork.Util.LocalHandle, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_PlayerKilledEvent {
        constructor(object: any, method: number);
        Invoke(killer: GTANetwork.Util.LocalHandle, weapon: Enums.WeaponHash): void;
        BeginInvoke(killer: GTANetwork.Util.LocalHandle, weapon: Enums.WeaponHash, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_IntChangeEvent {
        constructor(object: any, method: number);
        Invoke(oldValue: number): void;
        BeginInvoke(oldValue: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_BoolChangeEvent {
        constructor(object: any, method: number);
        Invoke(oldValue: boolean): void;
        BeginInvoke(oldValue: boolean, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_PlayerDamageEvent {
        constructor(object: any, method: number);
        Invoke(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number, boneHit: number): void;
        BeginInvoke(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number, boneHit: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_PlayerMeleeDamageEvent {
        constructor(object: any, method: number);
        Invoke(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number): void;
        BeginInvoke(attacker: GTANetwork.Util.LocalHandle, weaponUsed: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    class ScriptContext_WeaponShootEvent {
        constructor(object: any, method: number);
        Invoke(weaponUsed: number, aimCoords: Vector3): void;
        BeginInvoke(weaponUsed: number, aimCoords: Vector3, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
    }

    enum StringSanitation {
        None = 0,
        Javascript = 1,
        Html = 2,
        All = 3
    }

    class xmlElement {
        name: string;
        constructor();
        hasElementData(elementName: string): boolean;
        getElementData(elementName: string, returnType: number): any;
    }

    class XmlGroup {
        constructor();
        getSubgroup(groupName: string): GTANetwork.Javascript.XmlGroup;
        hasAnyElementOfType(typeName: string): boolean;
        getNumberOfElementsOfType(typeName: string): number;
        getElementsByType(typeName: string): GTANetwork.Javascript.xmlElement[];
        getElementByType(typeName: string): GTANetwork.Javascript.xmlElement;
    }

}
declare namespace GTANetwork {

    class MasterServerList {
        list: string[];
        constructor();
    }

    class WelcomeSchema {
        Title: string;
        Message: string;
        Picture: string;
        constructor();
    }

}
declare namespace GTANetwork.Misc {

    class BiDictionary<TFirst, TSecond> {
        Reverse: TSecond[];
        Count: number;
        //System.Collections.ICollection.SyncRoot: any;
        //System.Collections.ICollection.IsSynchronized: boolean;
        //System.Collections.IDictionary.IsFixedSize: boolean;
        IsReadOnly: boolean;
        Item: TSecond;
        //System.Collections.IDictionary.Item: any;
        Keys: TFirst[];
        //System.Collections.IDictionary.Keys: System.Collections.ICollection;
        //System.Collections.Generic.IReadOnlyDictionary<TFirst,TSecond>.Keys: TFirst[];
        Values: TSecond[];
        //System.Collections.IDictionary.Values: System.Collections.ICollection;
        //System.Collections.Generic.IReadOnlyDictionary<TFirst,TSecond>.Values: TSecond[];
        constructor();
        //GetEnumerator(): System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TFirst,TSecond>>;
        GetEnumerator(): any;
        Add(key: TFirst, value: TSecond): void;
        Add(item: TFirst): void;
        ContainsKey(key: TFirst): boolean;
        Contains(item: TFirst): boolean;
        //TryGetValue(key: TFirst, value: TSecond&): boolean;
        TryGetValue(key: TFirst, value: TSecond): boolean;
        Remove(key: TFirst): boolean;
        Remove(item: TFirst): boolean;
        Contains(key: any): boolean;
        Clear(): void;
        //CopyTo(array: System.Collections.Generic.KeyValuePair<TFirst,TSecond>[], arrayIndex: number): void;
        CopyTo(array: any, arrayIndex: number): void;
    }

    class ChatData {
        Id: number;
        Sender: string;
        Message: string;
        constructor();
    }

    class GameScript {
        static DisableAll(disableeditor: boolean): void;
        static Pulse(): void;
    }

    class GameSettings {
        constructor();
        static LoadGameSettings(): GTANetwork.Misc.GameSettings_Settings;
        static SaveSettings(sets: GTANetwork.Misc.GameSettings_Settings): void;
    }

    class GameSettings_Version {
        Value: number;
        constructor();
    }

    class GameSettings_Tessellation {
        Value: number;
        constructor();
    }

    class GameSettings_LodScale {
        Value: number;
        constructor();
    }

    class GameSettings_PedLodBias {
        Value: number;
        constructor();
    }

    class GameSettings_VehicleLodBias {
        Value: number;
        constructor();
    }

    class GameSettings_ShadowQuality {
        Value: number;
        constructor();
    }

    class GameSettings_ReflectionQuality {
        Value: number;
        constructor();
    }

    class GameSettings_ReflectionMSAA {
        Value: number;
        constructor();
    }

    class GameSettings_SSAO {
        Value: number;
        constructor();
    }

    class GameSettings_AnisotropicFiltering {
        Value: number;
        constructor();
    }

    class GameSettings_MSAA {
        Value: number;
        constructor();
    }

    class GameSettings_MSAAFragments {
        Value: number;
        constructor();
    }

    class GameSettings_MSAAQuality {
        Value: number;
        constructor();
    }

    class GameSettings_SamplingMode {
        Value: number;
        constructor();
    }

    class GameSettings_TextureQuality {
        Value: number;
        constructor();
    }

    class GameSettings_ParticleQuality {
        Value: number;
        constructor();
    }

    class GameSettings_WaterQuality {
        Value: number;
        constructor();
    }

    class GameSettings_GrassQuality {
        Value: number;
        constructor();
    }

    class GameSettings_ShaderQuality {
        Value: number;
        constructor();
    }

    class GameSettings_Shadow_SoftShadows {
        Value: number;
        constructor();
    }

    class GameSettings_UltraShadows_Enabled {
        Value: boolean;
        constructor();
    }

    class GameSettings_Shadow_ParticleShadows {
        Value: boolean;
        constructor();
    }

    class GameSettings_Shadow_Distance {
        Value: number;
        constructor();
    }

    class GameSettings_Shadow_LongShadows {
        Value: boolean;
        constructor();
    }

    class GameSettings_Shadow_SplitZStart {
        Value: number;
        constructor();
    }

    class GameSettings_Shadow_SplitZEnd {
        Value: number;
        constructor();
    }

    class GameSettings_Shadow_aircraftExpWeight {
        Value: number;
        constructor();
    }

    class GameSettings_Shadow_DisableScreenSizeCheck {
        Value: boolean;
        constructor();
    }

    class GameSettings_Reflection_MipBlur {
        Value: boolean;
        constructor();
    }

    class GameSettings_FXAA_Enabled {
        Value: boolean;
        constructor();
    }

    class GameSettings_TXAA_Enabled {
        Value: boolean;
        constructor();
    }

    class GameSettings_Lighting_FogVolumes {
        Value: boolean;
        constructor();
    }

    class GameSettings_Shader_SSA {
        Value: boolean;
        constructor();
    }

    class GameSettings_DX_Version {
        Value: number;
        constructor();
    }

    class GameSettings_CityDensity {
        Value: number;
        constructor();
    }

    class GameSettings_PedVarietyMultiplier {
        Value: number;
        constructor();
    }

    class GameSettings_VehicleVarietyMultiplier {
        Value: number;
        constructor();
    }

    class GameSettings_PostFX {
        Value: number;
        constructor();
    }

    class GameSettings_DoF {
        Value: boolean;
        constructor();
    }

    class GameSettings_HdStreamingInFlight {
        Value: boolean;
        constructor();
    }

    class GameSettings_MaxLodScale {
        Value: number;
        constructor();
    }

    class GameSettings_MotionBlurStrength {
        Value: number;
        constructor();
    }

    class GameSettings_Graphics {
        Tessellation: GTANetwork.Misc.GameSettings_Tessellation;
        LodScale: GTANetwork.Misc.GameSettings_LodScale;
        PedLodBias: GTANetwork.Misc.GameSettings_PedLodBias;
        VehicleLodBias: GTANetwork.Misc.GameSettings_VehicleLodBias;
        ShadowQuality: GTANetwork.Misc.GameSettings_ShadowQuality;
        ReflectionQuality: GTANetwork.Misc.GameSettings_ReflectionQuality;
        ReflectionMSAA: GTANetwork.Misc.GameSettings_ReflectionMSAA;
        SSAO: GTANetwork.Misc.GameSettings_SSAO;
        AnisotropicFiltering: GTANetwork.Misc.GameSettings_AnisotropicFiltering;
        MSAA: GTANetwork.Misc.GameSettings_MSAA;
        MSAAFragments: GTANetwork.Misc.GameSettings_MSAAFragments;
        MSAAQuality: GTANetwork.Misc.GameSettings_MSAAQuality;
        SamplingMode: GTANetwork.Misc.GameSettings_SamplingMode;
        TextureQuality: GTANetwork.Misc.GameSettings_TextureQuality;
        ParticleQuality: GTANetwork.Misc.GameSettings_ParticleQuality;
        WaterQuality: GTANetwork.Misc.GameSettings_WaterQuality;
        GrassQuality: GTANetwork.Misc.GameSettings_GrassQuality;
        ShaderQuality: GTANetwork.Misc.GameSettings_ShaderQuality;
        Shadow_SoftShadows: GTANetwork.Misc.GameSettings_Shadow_SoftShadows;
        UltraShadows_Enabled: GTANetwork.Misc.GameSettings_UltraShadows_Enabled;
        Shadow_ParticleShadows: GTANetwork.Misc.GameSettings_Shadow_ParticleShadows;
        Shadow_Distance: GTANetwork.Misc.GameSettings_Shadow_Distance;
        Shadow_LongShadows: GTANetwork.Misc.GameSettings_Shadow_LongShadows;
        Shadow_SplitZStart: GTANetwork.Misc.GameSettings_Shadow_SplitZStart;
        Shadow_SplitZEnd: GTANetwork.Misc.GameSettings_Shadow_SplitZEnd;
        Shadow_aircraftExpWeight: GTANetwork.Misc.GameSettings_Shadow_aircraftExpWeight;
        Shadow_DisableScreenSizeCheck: GTANetwork.Misc.GameSettings_Shadow_DisableScreenSizeCheck;
        Reflection_MipBlur: GTANetwork.Misc.GameSettings_Reflection_MipBlur;
        FXAA_Enabled: GTANetwork.Misc.GameSettings_FXAA_Enabled;
        TXAA_Enabled: GTANetwork.Misc.GameSettings_TXAA_Enabled;
        Lighting_FogVolumes: GTANetwork.Misc.GameSettings_Lighting_FogVolumes;
        Shader_SSA: GTANetwork.Misc.GameSettings_Shader_SSA;
        DX_Version: GTANetwork.Misc.GameSettings_DX_Version;
        CityDensity: GTANetwork.Misc.GameSettings_CityDensity;
        PedVarietyMultiplier: GTANetwork.Misc.GameSettings_PedVarietyMultiplier;
        VehicleVarietyMultiplier: GTANetwork.Misc.GameSettings_VehicleVarietyMultiplier;
        PostFX: GTANetwork.Misc.GameSettings_PostFX;
        DoF: GTANetwork.Misc.GameSettings_DoF;
        HdStreamingInFlight: GTANetwork.Misc.GameSettings_HdStreamingInFlight;
        MaxLodScale: GTANetwork.Misc.GameSettings_MaxLodScale;
        MotionBlurStrength: GTANetwork.Misc.GameSettings_MotionBlurStrength;
        constructor();
    }

    class GameSettings_NumBytesPerReplayBlock {
        Value: number;
        constructor();
    }

    class GameSettings_NumReplayBlocks {
        Value: number;
        constructor();
    }

    class GameSettings_MaxSizeOfStreamingReplay {
        Value: number;
        constructor();
    }

    class GameSettings_MaxFileStoreSize {
        Value: number;
        constructor();
    }

    class GameSettings_System {
        NumBytesPerReplayBlock: GTANetwork.Misc.GameSettings_NumBytesPerReplayBlock;
        NumReplayBlocks: GTANetwork.Misc.GameSettings_NumReplayBlocks;
        MaxSizeOfStreamingReplay: GTANetwork.Misc.GameSettings_MaxSizeOfStreamingReplay;
        MaxFileStoreSize: GTANetwork.Misc.GameSettings_MaxFileStoreSize;
        constructor();
    }

    class GameSettings_Audio3d {
        Value: boolean;
        constructor();
    }

    class GameSettings_Audio {
        Audio3d: GTANetwork.Misc.GameSettings_Audio3d;
        constructor();
    }

    class GameSettings_AdapterIndex {
        Value: number;
        constructor();
    }

    class GameSettings_OutputIndex {
        Value: number;
        constructor();
    }

    class GameSettings_ScreenWidth {
        Value: number;
        constructor();
    }

    class GameSettings_ScreenHeight {
        Value: number;
        constructor();
    }

    class GameSettings_RefreshRate {
        Value: number;
        constructor();
    }

    class GameSettings_Windowed {
        Value: number;
        constructor();
    }

    class GameSettings_VSync {
        Value: number;
        constructor();
    }

    class GameSettings_Stereo {
        Value: number;
        constructor();
    }

    class GameSettings_Convergence {
        Value: number;
        constructor();
    }

    class GameSettings_Separation {
        Value: number;
        constructor();
    }

    class GameSettings_PauseOnFocusLoss {
        Value: number;
        constructor();
    }

    class GameSettings_AspectRatio {
        Value: number;
        constructor();
    }

    class GameSettings_Video {
        AdapterIndex: GTANetwork.Misc.GameSettings_AdapterIndex;
        OutputIndex: GTANetwork.Misc.GameSettings_OutputIndex;
        ScreenWidth: GTANetwork.Misc.GameSettings_ScreenWidth;
        ScreenHeight: GTANetwork.Misc.GameSettings_ScreenHeight;
        RefreshRate: GTANetwork.Misc.GameSettings_RefreshRate;
        Windowed: GTANetwork.Misc.GameSettings_Windowed;
        VSync: GTANetwork.Misc.GameSettings_VSync;
        Stereo: GTANetwork.Misc.GameSettings_Stereo;
        Convergence: GTANetwork.Misc.GameSettings_Convergence;
        Separation: GTANetwork.Misc.GameSettings_Separation;
        PauseOnFocusLoss: GTANetwork.Misc.GameSettings_PauseOnFocusLoss;
        AspectRatio: GTANetwork.Misc.GameSettings_AspectRatio;
        constructor();
    }

    class GameSettings_Settings {
        Version: GTANetwork.Misc.GameSettings_Version;
        ConfigSource: string;
        Graphics: GTANetwork.Misc.GameSettings_Graphics;
        System: GTANetwork.Misc.GameSettings_System;
        Audio: GTANetwork.Misc.GameSettings_Audio;
        Video: GTANetwork.Misc.GameSettings_Video;
        VideoCardDescription: string;
        constructor();
    }

    class KeyValuePairExts {
        //static Reverse(this: TKey): System.Collections.Generic.KeyValuePair<TValue,TKey>;
        static Reverse(thiss: any): any;
    }

    class Program {
        Location: string;
        static Main(args: string[]): void;
        static ProcessMessages(sender: any): void;
        static DeserializeBinary(data: any): any;
        static SerializeBinary(data: any): any;
    }

    class WeaponDataProvider {
        static IsWeaponAutomatic(hash: Enums.WeaponHash): boolean;
        static DoesVehicleHaveParallelWeapon(model: GTA.VehicleHash, rockets: boolean): boolean;
        static DoesVehiclesMuzzleDifferFromVehicleGunPos(model: GTA.VehicleHash): boolean;
        static DoesVehicleSeatHaveMountedGuns(vehicle: GTA.VehicleHash): boolean;
        static NeedsFakeBullets(wephash: number): boolean;
        static NeedsManualRotation(wephash: number): boolean;
        static GetVehicleWeaponMuzzle(model: GTA.VehicleHash, rockets: boolean): GTA.Math.Vector3;
        static GetVehicleTurretLength(veh: GTA.VehicleHash): number;
        static IsVehicleWeaponRocket(hash: number): boolean;
        static DoesVehicleSeatHaveGunPosition(vehicle: GTA.VehicleHash, vehiclepos: number, anySeat: boolean): boolean;
        static GetWeaponDamage(weapon: Enums.WeaponHash): number;
    }

}
declare namespace GTANetwork.Networking {

    class DeltaCompressor {
        DataReceived: number[];
        LastPacketReceived: any;
        LastSentObject: any;
        constructor();
        DecompressData(compressedPacket: any): any;
        static CompressData(fullPacket: any): any;
    }

    interface ILocalHandleable {
        LocalHandle: number;
    }

    interface IStreamedItem {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class PedThread {
        constructor();
        static OnTick(sender: any, e: System.EventArgs): void;
    }

    class RemoteBlip implements GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemoteMarker implements GTANetwork.Networking.IStreamedItem {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemoteParticle implements GTANetwork.Networking.IStreamedItem, GTANetwork.Networking.ILocalHandleable {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        LocalHandle: number;
        Position: Vector3;
        constructor();
        GetHashCode(): number;

        //
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemotePed implements GTANetwork.Networking.IStreamedItem, GTANetwork.Networking.ILocalHandleable {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        LocalHandle: number;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemotePickup implements GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemotePlayer implements GTANetwork.Networking.IStreamedItem, GTANetwork.Networking.ILocalHandleable {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        LocalHandle: number;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemoteProp implements GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemoteTextLabel implements GTANetwork.Networking.IStreamedItem {
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class RemoteVehicle implements GTANetwork.Networking.ILocalHandleable, GTANetwork.Networking.IStreamedItem {
        LocalHandle: number;
        RemoteHandle: number;
        LocalOnly: boolean;
        StreamedIn: boolean;
        constructor();
        GetHashCode(): number;

        //
        Position: Vector3;
        EntityType: Enums.EntityType;
        Dimension: number;
        AttachedTo: Attachment;
        Attachables: number[];
        PositionMovement: Movement;
        RotationMovement: Movement;
    }

    class SyncCollector {
        constructor();
    }

}
declare namespace GTANetwork.Util {

    class CachedString {
        LastAccess: Date;
        Data: string;
        Pointer: number;
        Allocated: boolean;
        constructor();
        Free(): void;
        Allocate(text: string): void;
    }

    class ConstantVehicleData {
        DisplayName: string;
        MaxSpeed: number;
        MaxBraking: number;
        MaxTraction: number;
        MaxAcceleration: number;
        _0xBFBA3BA79CFF7EBF: number;
        _0x53409B5163D5B846: number;
        _0xC6AD107DDC9054CC: number;
        _0x5AA3F878A178C4FC: number;
        MaxNumberOfPassengers: number;
        MaxOccupants: number;
        VehicleClass: number;
    }

    class DataCollector {
        static Collect(): void;
    }

    class DebugWindow {
        Visible: boolean;
        PlayerIndex: number;
        constructor();
        Draw(): void;
    }

    enum ESubtask {
        AIMED_SHOOTING_ON_FOOT = 4,
        GETTING_UP = 16,
        MOVING_ON_FOOT_NO_COMBAT = 35,
        MOVING_ON_FOOT_COMBAT = 38,
        USING_LADDER = 47,
        CLIMBING = 50,
        GETTING_OFF_SOMETHING = 51,
        SWAPPING_WEAPON = 56,
        REMOVING_HELMET = 92,
        DEAD = 97,
        SCENARIO = 118,
        MELEE_COMBAT = 130,
        HITTING_MELEE = 130,
        ANIMATION = 134,
        SITTING_IN_VEHICLE = 150,
        DRIVING_WANDERING = 151,
        EXITING_VEHICLE = 152,
        ENTERING_VEHICLE_GENERAL = 160,
        ENTERING_VEHICLE_BREAKING_WINDOW = 161,
        ENTERING_VEHICLE_OPENING_DOOR = 162,
        ENTERING_VEHICLE_ENTERING = 163,
        ENTERING_VEHICLE_CLOSING_DOOR = 164,
        EXIING_VEHICLE_OPENING_DOOR_EXITING = 167,
        EXITING_VEHICLE_CLOSING_DOOR = 168,
        DRIVING_GOING_TO_DESTINATION_OR_ESCORTING = 169,
        USING_MOUNTED_WEAPON = 199,
        DRIVE_BY = 200,
        IN_COVER_GENERAL = 287,
        IN_COVER_FULLY_IN_COVER = 288,
        AIMING_THROWABLE = 289,
        AIMING_GUN = 290,
        RELOADING = 298,
        AIMING_PREVENTED_BY_OBSTACLE = 299,
        RUNNING_TO_COVER = 300,
        IN_COVER_TRANSITION_TO_AIMING_FROM_COVER = 302,
        IN_COVER_TRANSITION_FROM_AIMING_FROM_COVER = 303,
        IN_COVER_BLIND_FIRE = 304,
        PARACHUTING = 334,
        PUTTING_OFF_PARACHUTE = 336,
        JUMPING_OR_CLIMBING_GENERAL = 420,
        JUMPING_AIR = 421,
        JUMPING_FINISHING_JUMP = 422
    }

    class GTAMemory {
        static GetGlobalAddress(index: number): number;
    }

    enum HandleType {
        GameHandle = 0,
        LocalHandle = 1,
        NetHandle = 2
    }

    class InputboxThread {
        //ThreadJumper: System.Action[];
        ThreadJumper: Function[];
        constructor();
        //static GetUserInput(defaultText: string, maxLen: number, spinner: System.Action): string;
        static GetUserInput(defaultText: string, maxLen: number, spinner: Function): string;
        //static GetUserInput(maxLen: number, spinner: System.Action): string;
        static GetUserInput(maxLen: number, spinner: Function): string;
        //static GetUserInput(spinner: System.Action): string;
        static GetUserInput(spinner: Function): string;
    }

    class Interpolator<T> {
        constructor();
        Push(newData: T, ticks: number): void;
        Pop(): void;
        //Evaluate(ulTime: number, output: T&): boolean;
        Evaluate(ulTime: number, output: T): boolean;
        //GetOldestEntry(output: T&): number;
        GetOldestEntry(output: T): number;
        Clear(): void;
    }

    class LocalHandle {
        HandleType: GTANetwork.Util.HandleType;
        Raw: number;
        Value: number;
        IsNull: boolean;
        constructor(handle: number);
        constructor(handle: number, localId: GTANetwork.Util.HandleType);
        //Properties(): T;
        Properties(): any;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
    }

    class LogManager {
        LogDirectory: string;
        errorLogLock: any;
        constructor();
        static CreateLogDirectory(): void;
        static SimpleLog(filename: string, text: string): void;
        static DebugLog(text: string): void;
        static AlwaysDebugLog(text: string): void;
        //static LogException(ex: System.Exception, source: string): void;
        static LogException(ex: any, source: string): void;
    }

    class Memory {
        BaseAddress: number;
        ModuleSize: number;
        static FindPattern(pattern: string): number;
        static FindPattern(pattern: string, startAddress: number, searchSize: number): number;
        static ReadPtr(ptr: number): number;
        static ReadInt(ptr: number): number;
        static ReadShort(ptr: number): number;
        static ReadByte(ptr: number): number;
        static ReadLong(ptr: number): number;
        static ReadUInt(ptr: number): number;
        static ReadUShort(ptr: number): number;
        //static ReadSByte(ptr: number): System.SByte;
        static ReadSByte(ptr: number): any;
        static ReadULong(ptr: number): number;
        static ReadBytes(ptr: number, buffer: any, count: number, offset: number): void;
        static ReadBytes(ptr: number, buffer: any): void;
        static WriteInt(ptr: number, value: number): void;
        static WriteShort(ptr: number, value: number): void;
        static WriteByte(ptr: number, value: number): void;
        static WriteLong(ptr: number, value: number): void;
        static WriteUInt(ptr: number, value: number): void;
        static WriteUShort(ptr: number, value: number): void;
        //static WriteSByte(ptr: number, value: System.SByte): void;
        static WriteSByte(ptr: number, value: any): void;
        static WriteULong(ptr: number, value: number): void;
        static WriteBytes(ptr: number, buffer: any, count: number, offset: number): void;
        static WriteBytes(ptr: number, buffer: any): void;
    }

    class MimeTypes {
        constructor();
        static GetMimeType(file: any, fileName: string): string;
    }

    class ModelSpoofer {
        constructor(ent: GTA.Entity, fakeModel: number);
        Pulse(): void;
        static Spoof(ent: GTA.Entity, model: number): void;
    }

    class NativeWhitelist {
        static Init(): void;
        static IsAllowed(native: number): boolean;
    }

    class Screenshot {
        constructor();
        static TakeScreenshot(name: string): void;
    }

    class ScriptTable {
        Count: number;
        IsTableInitialised: boolean;
        static GetScriptAddress(hash: number): number;
        static DoesScriptExist(hash: number): boolean;
        static IsScriptLoaded(hash: number): boolean;
    }

    class ScriptTable_ScriptTableItem {
        ScriptStartAddress: number;
        ScriptHash: number;
    }

    class StickyBombTracker {
        constructor();
    }

    class StringCache {
        Timeout: number;
        createdCache: boolean;
        constructor();
        GetCached(text: string): number;
        Pulse(): void;
        Dispose(): void;
    }

    class Subtask {
        static IsSubtaskActive(ped: GTA.Ped, sub: GTANetwork.Util.ESubtask): boolean;
        static IsSubtaskActive(ped: GTA.Ped, sub: number): boolean;
        static IsSubtaskActive(ped: number, sub: GTANetwork.Util.ESubtask): boolean;
        static IsSubtaskActive(ped: number, sub: number): boolean;
        static Debug(): void;
    }

    class User32 {
        constructor();
        //static GetWindowRect(hWnd: number, rect: GTANetwork.Util.User32_Rect&): number;
        static GetWindowRect(hWnd: number, rect: GTANetwork.Util.User32_Rect): number;
        static PrintWindow(hwnd: number, hdc: number, nFlags: number): boolean;
    }

    class User32_Rect {
        left: number;
        top: number;
        right: number;
        bottom: number;
    }

    class Util {
        ModelRequest: boolean;
        TickCount: number;
        //static Clamp(min: T, value: T, max: T): T;
        static Clamp(min: any, value: any, max: any): any;
        static Floor(point: System.Drawing.PointF): System.Drawing.Point;
        static IsPed(ent: GTA.Entity): boolean;
        static ToF2(vector: GTA.Math.Vector3): string;
        static IsExitingLeavingCar(player: GTA.Ped): boolean;
        static SetNonStandardVehicleMod(veh: GTA.Vehicle, slot: number, value: number): void;
        static LoadModel(model: GTA.Model): void;
        static LoadWeapon(model: number): void;
        static BuildTyreFlag(veh: GTA.Vehicle): number;
        static BuildTyreArray(veh: GTA.Vehicle): boolean[];
        static Unlerp(left: number, center: number, right: number): number;
        static Lerp(from: any, fAlpha: number, to: any): any;
        static GetStationId(): number;
        static GetAllBlips(): GTA.Blip[];
        static SetPlayerSkin(skin: GTA.PedHash): void;
        static Denormalize(h: number): number;
        static Denormalize(v: GTA.Math.Vector3): GTA.Math.Vector3;
        static ToRadians(val: number): number;
        static ToRadians(i: GTA.Math.Vector3): GTA.Math.Vector3;
        static SafeNotify(msg: string): void;
        static GetStationName(id: number): string;
        static GetMod(veh: GTA.Vehicle, id: number): number;
        static SetMod(veh: GTA.Vehicle, id: number, varr: number, useless: boolean): number;
        static IsInRangeOfEx(ent: GTA.Entity, pos: GTA.Math.Vector3, range: number): boolean;
        static GetVehicleDamageModel(veh: GTA.Vehicle): VehicleDamageModel;
        static SetVehicleDamageModel(veh: GTA.Vehicle, model: VehicleDamageModel, leavedoors: boolean): void;
        static WriteMemory(pointer: number, value: number, length: number): void;
        static FindPattern(bytes: string, mask: string): number;
        static DxDrawTexture(idx: number, filename: string, xPos: number, yPos: number, txdWidth: number, txdHeight: number, rot: number, r: number, g: number, b: number, a: number, centered: boolean): void;
        static DrawSprite(dict: string, txtName: string, x: number, y: number, width: number, height: number, heading: number, r: number, g: number, b: number, alpha: number): void;
        static DrawRectangle(xPos: number, yPos: number, wSize: number, hSize: number, r: number, g: number, b: number, alpha: number): void;
        static DrawText(caption: string, xPos: number, yPos: number, scale: number, r: number, g: number, b: number, alpha: number, font: number, justify: number, shadow: boolean, outline: boolean, wordWrap: number): void;
        static GetOffsetDegrees(a: number, b: number): number;
        static ToEuler(q: GTA.Math.Quaternion): GTA.Math.Vector3;
        static GetResponsiblePed(veh: GTA.Vehicle): GTA.Ped;
        static ToQuaternion(vect: GTA.Math.Vector3): GTA.Math.Quaternion;
        static FromArgb(a: number, r: number, g: number, b: number): number;
        //static ToArgb(argb: number, a: number&, r: number&, g: number&, b: number&): void;
        static ToArgb(argb: number, a: number, r: number, g: number, b: number): void;
        static GetTrackId(): number;
        static IsVehicleEmpty(veh: GTA.Vehicle): boolean;
        static LoadDict(dict: string): string;
        static LoadPtfxAsset(dict: string): string;
        static LoadAnimDictStreamer(dict: string): string;
        static LinearVectorLerp(start: GTA.Math.Vector3, end: GTA.Math.Vector3, currentTime: number, duration: number): GTA.Math.Vector3;
        static LinearFloatLerp(start: number, end: number, currentTime: number, duration: number): number;
        static GetVehicleMods(veh: GTA.Vehicle): number[];
        static GetPlayerProps(ped: GTA.Ped): number[];
        static SetVehicleSteeringAngle(veh: GTA.Vehicle, angle: number): void;
        static GetPedSeat(ped: GTA.Ped): number;
        static GetOffsetInWorldCoords(ent: GTA.Entity, offset: GTA.Math.Vector3): GTA.Math.Vector3;
        static GetOffsetFromWorldCoords(ent: GTA.Entity, pos: GTA.Math.Vector3): GTA.Math.Vector3;
        static IsTireBurst(veh: GTA.Vehicle, wheel: number): boolean;
        static GetFreePassengerSeat(veh: GTA.Vehicle): number;
        static ReadSettings(path: string): PlayerSettings;
        static SaveSettings(path: string): void;
        static GetLastWeaponImpact(ped: GTA.Ped): GTA.Math.Vector3;
        static LerpQuaternion(start: GTA.Math.Quaternion, end: GTA.Math.Quaternion, speed: number): GTA.Math.Quaternion;
        static LerpVector(start: GTA.Math.Vector3, end: GTA.Math.Vector3, speed: number): GTA.Math.Vector3;
        static QuaternionToEuler(quat: GTA.Math.Quaternion): GTA.Math.Vector3;
    }

    class VectorExtensions {
        static ToQuaternion(q: Quaternion): GTA.Math.Quaternion;
        static ToVector(v: Vector3): GTA.Math.Vector3;
        static ToLVector(vec: GTA.Math.Vector3): Vector3;
        static ToLQuaternion(vec: GTA.Math.Quaternion): Quaternion;
        static LengthSquared(left: Vector3): number;
        static Length(left: Vector3): number;
        static Sub(left: Vector3, right: Vector3): Vector3;
        static Add(left: Vector3, right: Vector3): Vector3;
    }

}

