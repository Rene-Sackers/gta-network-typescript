//****************************************************************
//  Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       v0.1.5081.42854 - SHA1:66c203d - Debug
//  Date:          12/28/2016 8:15:27 PM
//
//  Assemblies:
//    dll
//
//****************************************************************

declare interface Attachment {
    NetHandle: number;
    PositionOffset: Vector3;
    RotationOffset: Vector3;
    Bone: string;
}

declare interface BitReader {
    CurrentIndex: number;
}

declare interface BlipProperties {
    Sprite: number;
    Scale: number;
    Color: number;
    IsShortRange: boolean;
    AttachedNetEntity: number;
    RangedBlip: number;
    Name: string;
}

declare interface BooleanArgument {
    Data: boolean;
}

declare interface ClientsideScript {
    ResourceParent: string;
    Script: string;
    Filename: string;
    MD5Hash: string;
}

declare enum ConnectionChannel {
    Default,
    FileTransfer,
    NativeCall,
    Chat,
    EntityBackend,
    PositionData,
    SyncEvent,
    PureSync,
    LightSync,
    BasicSync,
    BulletSync,
    UnoccupiedVeh
}

declare interface ConnectionRequest {
    SocialClubName: string;
    Password: string;
    DisplayName: string;
    GameVersion: number;
    ScriptVersion: number;
}

declare interface ConnectionResponse {
    CharacterHandle: number;
    Settings: SharedSettings;
    ServerVersion: number;
}

declare interface CreateEntity {
    NetHandle: number;
    EntityType: number;
    Properties: EntityProperties;
}

declare interface DataDownloadStart {
    Id: number;
    FileType: number;
    FileName: string;
    ResourceParent: string;
    Length: number;
    Md5Hash: string;
}

declare interface DeleteEntity {
    NetHandle: number;
}

declare interface Delta_BlipProperties {
    Sprite?: number;
    Scale?: number;
    Color?: number;
    IsShortRange?: boolean;
    AttachedNetEntity?: number;
    RangedBlip?: number;
    Name: string;
}

declare interface Delta_EntityProperties {
    Position: Vector3;
    Rotation: Vector3;
    ModelHash?: number;
    EntityType?: number;
    Alpha?: number;
    Dimension?: number;
    AttachedTo: Attachment;
    Attachables: number[];
    Flag?: number;
    SyncedProperties: string[];
    PositionMovement: Movement;
    RotationMovement: Movement;
    IsInvincible?: boolean;
}

declare interface Delta_MarkerProperties {
    Direction: Vector3;
    MarkerType?: number;
    Red?: number;
    Green?: number;
    Blue?: number;
    Scale: Vector3;
}

declare interface Delta_ParticleProperties {
    Library: string;
    Name: string;
    Scale?: number;
    EntityAttached?: number;
    BoneAttached?: number;
}

declare interface Delta_PedProperties {
    LoopingAnimation: string;
}

declare interface Delta_PickupProperties {
    Amount?: number;
    PickedUp?: boolean;
    RespawnTime?: number;
    CustomModel?: number;
}

declare interface Delta_PlayerProperties {
    Props: number[];
    Textures: number[];
    BlipSprite?: number;
    Team?: number;
    BlipColor?: number;
    BlipAlpha?: number;
    Accessories: number[];
    Name: string;
    WeaponTints: number[];
    WeaponComponents: number[];
    NametagText: string;
    NametagSettings?: number;
}

declare interface Delta_TextLabelProperties {
    Text: string;
    Red?: number;
    Green?: number;
    Blue?: number;
    Size?: number;
    Range?: number;
    EntitySeethrough?: boolean;
}

declare interface Delta_VehicleProperties {
    PrimaryColor?: number;
    SecondaryColor?: number;
    Health?: number;
    IsDead?: boolean;
    Mods: number[];
    Siren?: boolean;
    Doors?: number;
    Trailer?: number;
    Tires?: number;
    Livery?: number;
    NumberPlate: string;
    VehicleComponents?: number;
    TraileredBy?: number;
    DamageModel: VehicleDamageModel;
}

declare interface Delta_WorldProperties {
    Hours?: number;
    Minutes?: number;
    Weather: string;
    LoadedIpl: string[];
    RemovedIpl: string[];
}

declare interface DiscoveryResponse {
    ServerName: string;
    MaxPlayers: number;
    PlayerCount: number;
    PasswordProtected: boolean;
    Port: number;
    Gamemode: string;
    LAN: boolean;
}

declare interface EntityArgument {
    NetHandle: number;
}

declare enum EntityFlag {
    Collisionless,
    EngineOff,
    SpecialLight,
    PlayerSpectating,
    VehicleLocked
}

declare interface EntityPointerArgument {
    NetHandle: number;
}

declare interface EntityProperties {
    Position: Vector3;
    Rotation: Vector3;
    ModelHash: number;
    EntityType: number;
    Alpha: number;
    Dimension: number;
    AttachedTo: Attachment;
    Attachables: number[];
    Flag: number;
    SyncedProperties: string[];
    PositionMovement: Movement;
    RotationMovement: Movement;
    IsInvincible: boolean;
}

declare enum EntityType {
    Vehicle,
    Prop,
    Blip,
    Marker,
    Pickup,
    Player,
    TextLabel,
    Ped,
    Particle,
    World
}

declare interface Extensions {
}

declare interface FileDeclaration {
    type: FileType;
    path: string;
    hash: string;
}

declare interface FileManifest {
    exportedFiles: string[];
}

declare enum FileType {
    Normal,
    Map,
    Script,
    EndOfTransfer,
    CustomData
}

declare interface FloatArgument {
    Data: number;
}

declare interface GTANSchemeListener {
}

declare interface ImpatientWebClient {
    Timeout: number;
}

declare interface IntArgument {
    Data: number;
}

declare interface LauncherSettings {
    GameParams: string[];
}

declare interface LauncherSettings_ISubprocessBehaviour {
}

declare enum Lights {
    NormalLights,
    Highbeams
}

declare interface ListArgument {
    Data: NativeArgument[];
}

declare interface LocalGamePlayerArgument {
}

declare interface LocalPlayerArgument {
}

declare interface MarkerProperties {
    Direction: Vector3;
    MarkerType: number;
    Red: number;
    Green: number;
    Blue: number;
    Scale: Vector3;
}

declare interface MasterServerAnnounce {
    Port: number;
    MaxPlayers: number;
    ServerName: string;
    CurrentPlayers: number;
    Gamemode: string;
    Map: string;
    Passworded: boolean;
}

declare interface MimeType {
}

declare interface Movement {
    Duration: number;
    Start: number;
    StartVector: Vector3;
    EndVector: Vector3;
    ServerStartTime: number;
}

declare interface NativeArgument {
    Id: string;
}

declare interface NativeData {
    Hash: number;
    Arguments: NativeArgument[];
    ReturnType: NativeArgument;
    Id: number;
}

declare interface NativeResponse {
    Response: NativeArgument;
    Id: number;
}

declare interface NativeTickCall {
    Native: NativeData;
    Identifier: string;
}

declare interface NetHandle {
    IsNull: boolean;
    Value: number;
}

declare enum NonStandardVehicleMod {
    BulletproofTyres,
    NumberPlateStyle,
    PearlescentColor,
    WheelColor,
    WheelType,
    ModColor1,
    ModColor2,
    TyreSmokeColor,
    WindowTint,
    EnginePowerMultiplier,
    EngineTorqueMultiplier,
    NeonLightPos,
    NeonLightColor,
    DashboardColor,
    TrimColor
}

declare interface OpponentPedHandleArgument {
    Data: number;
}

declare interface PacketOptimization {
}

declare enum PacketType {
    ChatData,
    PlayerDisconnect,
    NpcVehPositionData,
    NpcPedPositionData,
    WorldSharingStop,
    DiscoveryResponse,
    ConnectionRequest,
    NativeCall,
    NativeResponse,
    PlayerRespawned,
    NativeTick,
    NativeTickRecall,
    NativeOnDisconnect,
    NativeOnDisconnectRecall,
    CreateEntity,
    DeleteEntity,
    ScriptEventTrigger,
    SyncEvent,
    FileTransferTick,
    FileTransferRequest,
    FileTransferComplete,
    ConnectionConfirmed,
    PlayerKilled,
    StopResource,
    UpdateEntityProperties,
    FileAcceptDeny,
    ServerEvent,
    RedownloadManifest,
    PedPureSync,
    PedLightSync,
    VehiclePureSync,
    VehicleLightSync,
    BasicSync,
    BulletSync,
    UnoccupiedVehStartStopSync,
    UnoccupiedVehSync,
    BasicUnoccupiedVehSync
}

declare interface ParseableVersion {
    Major: number;
    Minor: number;
    Revision: number;
    Build: number;
}

declare interface ParticleProperties {
    Library: string;
    Name: string;
    Scale: number;
    EntityAttached: number;
    BoneAttached: number;
}

declare interface PedData {
    Position: Vector3;
    NetHandle?: number;
    PedModelHash?: number;
    Quaternion: Vector3;
    AimCoords: Vector3;
    WeaponHash?: number;
    PlayerHealth?: number;
    Latency?: number;
    Speed?: number;
    PedArmor?: number;
    Flag?: number;
    Velocity: Vector3;
    VehicleTryingToEnter?: number;
    SeatTryingToEnter?: number; // System.SByte
}

declare enum PedDataFlags {
    Jumping,
    Shooting,
    Aiming,
    ParachuteOpen,
    Ragdoll,
    InMeleeCombat,
    InFreefall,
    IsInCover,
    IsInLowerCover,
    IsInCoverFacingLeft,
    IsReloading,
    HasAimData,
    IsOnLadder,
    IsVaulting,
    EnteringVehicle,
    ClosingVehicleDoor,
    OnFire,
    PlayerDead
}

declare interface PedProperties {
    LoopingAnimation: string;
}

declare enum PickupHash {
    PortablePackage,
    WeaponBullpupRifle,
    WeaponBat,
    AmmoRPG,
    VehicleWeaponMolotov,
    WeaponMG,
    WeaponCrowbar,
    AmmoGrenadeLauncher,
    WeaponGolfclub,
    WeaponCombatPistol,
    Health,
    WeaponAssaultShotgun,
    WeaponSawnoffShotgun,
    WeaponHeavyPistol,
    AmmoGrenadeLauncherMP,
    VehicleWeaponPistol,
    VehicleCustomScript,
    VehicleWeaponGrenade,
    WeaponPumpShotgun,
    WeaponPipebomb,
    WeaponCombatMG,
    WeaponAdvancedRifle,
    VehicleWeaponMicroSMG,
    WeaponAutoshotgun,
    AmmoSniper,
    WeaponSNSPistol,
    WeaponPetrolCan,
    VehicleWeaponAPPistol,
    MoneyCase,
    VehicleWeaponCombatPistol,
    WeaponMiniSMG,
    AmmoMG,
    MoneySecurityCase,
    WeaponCarbineRifle,
    AmmoRifle,
    WeaponWrench,
    WeaponCompactLauncher,
    AmmoMinigun,
    WeaponAssaultRifle,
    AmmoMissileMP,
    WeaponPistol,
    WeaponBottle,
    MoneyVariable,
    WeaponSniperRifle,
    WeaponPoolcue,
    WeaponSpecialCarbine,
    WeaponBattleaxe,
    VehicleHealth,
    AmmoSMG,
    MoneyMedBag,
    HealthSnack,
    WeaponSmokeGrenade,
    WeaponMicroSMG,
    MoneyPurse,
    AmmoPistol,
    MoneyDepBag,
    WeaponKnife,
    CustomScript,
    VehicleWeaponStickyBomb,
    WeaponMolotov,
    VehicleWeaponSawnoffShotgun,
    WeaponGrenadeLauncher,
    WeaponMinigun,
    WeaponSMG,
    WeaponAPPistol,
    Armour,
    WeaponRPG,
    AmmoBulletMP,
    MoneyWallet,
    WeaponGrenade,
    WeaponNightstick,
    VehicleWeaponSmokeGrenade,
    Parachute,
    WeaponHeavySniper,
    PortableCrateUnfixed,
    MoneyPaperBag,
    AmmoShotgun,
    WeaponStickyBomb
}

declare interface PickupProperties {
    Amount: number;
    PickedUp: boolean;
    RespawnTime: number;
    CustomModel: number;
}

declare interface PickupToWeapon {
}

declare interface PlayerDisconnect {
    Id: number;
}

declare interface PlayerProperties {
    Props: number[];
    Textures: number[];
    BlipSprite: number;
    Team: number;
    BlipColor: number;
    BlipAlpha: number;
    Accessories: number[];
    Name: string;
    WeaponTints: number[];
    WeaponComponents: number[];
    NametagText: string;
    NametagSettings: number;
}

declare interface PlayerSettings {
    DisplayName: string;
    MasterServerAddress: string;
    FavoriteServers: string[];
    RecentServers: string[];
    ScaleChatWithSafezone: boolean;
    SteamPowered: boolean;
    UpdateChannel: string;
    DisableRockstarEditor: boolean;
    ScreenshotKey: number; // System.Windows.Forms.Keys
    CefFps: number;
    StartGameInOfflineMode: boolean;
    AutosetBorderlessWindowed: boolean;
    UseClassicChat: boolean;
    ChatboxXOffset: number;
    ChatboxYOffset: number;
}

declare interface Quaternion {
    W: number;
}

declare interface ScriptCollection {
    ClientsideScripts: ClientsideScript[];
}

declare interface ScriptEventTrigger {
    EventName: string;
    Arguments: NativeArgument[];
    Resource: string;
}

declare enum ScriptVersion {
    Unknown,
    VERSION_0_6,
    VERSION_0_6_1,
    VERSION_0_7,
    VERSION_0_8_1,
    VERSION_0_9
}

declare enum ServerEventType {
    PlayerTeamChange,
    PlayerBlipColorChange,
    PlayerBlipAlphaChange,
    PlayerBlipSpriteChange,
    PlayerSpectatorChange,
    PlayerAnimationStart,
    PlayerAnimationStop,
    EntityDetachment,
    WeaponPermissionChange
}

declare interface ServerMap {
    Objects: number[];
    Vehicles: number[];
    Blips: number[];
    Markers: number[];
    Pickups: number[];
    Players: number[];
    TextLabels: number[];
    Peds: number[];
    Particles: number[];
    World: WorldProperties;
}

declare interface ServerSettings {
    Name: string;
    Port: number;
    MaxPlayers: number;
    MinimumClientVersion: string;
    AutoUpdateMinClientVersion: boolean;
    Announce: boolean;
    UseUPnP: boolean;
    AnnounceToLan: boolean;
    Password: string;
    MasterServer: string;
    Resources: ServerSettings_SettingsResFilepath[];
    UseACL: boolean;
    LogToFile: boolean;
    VehicleLagCompensation: boolean;
    OnFootLagCompensation: boolean;
    RefreshHz: number;
    LogLevel: number;
    UseHTTPServer: boolean;
    EnableClientsideEntityProperties: boolean;
    LocalAddress: string;
    whitelist: WhitelistCollection;
}

declare interface ServerSettings_SettingsResFilepath {
    Path: string;
}

declare interface SharedSettings {
    VehicleLagCompensation: boolean;
    OnFootLagCompensation: boolean;
    ModWhitelist: string[];
    UseHttpServer: boolean;
}

declare interface StringArgument {
    Data: string;
}

declare interface SyncEvent {
    EventType: number;
    Arguments: NativeArgument[];
}

declare enum SyncEventType {
    LandingGearChange,
    DoorStateChange,
    BooleanLights,
    TrailerDeTach,
    TireBurst,
    RadioChange,
    PickupPickedUp,
    StickyBombDetonation
}

declare interface TextLabelProperties {
    Text: string;
    Red: number;
    Green: number;
    Blue: number;
    Size: number;
    Range: number;
    EntitySeethrough: boolean;
}

declare interface UIntArgument {
    Data: number;
}

declare interface UpdateEntity {
    NetHandle: number;
    EntityType: number;
    Properties: Delta_EntityProperties;
}

declare class Vector3 {
    Normalized: Vector3;
    X: number;
    Y: number;
    Z: number;

    constructor();
    constructor(x: number, y: number, z: number);
    constructor(x: number, y: number, z: number);

    static Lerp(start: Vector3, end: Vector3, n: any): Vector3;
    static RandomXY(): Vector3;



    Add(right: Vector3): Vector3;
    Around(distance: number): Vector3;
    DistanceTo(right: Vector3): number;
    DistanceTo2D(right: Vector3): number;
    DistanceToSquared(right: Vector3): number;
    DistanceToSquared2D(right: Vector3): number;
    Divide(right: number): Vector3;
    Length(): number;
    LengthSquared(): number;
    Multiply(right: number): Vector3;
    Normalize(): void;
    Subtract(right: Vector3): Vector3;
    ToString(): string;
}

declare interface Vector3Argument {
    X: number;
    Y: number;
    Z: number;
}

declare interface VehicleDamageModel {
    BrokenWindows: number;
    BrokenDoors: number;
    BrokenLights: number;
}

declare interface VehicleData {
    Position: Vector3;
    VehicleHandle?: number;
    NetHandle?: number;
    PedModelHash?: number;
    WeaponHash?: number;
    Quaternion: Vector3;
    VehicleSeat?: number;
    VehicleHealth?: number;
    PlayerHealth?: number;
    Latency?: number;
    Velocity: Vector3;
    PedArmor?: number;
    AimCoords: Vector3;
    RPM?: number;
    Flag?: number;
    Steering?: number;
    Trailer: Vector3;
    DamageModel: VehicleDamageModel;
}

declare enum VehicleDataFlags {
    PressingHorn,
    Shooting,
    SirenActive,
    VehicleDead,
    Aiming,
    Driver,
    HasAimData,
    BurnOut,
    ExitingVehicle,
    PlayerDead
}

declare enum VehicleHash {
    Bagger,
    DockTrailer,
    Phantom,
    Dump,
    Blazer,
    Manana,
    Stunt,
    Faction,
    Avarus,
    Guardian,
    Rallytruck,
    Tug,
    StingerGT,
    Technical,
    Phoenix,
    Tractor2,
    Coach,
    Mesa3,
    Trailers3,
    Mule3,
    Italigtb,
    Rebel2,
    Primo2,
    Faction3,
    Tornado4,
    Cognoscenti,
    Comet3,
    PBus,
    Feltzer2,
    Boxville,
    Police4,
    Stretch,
    Nightshade,
    RapidGT,
    Windsor2,
    Asterope,
    Surge,
    Premier,
    Emperor2,
    Insurgent,
    Volatus,
    Faggio,
    Pfister811,
    Asea,
    Asea2,
    Gauntlet,
    Tornado5,
    Faction2,
    PoliceOld2,
    Rumpo2,
    Granger,
    TVTrailer,
    Penetrator,
    Seven70,
    Mammatus,
    GBurrito,
    Burrito3,
    Rubble,
    Scrap,
    Bullet,
    SabreGT,
    Sheriff,
    Velum,
    Supervolito2,
    Double,
    Dune,
    Mamba,
    Maverick,
    Radi,
    Phantom2,
    FBI2,
    ArmyTrailer2,
    Police2,
    Voltic,
    Nightblade,
    Valkyrie,
    Blazer5,
    Trailers2,
    Feltzer3,
    Tornado6,
    Gresley,
    PoliceOld1,
    Manchez,
    Schafter3,
    Brawler,
    Stanier,
    ArmyTrailer,
    Ninef2,
    Sanchez2,
    Prairie,
    Bodhi2,
    Daemon2,
    Zentorno,
    Kuruma,
    Chino2,
    Vindicator,
    TRFlat,
    Wastlndr,
    Burrito,
    TowTruck,
    Surfer2,
    Cheetah,
    Jester,
    Nimbus,
    EntityXF,
    Ingot,
    Faggio3,
    Lazer,
    Blazer3,
    Trash2,
    Schafter2,
    Emperor3,
    Dubsta3,
    TriBike2,
    le7b,
    Adder,
    Shamal,
    Luxor2,
    Rebel,
    ArmyTanker,
    Blade,
    Riot,
    Zion2,
    Sandking,
    Issi2,
    Primo,
    Fq2,
    Dilettante,
    Minivan2,
    Zion,
    Jester2,
    RentalBus,
    Furoregt,
    Tampa2,
    Submersible2,
    Mule2,
    Comet2,
    Marquis,
    Banshee,
    Seashark,
    Buccaneer2,
    Zombiea,
    Tailgater,
    Cutter,
    CableCar,
    Taxi,
    TipTruck2,
    Dominator2,
    PCJ,
    Burrito2,
    Dodo,
    Virgo2,
    Ruffian,
    Bati2,
    Schafter5,
    Docktug,
    Trailers,
    Ripley,
    Monster,
    Fixter,
    BType2,
    Dune4,
    Vigero,
    Barracks,
    Speedo,
    Baller,
    Patriot,
    Cavalcade2,
    Mixer,
    FreightTrailer,
    Omnis,
    Fcr2,
    Mesa2,
    Schwarzer,
    Tanker,
    Bus,
    Emperor,
    Buccaneer,
    Raptor,
    RatLoader,
    Trophytruck2,
    Cuban800,
    Nemesis,
    Massacro2,
    Jackal,
    Wolfsbane,
    Seashark2,
    Blimp2,
    Vortex,
    Cognoscenti2,
    BType3,
    Sadler,
    Blista3,
    F620,
    RatLoader2,
    Zombieb,
    Elegy2,
    Caddy2,
    Oracle2,
    Virgo,
    Predator,
    Italigtb2,
    TowTruck2,
    Blazer4,
    Monroe,
    Xls2,
    Panto,
    Shotaro,
    Stalion2,
    TriBike3,
    BaleTrailer,
    Dubsta2,
    Felon,
    Penumbra,
    Bifta,
    Blista,
    Swift,
    Dukes2,
    Dune5,
    Seashark3,
    Minivan,
    Brickade,
    Buffalo,
    SultanRS,
    Suntrap,
    Hakuchou2,
    Diablous,
    Boxville2,
    Ruiner,
    Stockade3,
    Scorcher,
    Innovation,
    Blimp,
    Massacro,
    Vader,
    Journey,
    Pony,
    Limo2,
    Bati,
    Felon2,
    Savage,
    Cargobob,
    Blazer2,
    Policeb,
    Bison,
    Regina,
    Exemplar,
    Chimera,
    CarbonRS,
    Virgo3,
    Hotknife,
    TipTruck,
    Faggio2,
    Youga,
    Glendale,
    Ztype,
    Dominator,
    Bf400,
    Kalahari,
    Trophytruck,
    Coquette,
    BType,
    Boxville3,
    Baller2,
    Miljet,
    FreightCar,
    Elegy,
    SabreGT2,
    Speeder,
    Reaper,
    Buffalo3,
    FreightCont2,
    Tempesta,
    Dinghy2,
    Tropic,
    GBurrito2,
    Hexer,
    Crusader,
    CogCabrio,
    Vacca,
    Gauntlet2,
    Chino,
    Polmav,
    PropTrailer,
    CargoPlane,
    Surano,
    Cliffhanger,
    RakeTrailer,
    Squalo,
    Turismor,
    Kuruma2,
    Infernus,
    Speeder2,
    Boxville4,
    Handler,
    Cruiser,
    PoliceT,
    Tornado,
    Lguard,
    Baller5,
    Mixer2,
    Lynx,
    Huntley,
    Fusilade,
    Dinghy3,
    UtilliTruck,
    Voodoo2,
    BoatTrailer,
    Moonbeam,
    Dune2,
    Khamelion,
    Packer,
    TankerCar,
    Luxor,
    Romero,
    Fcr,
    Barracks3,
    Banshee2,
    Baller4,
    Lectro,
    FreightGrain,
    Baller6,
    Boxville5,
    Contender,
    Surfer,
    Cog552,
    Supervolito,
    TrailerSmall,
    Dukes,
    Speedo2,
    SlamVan,
    Sadler2,
    Buffalo2,
    Gargoyle,
    Pranger,
    Sovereign,
    Frogger,
    Buzzard2,
    Alpha,
    Submersible,
    Rhino,
    Coquette3,
    Sanchez,
    Buzzard,
    Sheava,
    Defiler,
    SlamVan2,
    Annihilator,
    Rhapsody,
    BJXL,
    Biff,
    Jetmax,
    Dinghy4,
    Sentinel2,
    Habanero,
    Intruder,
    UtilliTruck2,
    Burrito4,
    Mule,
    Cog55,
    Toro2,
    Mesa,
    FreightCont1,
    Ruiner2,
    Casco,
    Pony2,
    Duster,
    Hydra,
    Sultan,
    Tampa,
    Voltic2,
    Sandking2,
    Coquette2,
    GrainTrailer,
    Youga2,
    Freight,
    Ninef,
    Dinghy,
    Nero,
    Blista2,
    Skylift,
    JB700,
    Jet,
    BobcatXL,
    Toro,
    Barracks2,
    Specter2,
    Swift2,
    Velum2,
    Pigalle,
    Nero2,
    Verlierer2,
    SlamVan3,
    Superd,
    BfInjection,
    FBI,
    TriBike,
    Bmx,
    Burrito5,
    Caddy,
    Rumpo,
    Ambulance,
    Dubsta,
    Technical2,
    Xls,
    Seminole,
    Marshall,
    Hakuchou,
    Landstalker,
    Bestiagts,
    Airbus,
    Serrano,
    Vestra,
    Oracle,
    Sentinel,
    Flatbed,
    Warrener,
    Cargobob3,
    Fmj,
    Tractor3,
    Tropic2,
    Rumpo3,
    Paradise,
    Schafter4,
    Sanctus,
    Forklift,
    Picador,
    Hauler,
    Tornado2,
    Valkyrie2,
    Stinger,
    Brioso,
    Airtug,
    Windsor,
    Cargobob2,
    Tractor,
    RancherXL,
    T20,
    Akuma,
    Dilettante2,
    Stratum,
    RapidGT2,
    Bison3,
    Stockade,
    Enduro,
    Tornado3,
    DLoader,
    Washington,
    Mower,
    TR3,
    Diablous2,
    Besra,
    Peyote,
    Thrust,
    Ratbike,
    Camper,
    Baller3,
    Specter,
    Bulldozer,
    Tropos,
    Moonbeam2,
    Fugitive,
    Police3,
    Trash,
    Schafter6,
    Sheriff2,
    Stalion,
    RancherXL2,
    FireTruck,
    Tourbus,
    Frogger2,
    Taco,
    Tanker2,
    Titan,
    Osiris,
    Daemon,
    Voodoo,
    Cavalcade,
    TrailerLogs,
    Futo,
    Cargobob4,
    Esskey,
    Police,
    Benson,
    Tyrus,
    Lurcher,
    Insurgent2,
    Bison2,
    Carbonizzare,
    TR2,
    TR4,
    Pounder,
    Prototipo,
    UtilliTruck3,
    Rocoto
}

declare interface VehicleProperties {
    PrimaryColor: number;
    SecondaryColor: number;
    Health: number;
    IsDead: boolean;
    Mods: number[];
    Siren: boolean;
    Doors: number;
    Trailer: number;
    Tires: number;
    Livery: number;
    NumberPlate: string;
    VehicleComponents: number;
    TraileredBy: number;
    DamageModel: VehicleDamageModel;
}

declare interface VersionCompatibility {
    LastCompatibleClientVersion: ParseableVersion;
    LastCompatibleServerVersion: ParseableVersion;
}

declare enum WeaponHash {
    CarbineRifle,
    Crowbar,
    Flashlight,
    Dagger,
    Grenade,
    Poolcue,
    Bat,
    Pistol50,
    Knife,
    MG,
    BullpupShotgun,
    BZGas,
    Unarmed,
    GrenadeLauncher,
    Musket,
    ProximityMine,
    AdvancedRifle,
    RPG,
    Pipebomb,
    MiniSMG,
    SNSPistol,
    AssaultRifle,
    SpecialCarbine,
    Revolver,
    MarksmanRifle,
    Battleaxe,
    HeavyPistol,
    KnuckleDuster,
    MachinePistol,
    MarksmanPistol,
    Machete,
    SwitchBlade,
    AssaultShotgun,
    DoubleBarrelShotgun,
    AssaultSMG,
    Hatchet,
    Bottle,
    Parachute,
    SmokeGrenade,
    SniperRifle,
    FireExtinguisher,
    CompactLauncher,
    Snowball,
    VintagePistol,
    CombatPDW,
    HeavySniper,
    Autoshotgun,
    MicroSMG,
    Wrench,
    Pistol,
    PumpShotgun,
    APPistol,
    Ball,
    Molotov,
    SMG,
    StickyBomb,
    PetrolCan,
    StunGun,
    HeavyShotgun,
    Minigun,
    Golfclub,
    FlareGun,
    Flare,
    GrenadeLauncherSmoke,
    Hammer,
    CombatPistol,
    Gusenberg,
    CompactRifle,
    HomingLauncher,
    Nightstick,
    Railgun,
    SawnoffShotgun,
    BullpupRifle,
    Firework,
    CombatMG
}

declare interface WhitelistCollection {
    Items: WhitelistItem[];
}

declare interface WhitelistItem {
    Hash: string;
}

declare interface WorldProperties {
    Hours: number;
    Minutes: number;
    Weather: number;
    LoadedIpl: string[];
    RemovedIpl: string[];
}

